
B1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004454  08004454  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800445c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004030  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040a4  200040a4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dde2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220f  00000000  00000000  0002de86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  00030098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a88  00000000  00000000  00030bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002566a  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc97  00000000  00000000  00056cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3ef2  00000000  00000000  00063981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147873  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003140  00000000  00000000  001478c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800432c 	.word	0x0800432c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800432c 	.word	0x0800432c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000090 	.word	0x20000090
 80005d4:	200000e4 	.word	0x200000e4

080005d8 <vPrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPrintString( const char *pcString )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 80005e0:	f002 ff38 	bl	8003454 <vPortEnterCritical>

		HAL_UART_Transmit(&huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), 10);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe03 	bl	80001f0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	230a      	movs	r3, #10
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <vPrintString+0x2c>)
 80005f4:	f001 fba3 	bl	8001d3e <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 80005f8:	f002 ff5c 	bl	80034b4 <vPortExitCritical>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002e4 	.word	0x200002e4

08000608 <delay_con_while>:
            SOLO ESTA AQUI POR MOTIVOS DIDACTICOS

   @param cuentas
 */
void delay_con_while( uint32_t ms )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    volatile uint32_t dummy;
    /* obtengo el tick absoluto */
    TickType_t base = xTaskGetTickCount();
 8000610:	f002 fb16 	bl	8002c40 <xTaskGetTickCount>
 8000614:	6178      	str	r0, [r7, #20]
    /* calculo el tick absoluto para destrabar el while */
    TickType_t target = base  + ms ;   /* no esta contemplado el wrap arraond */
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	613b      	str	r3, [r7, #16]
    while(  xTaskGetTickCount() < target   )
 800061e:	e002      	b.n	8000626 <delay_con_while+0x1e>
    {
        dummy++;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
    while(  xTaskGetTickCount() < target   )
 8000626:	f002 fb0b 	bl	8002c40 <xTaskGetTickCount>
 800062a:	4602      	mov	r2, r0
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	4293      	cmp	r3, r2
 8000630:	d8f6      	bhi.n	8000620 <delay_con_while+0x18>
    }
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <Tarea1_Code>:


void Tarea1_Code( void* taskParmPtr )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	vPrintString( "Tarea 1\r\n" );
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <Tarea1_Code+0x20>)
 8000646:	f7ff ffc7 	bl	80005d8 <vPrintString>

    while( 1 )
    {
        delay_con_while( 200 );
 800064a:	20c8      	movs	r0, #200	; 0xc8
 800064c:	f7ff ffdc 	bl	8000608 <delay_con_while>
        //PRINTF( "Blink %u at %u ms!\r\n", 1 , xTaskGetTickCount() );
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000650:	2101      	movs	r1, #1
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <Tarea1_Code+0x24>)
 8000654:	f000 fe73 	bl	800133e <HAL_GPIO_TogglePin>
        delay_con_while( 200 );
 8000658:	e7f7      	b.n	800064a <Tarea1_Code+0xe>
 800065a:	bf00      	nop
 800065c:	08004350 	.word	0x08004350
 8000660:	40020400 	.word	0x40020400

08000664 <Tarea2_Code>:

    //vTaskDelete( NULL );
}

void Tarea2_Code( void* taskParmPtr )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	vPrintString( "Tarea 2\r\n" );
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <Tarea2_Code+0x20>)
 800066e:	f7ff ffb3 	bl	80005d8 <vPrintString>
    uint32_t local_array[140];
#endif

    while( 1 )
    {
        delay_con_while( 500 );
 8000672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000676:	f7ff ffc7 	bl	8000608 <delay_con_while>

        //PRINTF( "Blink %u at %u ms!\r\n", 2 , xTaskGetTickCount() );
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <Tarea2_Code+0x24>)
 800067e:	f000 fe5e 	bl	800133e <HAL_GPIO_TogglePin>
        delay_con_while( 500 );
 8000682:	e7f6      	b.n	8000672 <Tarea2_Code+0xe>
 8000684:	0800435c 	.word	0x0800435c
 8000688:	40020400 	.word	0x40020400

0800068c <Tarea_Monitor_Code>:
#endif
    }
}

void Tarea_Monitor_Code( void* taskParmPtr )
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	char buffer [50];

	vPrintString( "Tarea 3\r\n" );
 8000694:	481f      	ldr	r0, [pc, #124]	; (8000714 <Tarea_Monitor_Code+0x88>)
 8000696:	f7ff ff9f 	bl	80005d8 <vPrintString>

    while( 1 )
    {
		delay_con_while( 1000 );
 800069a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069e:	f7ff ffb3 	bl	8000608 <delay_con_while>

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD3_Pin);
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	481c      	ldr	r0, [pc, #112]	; (8000718 <Tarea_Monitor_Code+0x8c>)
 80006a8:	f000 fe49 	bl	800133e <HAL_GPIO_TogglePin>

		sprintf( buffer, "Task %u min %u words\r\n", 1,  (unsigned int)uxTaskGetStackHighWaterMark( task_handle_task1 ) );
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <Tarea_Monitor_Code+0x90>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fcaf 	bl	8003014 <uxTaskGetStackHighWaterMark>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f107 000c 	add.w	r0, r7, #12
 80006bc:	2201      	movs	r2, #1
 80006be:	4918      	ldr	r1, [pc, #96]	; (8000720 <Tarea_Monitor_Code+0x94>)
 80006c0:	f003 f9d4 	bl	8003a6c <siprintf>
		vPrintString( buffer );
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff85 	bl	80005d8 <vPrintString>

        sprintf( buffer, "Task %u min %u words\r\n", 2,  (unsigned int)uxTaskGetStackHighWaterMark( task_handle_task2 ) );
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <Tarea_Monitor_Code+0x98>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fc9e 	bl	8003014 <uxTaskGetStackHighWaterMark>
 80006d8:	4603      	mov	r3, r0
 80006da:	f107 000c 	add.w	r0, r7, #12
 80006de:	2202      	movs	r2, #2
 80006e0:	490f      	ldr	r1, [pc, #60]	; (8000720 <Tarea_Monitor_Code+0x94>)
 80006e2:	f003 f9c3 	bl	8003a6c <siprintf>
		vPrintString( buffer );
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff74 	bl	80005d8 <vPrintString>

		sprintf( buffer, "Task %u min %u words\r\n", 3,  (unsigned int)uxTaskGetStackHighWaterMark( task_handle_task3 ) );
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <Tarea_Monitor_Code+0x9c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fc8d 	bl	8003014 <uxTaskGetStackHighWaterMark>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f107 000c 	add.w	r0, r7, #12
 8000700:	2203      	movs	r2, #3
 8000702:	4907      	ldr	r1, [pc, #28]	; (8000720 <Tarea_Monitor_Code+0x94>)
 8000704:	f003 f9b2 	bl	8003a6c <siprintf>
		vPrintString( buffer );
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff63 	bl	80005d8 <vPrintString>
		delay_con_while( 1000 );
 8000712:	e7c2      	b.n	800069a <Tarea_Monitor_Code+0xe>
 8000714:	08004368 	.word	0x08004368
 8000718:	40020400 	.word	0x40020400
 800071c:	2000032c 	.word	0x2000032c
 8000720:	08004374 	.word	0x08004374
 8000724:	20000330 	.word	0x20000330
 8000728:	20000334 	.word	0x20000334

0800072c <vApplicationStackOverflowHook>:

   @param pxTask
   @param pcTaskName
 */
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b090      	sub	sp, #64	; 0x40
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	char buffer [50];

	sprintf( buffer, "\r\nApplication Stack Overflow!! on Task: %s\r\n", ( char* )pcTaskName );
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	490a      	ldr	r1, [pc, #40]	; (8000768 <vApplicationStackOverflowHook+0x3c>)
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f994 	bl	8003a6c <siprintf>
	vPrintString( buffer );
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff45 	bl	80005d8 <vPrintString>

    taskENTER_CRITICAL();
 800074e:	f002 fe81 	bl	8003454 <vPortEnterCritical>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000756:	f383 8811 	msr	BASEPRI, r3
 800075a:	f3bf 8f6f 	isb	sy
 800075e:	f3bf 8f4f 	dsb	sy
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000764:	bf00      	nop
    configASSERT( 0 );   /* hang the execution for debugging purposes */
 8000766:	e7fe      	b.n	8000766 <vApplicationStackOverflowHook+0x3a>
 8000768:	0800438c 	.word	0x0800438c

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fac7 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f86b 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f8fd 	bl	8000978 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800077e:	f000 f8d1 	bl	8000924 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <main+0xb8>)
 8000784:	1d3c      	adds	r4, r7, #4
 8000786:	461d      	mov	r5, r3
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fe64 	bl	8002466 <osThreadCreate>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <main+0xbc>)
 80007a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Crear tarea en freeRTOS
  BaseType_t res1 =
      xTaskCreate(
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <main+0xc0>)
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	2301      	movs	r3, #1
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b2:	491f      	ldr	r1, [pc, #124]	; (8000830 <main+0xc4>)
 80007b4:	481f      	ldr	r0, [pc, #124]	; (8000834 <main+0xc8>)
 80007b6:	f001 ffc7 	bl	8002748 <xTaskCreate>
 80007ba:	62f8      	str	r0, [r7, #44]	; 0x2c
          tskIDLE_PRIORITY+1,         // Prioridad de la tarea
          &task_handle_task1            // Puntero a la tarea creada en el sistema
      );

  BaseType_t res2 =
      xTaskCreate(
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <main+0xcc>)
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2301      	movs	r3, #1
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ca:	491c      	ldr	r1, [pc, #112]	; (800083c <main+0xd0>)
 80007cc:	481c      	ldr	r0, [pc, #112]	; (8000840 <main+0xd4>)
 80007ce:	f001 ffbb 	bl	8002748 <xTaskCreate>
 80007d2:	62b8      	str	r0, [r7, #40]	; 0x28
          tskIDLE_PRIORITY+1,         // Prioridad de la tarea
          &task_handle_task2            // Puntero a la tarea creada en el sistema
      );

  BaseType_t res3=
      xTaskCreate(
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <main+0xd8>)
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2300      	movs	r3, #0
 80007de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e2:	4919      	ldr	r1, [pc, #100]	; (8000848 <main+0xdc>)
 80007e4:	4819      	ldr	r0, [pc, #100]	; (800084c <main+0xe0>)
 80007e6:	f001 ffaf 	bl	8002748 <xTaskCreate>
 80007ea:	6278      	str	r0, [r7, #36]	; 0x24
          NULL,                       // Parametros de tarea
          tskIDLE_PRIORITY+1,         // Prioridad de la tarea
          &task_handle_task3           // Puntero a la tarea creada en el sistema
      );

  configASSERT( res1 == pdPASS && res2 == pdPASS && res3 == pdPASS );
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d107      	bne.n	8000802 <main+0x96>
 80007f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d104      	bne.n	8000802 <main+0x96>
 80007f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d101      	bne.n	8000802 <main+0x96>
 80007fe:	2301      	movs	r3, #1
 8000800:	e000      	b.n	8000804 <main+0x98>
 8000802:	2300      	movs	r3, #0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d10a      	bne.n	800081e <main+0xb2>
	__asm volatile
 8000808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080c:	f383 8811 	msr	BASEPRI, r3
 8000810:	f3bf 8f6f 	isb	sy
 8000814:	f3bf 8f4f 	dsb	sy
 8000818:	623b      	str	r3, [r7, #32]
}
 800081a:	bf00      	nop
 800081c:	e7fe      	b.n	800081c <main+0xb0>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800081e:	f001 fe1b 	bl	8002458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000822:	e7fe      	b.n	8000822 <main+0xb6>
 8000824:	080043dc 	.word	0x080043dc
 8000828:	20000328 	.word	0x20000328
 800082c:	2000032c 	.word	0x2000032c
 8000830:	080043bc 	.word	0x080043bc
 8000834:	0800063d 	.word	0x0800063d
 8000838:	20000330 	.word	0x20000330
 800083c:	080043c8 	.word	0x080043c8
 8000840:	08000665 	.word	0x08000665
 8000844:	20000334 	.word	0x20000334
 8000848:	080043d4 	.word	0x080043d4
 800084c:	0800068d 	.word	0x0800068d

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	; 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f8fc 	bl	8003a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a27      	ldr	r2, [pc, #156]	; (800091c <SystemClock_Config+0xcc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <SystemClock_Config+0xd0>)
 800089a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008c4:	23a8      	movs	r3, #168	; 0xa8
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008cc:	2307      	movs	r3, #7
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fd4d 	bl	8001374 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e0:	f000 f900 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2105      	movs	r1, #5
 8000902:	4618      	mov	r0, r3
 8000904:	f000 ffae 	bl	8001864 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800090e:	f000 f8e9 	bl	8000ae4 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	; 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART3_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART3_UART_Init+0x4c>)
 800095c:	f001 f9a2 	bl	8001ca4 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f8bd 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200002e4 	.word	0x200002e4
 8000974:	40004800 	.word	0x40004800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a4b      	ldr	r2, [pc, #300]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	4b45      	ldr	r3, [pc, #276]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a44      	ldr	r2, [pc, #272]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a3d      	ldr	r2, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a36      	ldr	r2, [pc, #216]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a2f      	ldr	r2, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x150>)
 8000a3e:	f000 fc65 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <MX_GPIO_Init+0x154>)
 8000a48:	f000 fc60 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0x158>)
 8000a64:	f000 faa6 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a68:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x150>)
 8000a82:	f000 fa97 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x154>)
 8000a9e:	f000 fa89 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_GPIO_Init+0x154>)
 8000ab6:	f000 fa7d 	bl	8000fb4 <HAL_GPIO_Init>

}
 8000aba:	bf00      	nop
 8000abc:	3730      	adds	r7, #48	; 0x30
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f001 fd0e 	bl	80024fe <osDelay>
 8000ae2:	e7fb      	b.n	8000adc <StartDefaultTask+0x8>

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_MspInit+0x54>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_MspInit+0x54>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x54>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_MspInit+0x54>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_MspInit+0x54>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_MspInit+0x54>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	210f      	movs	r1, #15
 8000b32:	f06f 0001 	mvn.w	r0, #1
 8000b36:	f000 fa14 	bl	8000f62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_UART_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12c      	bne.n	8000bc4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000bc0:	f000 f9f8 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40004800 	.word	0x40004800
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020c00 	.word	0x40020c00

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f8ce 	bl	8000da8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c0c:	f002 fa6e 	bl	80030ec <xTaskGetSchedulerState>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d001      	beq.n	8000c1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c16:	f002 fcaf 	bl	8003578 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f002 fecc 	bl	80039ec <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20030000 	.word	0x20030000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000338 	.word	0x20000338
 8000c88:	200040a8 	.word	0x200040a8

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f002 fe8b 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fd43 	bl	800076c <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ce8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cf4:	0800445c 	.word	0x0800445c
  ldr r2, =_sbss
 8000cf8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cfc:	200040a4 	.word	0x200040a4

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f90d 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff feda 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f917 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f000 f8ed 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	2000033c 	.word	0x2000033c

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000033c 	.word	0x2000033c

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff47 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff5c 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffb0 	bl	8000f08 <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e177      	b.n	80012c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8166 	bne.w	80012ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80c0 	beq.w	80012ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a65      	ldr	r2, [pc, #404]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a61      	ldr	r2, [pc, #388]	; (80012dc <HAL_GPIO_Init+0x328>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_GPIO_Init+0x32c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d037      	beq.n	80011f2 <HAL_GPIO_Init+0x23e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x330>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d031      	beq.n	80011ee <HAL_GPIO_Init+0x23a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x236>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a55      	ldr	r2, [pc, #340]	; (80012ec <HAL_GPIO_Init+0x338>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x232>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x33c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x22e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x340>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x22a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x344>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x226>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a51      	ldr	r2, [pc, #324]	; (80012fc <HAL_GPIO_Init+0x348>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_GPIO_Init+0x34c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_GPIO_Init+0x350>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x21a>
 80011ca:	2309      	movs	r3, #9
 80011cc:	e012      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ce:	230a      	movs	r3, #10
 80011d0:	e010      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x328>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_GPIO_Init+0x354>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_GPIO_Init+0x354>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_GPIO_Init+0x354>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae84 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40022000 	.word	0x40022000
 8001304:	40022400 	.word	0x40022400
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001350:	887a      	ldrh	r2, [r7, #2]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	041a      	lsls	r2, r3, #16
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43d9      	mvns	r1, r3
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	400b      	ands	r3, r1
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e267      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d075      	beq.n	800147e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b04      	cmp	r3, #4
 800139c:	d00c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d112      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013b6:	d10b      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d05b      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d157      	bne.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e242      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d106      	bne.n	80013e8 <HAL_RCC_OscConfig+0x74>
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a75      	ldr	r2, [pc, #468]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x98>
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6f      	ldr	r2, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6c      	ldr	r2, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 800140c:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a68      	ldr	r2, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fcd0 	bl	8000dd0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fccc 	bl	8000dd0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e207      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xc0>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fcbc 	bl	8000dd0 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fcb8 	bl	8000dd0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1f3      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0xe8>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1c7      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4937      	ldr	r1, [pc, #220]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_RCC_OscConfig+0x244>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fc71 	bl	8000dd0 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc6d 	bl	8000dd0 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1a8      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4925      	ldr	r1, [pc, #148]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x244>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc50 	bl	8000dd0 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fc4c 	bl	8000dd0 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e187      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d036      	beq.n	80015cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d016      	beq.n	8001594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x248>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fc30 	bl	8000dd0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fc2c 	bl	8000dd0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e167      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x200>
 8001592:	e01b      	b.n	80015cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x248>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fc19 	bl	8000dd0 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	e00e      	b.n	80015c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fc15 	bl	8000dd0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d907      	bls.n	80015c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e150      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	42470000 	.word	0x42470000
 80015bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ea      	bne.n	80015a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8097 	beq.w	8001708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b7d      	ldr	r3, [pc, #500]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a73      	ldr	r2, [pc, #460]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbd5 	bl	8000dd0 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fbd1 	bl	8000dd0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e10c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x2ea>
 8001650:	4b64      	ldr	r3, [pc, #400]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a63      	ldr	r2, [pc, #396]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x30c>
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0304 	bic.w	r3, r3, #4
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d015      	beq.n	80016cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb96 	bl	8000dd0 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff fb92 	bl	8000dd0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0cb      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0ee      	beq.n	80016a8 <HAL_RCC_OscConfig+0x334>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fb80 	bl	8000dd0 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb7c 	bl	8000dd0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0b5      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a1 	beq.w	8001854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d05c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d141      	bne.n	80017aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb50 	bl	8000dd0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fb4c 	bl	8000dd0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e087      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb25 	bl	8000dd0 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fb21 	bl	8000dd0 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e05c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x416>
 80017a8:	e054      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb0e 	bl	8000dd0 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fb0a 	bl	8000dd0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e045      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x444>
 80017d6:	e03d      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e038      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000
 80017ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x4ec>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d028      	beq.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d121      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11a      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001820:	4013      	ands	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001828:	4293      	cmp	r3, r2
 800182a:	d111      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	3b01      	subs	r3, #1
 800183a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0cc      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d90c      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d044      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	2b03      	cmp	r3, #3
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e067      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4934      	ldr	r1, [pc, #208]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fa3c 	bl	8000dd0 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fa38 	bl	8000dd0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e04f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d20c      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f99c 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08004400 	.word	0x08004400
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a34:	b094      	sub	sp, #80	; 0x50
 8001a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a48:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d00d      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	f200 80e1 	bhi.w	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x34>
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a62:	e0db      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a68:	e0db      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a6e:	e0d8      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	462b      	mov	r3, r5
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0159      	lsls	r1, r3, #5
 8001ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab4:	0150      	lsls	r0, r2, #5
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4621      	mov	r1, r4
 8001abc:	1a51      	subs	r1, r2, r1
 8001abe:	6139      	str	r1, [r7, #16]
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad4:	4659      	mov	r1, fp
 8001ad6:	018b      	lsls	r3, r1, #6
 8001ad8:	4651      	mov	r1, sl
 8001ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ade:	4651      	mov	r1, sl
 8001ae0:	018a      	lsls	r2, r1, #6
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae8:	4659      	mov	r1, fp
 8001aea:	eb63 0901 	sbc.w	r9, r3, r1
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	eb18 0303 	adds.w	r3, r8, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	462b      	mov	r3, r5
 8001b10:	eb49 0303 	adc.w	r3, r9, r3
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b22:	4629      	mov	r1, r5
 8001b24:	024b      	lsls	r3, r1, #9
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	024a      	lsls	r2, r1, #9
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b40:	f7fe fbae 	bl	80002a0 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b4c:	e058      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	2200      	movs	r2, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	4611      	mov	r1, r2
 8001b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b68:	4642      	mov	r2, r8
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	f04f 0000 	mov.w	r0, #0
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	0159      	lsls	r1, r3, #5
 8001b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7a:	0150      	lsls	r0, r2, #5
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4641      	mov	r1, r8
 8001b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b86:	4649      	mov	r1, r9
 8001b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	00eb      	lsls	r3, r5, #3
 8001bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb6:	00e2      	lsls	r2, r4, #3
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	18e3      	adds	r3, r4, r3
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	eb45 0303 	adc.w	r3, r5, r3
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	028b      	lsls	r3, r1, #10
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be0:	4621      	mov	r1, r4
 8001be2:	028a      	lsls	r2, r1, #10
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	61fa      	str	r2, [r7, #28]
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fb54 	bl	80002a0 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3750      	adds	r7, #80	; 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08004410 	.word	0x08004410

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffdc 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0b5b      	lsrs	r3, r3, #13
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08004410 	.word	0x08004410

08001ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e03f      	b.n	8001d36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe ff3c 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f929 	bl	8001f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b08a      	sub	sp, #40	; 0x28
 8001d42:	af02      	add	r7, sp, #8
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d17c      	bne.n	8001e58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_UART_Transmit+0x2c>
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e075      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_UART_Transmit+0x3e>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e06e      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	; 0x21
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d92:	f7ff f81d 	bl	8000dd0 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dac:	d108      	bne.n	8001dc0 <HAL_UART_Transmit+0x82>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e003      	b.n	8001dc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001dd0:	e02a      	b.n	8001e28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f840 	bl	8001e62 <UART_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e036      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3302      	adds	r3, #2
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	e007      	b.n	8001e1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1cf      	bne.n	8001dd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f810 	bl	8001e62 <UART_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e006      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b090      	sub	sp, #64	; 0x40
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e72:	e050      	b.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e7a:	d04c      	beq.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e82:	f7fe ffa5 	bl	8000dd0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d241      	bcs.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	330c      	adds	r3, #12
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9c:	e853 3f00 	ldrex	r3, [r3]
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	330c      	adds	r3, #12
 8001eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eb2:	637a      	str	r2, [r7, #52]	; 0x34
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eba:	e841 2300 	strex	r3, r2, [r1]
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e5      	bne.n	8001e92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3314      	adds	r3, #20
 8001ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3314      	adds	r3, #20
 8001ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ee6:	623a      	str	r2, [r7, #32]
 8001ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eea:	69f9      	ldr	r1, [r7, #28]
 8001eec:	6a3a      	ldr	r2, [r7, #32]
 8001eee:	e841 2300 	strex	r3, r2, [r1]
 8001ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e5      	bne.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e00f      	b.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d09f      	beq.n	8001e74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3740      	adds	r7, #64	; 0x40
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f44:	b0c0      	sub	sp, #256	; 0x100
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5c:	68d9      	ldr	r1, [r3, #12]
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	ea40 0301 	orr.w	r3, r0, r1
 8001f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f98:	f021 010c 	bic.w	r1, r1, #12
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fba:	6999      	ldr	r1, [r3, #24]
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	ea40 0301 	orr.w	r3, r0, r1
 8001fc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b8f      	ldr	r3, [pc, #572]	; (800220c <UART_SetConfig+0x2cc>)
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <UART_SetConfig+0xa0>
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b8d      	ldr	r3, [pc, #564]	; (8002210 <UART_SetConfig+0x2d0>)
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d104      	bne.n	8001fea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fe0:	f7ff fe4c 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8001fe4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fe8:	e003      	b.n	8001ff2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fea:	f7ff fe33 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8001fee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ffc:	f040 810c 	bne.w	8002218 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002004:	2200      	movs	r2, #0
 8002006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800200a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800200e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002012:	4622      	mov	r2, r4
 8002014:	462b      	mov	r3, r5
 8002016:	1891      	adds	r1, r2, r2
 8002018:	65b9      	str	r1, [r7, #88]	; 0x58
 800201a:	415b      	adcs	r3, r3
 800201c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800201e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002022:	4621      	mov	r1, r4
 8002024:	eb12 0801 	adds.w	r8, r2, r1
 8002028:	4629      	mov	r1, r5
 800202a:	eb43 0901 	adc.w	r9, r3, r1
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800203e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	4623      	mov	r3, r4
 8002048:	eb18 0303 	adds.w	r3, r8, r3
 800204c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002050:	462b      	mov	r3, r5
 8002052:	eb49 0303 	adc.w	r3, r9, r3
 8002056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800205a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002066:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800206a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800206e:	460b      	mov	r3, r1
 8002070:	18db      	adds	r3, r3, r3
 8002072:	653b      	str	r3, [r7, #80]	; 0x50
 8002074:	4613      	mov	r3, r2
 8002076:	eb42 0303 	adc.w	r3, r2, r3
 800207a:	657b      	str	r3, [r7, #84]	; 0x54
 800207c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002080:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002084:	f7fe f90c 	bl	80002a0 <__aeabi_uldivmod>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4b61      	ldr	r3, [pc, #388]	; (8002214 <UART_SetConfig+0x2d4>)
 800208e:	fba3 2302 	umull	r2, r3, r3, r2
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	011c      	lsls	r4, r3, #4
 8002096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800209a:	2200      	movs	r2, #0
 800209c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020a8:	4642      	mov	r2, r8
 80020aa:	464b      	mov	r3, r9
 80020ac:	1891      	adds	r1, r2, r2
 80020ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80020b0:	415b      	adcs	r3, r3
 80020b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020b8:	4641      	mov	r1, r8
 80020ba:	eb12 0a01 	adds.w	sl, r2, r1
 80020be:	4649      	mov	r1, r9
 80020c0:	eb43 0b01 	adc.w	fp, r3, r1
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020d8:	4692      	mov	sl, r2
 80020da:	469b      	mov	fp, r3
 80020dc:	4643      	mov	r3, r8
 80020de:	eb1a 0303 	adds.w	r3, sl, r3
 80020e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020e6:	464b      	mov	r3, r9
 80020e8:	eb4b 0303 	adc.w	r3, fp, r3
 80020ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002100:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002104:	460b      	mov	r3, r1
 8002106:	18db      	adds	r3, r3, r3
 8002108:	643b      	str	r3, [r7, #64]	; 0x40
 800210a:	4613      	mov	r3, r2
 800210c:	eb42 0303 	adc.w	r3, r2, r3
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
 8002112:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002116:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800211a:	f7fe f8c1 	bl	80002a0 <__aeabi_uldivmod>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4611      	mov	r1, r2
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <UART_SetConfig+0x2d4>)
 8002126:	fba3 2301 	umull	r2, r3, r3, r1
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2264      	movs	r2, #100	; 0x64
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	1acb      	subs	r3, r1, r3
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800213a:	4b36      	ldr	r3, [pc, #216]	; (8002214 <UART_SetConfig+0x2d4>)
 800213c:	fba3 2302 	umull	r2, r3, r3, r2
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002148:	441c      	add	r4, r3
 800214a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002154:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002158:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800215c:	4642      	mov	r2, r8
 800215e:	464b      	mov	r3, r9
 8002160:	1891      	adds	r1, r2, r2
 8002162:	63b9      	str	r1, [r7, #56]	; 0x38
 8002164:	415b      	adcs	r3, r3
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800216c:	4641      	mov	r1, r8
 800216e:	1851      	adds	r1, r2, r1
 8002170:	6339      	str	r1, [r7, #48]	; 0x30
 8002172:	4649      	mov	r1, r9
 8002174:	414b      	adcs	r3, r1
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002184:	4659      	mov	r1, fp
 8002186:	00cb      	lsls	r3, r1, #3
 8002188:	4651      	mov	r1, sl
 800218a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800218e:	4651      	mov	r1, sl
 8002190:	00ca      	lsls	r2, r1, #3
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	4603      	mov	r3, r0
 8002198:	4642      	mov	r2, r8
 800219a:	189b      	adds	r3, r3, r2
 800219c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021a0:	464b      	mov	r3, r9
 80021a2:	460a      	mov	r2, r1
 80021a4:	eb42 0303 	adc.w	r3, r2, r3
 80021a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021c0:	460b      	mov	r3, r1
 80021c2:	18db      	adds	r3, r3, r3
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c6:	4613      	mov	r3, r2
 80021c8:	eb42 0303 	adc.w	r3, r2, r3
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021d6:	f7fe f863 	bl	80002a0 <__aeabi_uldivmod>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <UART_SetConfig+0x2d4>)
 80021e0:	fba3 1302 	umull	r1, r3, r3, r2
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	2164      	movs	r1, #100	; 0x64
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	3332      	adds	r3, #50	; 0x32
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <UART_SetConfig+0x2d4>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	f003 0207 	and.w	r2, r3, #7
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4422      	add	r2, r4
 8002206:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002208:	e105      	b.n	8002416 <UART_SetConfig+0x4d6>
 800220a:	bf00      	nop
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800221c:	2200      	movs	r2, #0
 800221e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002222:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002226:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800222a:	4642      	mov	r2, r8
 800222c:	464b      	mov	r3, r9
 800222e:	1891      	adds	r1, r2, r2
 8002230:	6239      	str	r1, [r7, #32]
 8002232:	415b      	adcs	r3, r3
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800223a:	4641      	mov	r1, r8
 800223c:	1854      	adds	r4, r2, r1
 800223e:	4649      	mov	r1, r9
 8002240:	eb43 0501 	adc.w	r5, r3, r1
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	00eb      	lsls	r3, r5, #3
 800224e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002252:	00e2      	lsls	r2, r4, #3
 8002254:	4614      	mov	r4, r2
 8002256:	461d      	mov	r5, r3
 8002258:	4643      	mov	r3, r8
 800225a:	18e3      	adds	r3, r4, r3
 800225c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002260:	464b      	mov	r3, r9
 8002262:	eb45 0303 	adc.w	r3, r5, r3
 8002266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800226a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002276:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002286:	4629      	mov	r1, r5
 8002288:	008b      	lsls	r3, r1, #2
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002290:	4621      	mov	r1, r4
 8002292:	008a      	lsls	r2, r1, #2
 8002294:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002298:	f7fe f802 	bl	80002a0 <__aeabi_uldivmod>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4b60      	ldr	r3, [pc, #384]	; (8002424 <UART_SetConfig+0x4e4>)
 80022a2:	fba3 2302 	umull	r2, r3, r3, r2
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	011c      	lsls	r4, r3, #4
 80022aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022bc:	4642      	mov	r2, r8
 80022be:	464b      	mov	r3, r9
 80022c0:	1891      	adds	r1, r2, r2
 80022c2:	61b9      	str	r1, [r7, #24]
 80022c4:	415b      	adcs	r3, r3
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022cc:	4641      	mov	r1, r8
 80022ce:	1851      	adds	r1, r2, r1
 80022d0:	6139      	str	r1, [r7, #16]
 80022d2:	4649      	mov	r1, r9
 80022d4:	414b      	adcs	r3, r1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e4:	4659      	mov	r1, fp
 80022e6:	00cb      	lsls	r3, r1, #3
 80022e8:	4651      	mov	r1, sl
 80022ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ee:	4651      	mov	r1, sl
 80022f0:	00ca      	lsls	r2, r1, #3
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	4642      	mov	r2, r8
 80022fa:	189b      	adds	r3, r3, r2
 80022fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002300:	464b      	mov	r3, r9
 8002302:	460a      	mov	r2, r1
 8002304:	eb42 0303 	adc.w	r3, r2, r3
 8002308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	67bb      	str	r3, [r7, #120]	; 0x78
 8002316:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002324:	4649      	mov	r1, r9
 8002326:	008b      	lsls	r3, r1, #2
 8002328:	4641      	mov	r1, r8
 800232a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800232e:	4641      	mov	r1, r8
 8002330:	008a      	lsls	r2, r1, #2
 8002332:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002336:	f7fd ffb3 	bl	80002a0 <__aeabi_uldivmod>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <UART_SetConfig+0x4e4>)
 8002340:	fba3 1302 	umull	r1, r3, r3, r2
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	2164      	movs	r1, #100	; 0x64
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	3332      	adds	r3, #50	; 0x32
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <UART_SetConfig+0x4e4>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800235e:	441c      	add	r4, r3
 8002360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002364:	2200      	movs	r2, #0
 8002366:	673b      	str	r3, [r7, #112]	; 0x70
 8002368:	677a      	str	r2, [r7, #116]	; 0x74
 800236a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800236e:	4642      	mov	r2, r8
 8002370:	464b      	mov	r3, r9
 8002372:	1891      	adds	r1, r2, r2
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	415b      	adcs	r3, r3
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800237e:	4641      	mov	r1, r8
 8002380:	1851      	adds	r1, r2, r1
 8002382:	6039      	str	r1, [r7, #0]
 8002384:	4649      	mov	r1, r9
 8002386:	414b      	adcs	r3, r1
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002396:	4659      	mov	r1, fp
 8002398:	00cb      	lsls	r3, r1, #3
 800239a:	4651      	mov	r1, sl
 800239c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a0:	4651      	mov	r1, sl
 80023a2:	00ca      	lsls	r2, r1, #3
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	4603      	mov	r3, r0
 80023aa:	4642      	mov	r2, r8
 80023ac:	189b      	adds	r3, r3, r2
 80023ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80023b0:	464b      	mov	r3, r9
 80023b2:	460a      	mov	r2, r1
 80023b4:	eb42 0303 	adc.w	r3, r2, r3
 80023b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	663b      	str	r3, [r7, #96]	; 0x60
 80023c4:	667a      	str	r2, [r7, #100]	; 0x64
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023d2:	4649      	mov	r1, r9
 80023d4:	008b      	lsls	r3, r1, #2
 80023d6:	4641      	mov	r1, r8
 80023d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023dc:	4641      	mov	r1, r8
 80023de:	008a      	lsls	r2, r1, #2
 80023e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023e4:	f7fd ff5c 	bl	80002a0 <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <UART_SetConfig+0x4e4>)
 80023ee:	fba3 1302 	umull	r1, r3, r3, r2
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2164      	movs	r1, #100	; 0x64
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	3332      	adds	r3, #50	; 0x32
 8002400:	4a08      	ldr	r2, [pc, #32]	; (8002424 <UART_SetConfig+0x4e4>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4422      	add	r2, r4
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	bf00      	nop
 8002418:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	51eb851f 	.word	0x51eb851f

08002428 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800243a:	2b84      	cmp	r3, #132	; 0x84
 800243c:	d005      	beq.n	800244a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800243e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	3303      	adds	r3, #3
 8002448:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800245c:	f000 fae6 	bl	8002a2c <vTaskStartScheduler>
  
  return osOK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}

08002466 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002468:	b089      	sub	sp, #36	; 0x24
 800246a:	af04      	add	r7, sp, #16
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <osThreadCreate+0x54>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01c      	beq.n	80024ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685c      	ldr	r4, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681d      	ldr	r5, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691e      	ldr	r6, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ffc8 	bl	8002428 <makeFreeRtosPriority>
 8002498:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024a2:	9202      	str	r2, [sp, #8]
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	9100      	str	r1, [sp, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4632      	mov	r2, r6
 80024ac:	4629      	mov	r1, r5
 80024ae:	4620      	mov	r0, r4
 80024b0:	f000 f8ed 	bl	800268e <xTaskCreateStatic>
 80024b4:	4603      	mov	r3, r0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e01c      	b.n	80024f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685c      	ldr	r4, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024c6:	b29e      	uxth	r6, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ffaa 	bl	8002428 <makeFreeRtosPriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	9200      	str	r2, [sp, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	4632      	mov	r2, r6
 80024e2:	4629      	mov	r1, r5
 80024e4:	4620      	mov	r0, r4
 80024e6:	f000 f92f 	bl	8002748 <xTaskCreate>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d001      	beq.n	80024f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80024f4:	68fb      	ldr	r3, [r7, #12]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <osDelay+0x16>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	e000      	b.n	8002516 <osDelay+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fa54 	bl	80029c4 <vTaskDelay>
  
  return osOK;
 800251c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0208 	add.w	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800253e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0208 	add.w	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0208 	add.w	r2, r3, #8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	601a      	str	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025de:	d103      	bne.n	80025e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e00c      	b.n	8002602 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3308      	adds	r3, #8
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e002      	b.n	80025f6 <vListInsert+0x2e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d2f6      	bcs.n	80025f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	601a      	str	r2, [r3, #0]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6892      	ldr	r2, [r2, #8]
 8002650:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6852      	ldr	r2, [r2, #4]
 800265a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d103      	bne.n	800266e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800268e:	b580      	push	{r7, lr}
 8002690:	b08e      	sub	sp, #56	; 0x38
 8002692:	af04      	add	r7, sp, #16
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	623b      	str	r3, [r7, #32]
}
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	61fb      	str	r3, [r7, #28]
}
 80026d0:	bf00      	nop
 80026d2:	e7fe      	b.n	80026d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026d4:	2354      	movs	r3, #84	; 0x54
 80026d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b54      	cmp	r3, #84	; 0x54
 80026dc:	d00a      	beq.n	80026f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	61bb      	str	r3, [r7, #24]
}
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80026f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01e      	beq.n	800273a <xTaskCreateStatic+0xac>
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01b      	beq.n	800273a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800270a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002714:	2300      	movs	r3, #0
 8002716:	9303      	str	r3, [sp, #12]
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f850 	bl	80027d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002734:	f000 f8dc 	bl	80028f0 <prvAddNewTaskToReadyList>
 8002738:	e001      	b.n	800273e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800273e:	697b      	ldr	r3, [r7, #20]
	}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af04      	add	r7, sp, #16
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4618      	mov	r0, r3
 800275e:	f000 ff5b 	bl	8003618 <pvPortMalloc>
 8002762:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800276a:	2054      	movs	r0, #84	; 0x54
 800276c:	f000 ff54 	bl	8003618 <pvPortMalloc>
 8002770:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
 800277e:	e005      	b.n	800278c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002780:	6978      	ldr	r0, [r7, #20]
 8002782:	f001 f815 	bl	80037b0 <vPortFree>
 8002786:	e001      	b.n	800278c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d017      	beq.n	80027c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	2300      	movs	r3, #0
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	9302      	str	r3, [sp, #8]
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f80e 	bl	80027d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027b6:	69f8      	ldr	r0, [r7, #28]
 80027b8:	f000 f89a 	bl	80028f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027bc:	2301      	movs	r3, #1
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	e002      	b.n	80027c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027c8:	69bb      	ldr	r3, [r7, #24]
	}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b088      	sub	sp, #32
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	461a      	mov	r2, r3
 80027ea:	21a5      	movs	r1, #165	; 0xa5
 80027ec:	f001 f936 	bl	8003a5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027fa:	3b01      	subs	r3, #1
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f023 0307 	bic.w	r3, r3, #7
 8002808:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	617b      	str	r3, [r7, #20]
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01f      	beq.n	8002870 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	e012      	b.n	800285c <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	7819      	ldrb	r1, [r3, #0]
 800283e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	3334      	adds	r3, #52	; 0x34
 8002846:	460a      	mov	r2, r1
 8002848:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	d9e9      	bls.n	8002836 <prvInitialiseNewTask+0x64>
 8002862:	e000      	b.n	8002866 <prvInitialiseNewTask+0x94>
			{
				break;
 8002864:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800286e:	e003      	b.n	8002878 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	2b06      	cmp	r3, #6
 800287c:	d901      	bls.n	8002882 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800287e:	2306      	movs	r3, #6
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	2200      	movs	r2, #0
 8002892:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	3304      	adds	r3, #4
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fe64 	bl	8002566 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	3318      	adds	r3, #24
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fe5f 	bl	8002566 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	f1c3 0207 	rsb	r2, r3, #7
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	2200      	movs	r2, #0
 80028c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	69b8      	ldr	r0, [r7, #24]
 80028d2:	f000 fc8f 	bl	80031f4 <pxPortInitialiseStack>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028f8:	f000 fdac 	bl	8003454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <prvAddNewTaskToReadyList+0xb8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <prvAddNewTaskToReadyList+0xb8>)
 8002904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <prvAddNewTaskToReadyList+0xbc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800290e:	4a27      	ldr	r2, [pc, #156]	; (80029ac <prvAddNewTaskToReadyList+0xbc>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <prvAddNewTaskToReadyList+0xb8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d110      	bne.n	800293e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800291c:	f000 faf0 	bl	8002f00 <prvInitialiseTaskLists>
 8002920:	e00d      	b.n	800293e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <prvAddNewTaskToReadyList+0xc0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <prvAddNewTaskToReadyList+0xbc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	429a      	cmp	r2, r3
 8002936:	d802      	bhi.n	800293e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <prvAddNewTaskToReadyList+0xbc>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <prvAddNewTaskToReadyList+0xc4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <prvAddNewTaskToReadyList+0xc4>)
 8002946:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	2201      	movs	r2, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <prvAddNewTaskToReadyList+0xc8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <prvAddNewTaskToReadyList+0xc8>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <prvAddNewTaskToReadyList+0xcc>)
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7ff fe05 	bl	8002580 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002976:	f000 fd9d 	bl	80034b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <prvAddNewTaskToReadyList+0xc0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <prvAddNewTaskToReadyList+0xbc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <prvAddNewTaskToReadyList+0xd0>)
 8002992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000440 	.word	0x20000440
 80029ac:	20000340 	.word	0x20000340
 80029b0:	2000044c 	.word	0x2000044c
 80029b4:	2000045c 	.word	0x2000045c
 80029b8:	20000448 	.word	0x20000448
 80029bc:	20000344 	.word	0x20000344
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d017      	beq.n	8002a06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <vTaskDelay+0x60>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <vTaskDelay+0x30>
	__asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	60bb      	str	r3, [r7, #8]
}
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80029f4:	f000 f87a 	bl	8002aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029f8:	2100      	movs	r1, #0
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fb94 	bl	8003128 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a00:	f000 f882 	bl	8002b08 <xTaskResumeAll>
 8002a04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <vTaskDelay+0x64>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000468 	.word	0x20000468
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a3a:	463a      	mov	r2, r7
 8002a3c:	1d39      	adds	r1, r7, #4
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fdae 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	9202      	str	r2, [sp, #8]
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2300      	movs	r3, #0
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2300      	movs	r3, #0
 8002a58:	460a      	mov	r2, r1
 8002a5a:	491e      	ldr	r1, [pc, #120]	; (8002ad4 <vTaskStartScheduler+0xa8>)
 8002a5c:	481e      	ldr	r0, [pc, #120]	; (8002ad8 <vTaskStartScheduler+0xac>)
 8002a5e:	f7ff fe16 	bl	800268e <xTaskCreateStatic>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <vTaskStartScheduler+0xb0>)
 8002a66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <vTaskStartScheduler+0xb0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a70:	2301      	movs	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e001      	b.n	8002a7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d116      	bne.n	8002aae <vTaskStartScheduler+0x82>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	613b      	str	r3, [r7, #16]
}
 8002a92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <vTaskStartScheduler+0xb4>)
 8002a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <vTaskStartScheduler+0xb8>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <vTaskStartScheduler+0xbc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002aa8:	f000 fc32 	bl	8003310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002aac:	e00e      	b.n	8002acc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab4:	d10a      	bne.n	8002acc <vTaskStartScheduler+0xa0>
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	60fb      	str	r3, [r7, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <vTaskStartScheduler+0x9e>
}
 8002acc:	bf00      	nop
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	080043f8 	.word	0x080043f8
 8002ad8:	08002ed1 	.word	0x08002ed1
 8002adc:	20000464 	.word	0x20000464
 8002ae0:	20000460 	.word	0x20000460
 8002ae4:	2000044c 	.word	0x2000044c
 8002ae8:	20000444 	.word	0x20000444

08002aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <vTaskSuspendAll+0x18>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <vTaskSuspendAll+0x18>)
 8002af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	20000468 	.word	0x20000468

08002b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <xTaskResumeAll+0x114>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <xTaskResumeAll+0x2c>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	603b      	str	r3, [r7, #0]
}
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b34:	f000 fc8e 	bl	8003454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b38:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <xTaskResumeAll+0x114>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	4a37      	ldr	r2, [pc, #220]	; (8002c1c <xTaskResumeAll+0x114>)
 8002b40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <xTaskResumeAll+0x114>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d161      	bne.n	8002c0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b4a:	4b35      	ldr	r3, [pc, #212]	; (8002c20 <xTaskResumeAll+0x118>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d05d      	beq.n	8002c0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b52:	e02e      	b.n	8002bb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b54:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <xTaskResumeAll+0x11c>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3318      	adds	r3, #24
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fd6a 	bl	800263a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fd65 	bl	800263a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	2201      	movs	r2, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <xTaskResumeAll+0x120>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <xTaskResumeAll+0x120>)
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <xTaskResumeAll+0x124>)
 8002b90:	441a      	add	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3304      	adds	r3, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f7ff fcf1 	bl	8002580 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba2:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <xTaskResumeAll+0x128>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <xTaskResumeAll+0x12c>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <xTaskResumeAll+0x11c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1cc      	bne.n	8002b54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002bc0:	f000 fa74 	bl	80030ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <xTaskResumeAll+0x130>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d010      	beq.n	8002bf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002bd0:	f000 f846 	bl	8002c60 <xTaskIncrementTick>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <xTaskResumeAll+0x12c>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f1      	bne.n	8002bd0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <xTaskResumeAll+0x130>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <xTaskResumeAll+0x12c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <xTaskResumeAll+0x134>)
 8002c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c0e:	f000 fc51 	bl	80034b4 <vPortExitCritical>

	return xAlreadyYielded;
 8002c12:	68bb      	ldr	r3, [r7, #8]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000468 	.word	0x20000468
 8002c20:	20000440 	.word	0x20000440
 8002c24:	20000400 	.word	0x20000400
 8002c28:	20000448 	.word	0x20000448
 8002c2c:	20000344 	.word	0x20000344
 8002c30:	20000340 	.word	0x20000340
 8002c34:	20000454 	.word	0x20000454
 8002c38:	20000450 	.word	0x20000450
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <xTaskGetTickCount+0x1c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c4c:	687b      	ldr	r3, [r7, #4]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000444 	.word	0x20000444

08002c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	; (8002da4 <xTaskIncrementTick+0x144>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 808e 	bne.w	8002d90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c74:	4b4c      	ldr	r3, [pc, #304]	; (8002da8 <xTaskIncrementTick+0x148>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c7c:	4a4a      	ldr	r2, [pc, #296]	; (8002da8 <xTaskIncrementTick+0x148>)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d120      	bne.n	8002cca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c88:	4b48      	ldr	r3, [pc, #288]	; (8002dac <xTaskIncrementTick+0x14c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <xTaskIncrementTick+0x48>
	__asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	603b      	str	r3, [r7, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	e7fe      	b.n	8002ca6 <xTaskIncrementTick+0x46>
 8002ca8:	4b40      	ldr	r3, [pc, #256]	; (8002dac <xTaskIncrementTick+0x14c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <xTaskIncrementTick+0x150>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <xTaskIncrementTick+0x14c>)
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4a3e      	ldr	r2, [pc, #248]	; (8002db0 <xTaskIncrementTick+0x150>)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <xTaskIncrementTick+0x154>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a3c      	ldr	r2, [pc, #240]	; (8002db4 <xTaskIncrementTick+0x154>)
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	f000 f9f1 	bl	80030ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <xTaskIncrementTick+0x158>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d348      	bcc.n	8002d66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <xTaskIncrementTick+0x14c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <xTaskIncrementTick+0x158>)
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce4:	601a      	str	r2, [r3, #0]
					break;
 8002ce6:	e03e      	b.n	8002d66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <xTaskIncrementTick+0x14c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d203      	bcs.n	8002d08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d00:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <xTaskIncrementTick+0x158>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d06:	e02e      	b.n	8002d66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fc94 	bl	800263a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3318      	adds	r3, #24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fc8b 	bl	800263a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2201      	movs	r2, #1
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <xTaskIncrementTick+0x15c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <xTaskIncrementTick+0x15c>)
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <xTaskIncrementTick+0x160>)
 8002d44:	441a      	add	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f7ff fc17 	bl	8002580 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <xTaskIncrementTick+0x164>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3b9      	bcc.n	8002cd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d64:	e7b6      	b.n	8002cd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <xTaskIncrementTick+0x164>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	4914      	ldr	r1, [pc, #80]	; (8002dc0 <xTaskIncrementTick+0x160>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d901      	bls.n	8002d82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <xTaskIncrementTick+0x168>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e004      	b.n	8002d9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <xTaskIncrementTick+0x16c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <xTaskIncrementTick+0x16c>)
 8002d98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002d9a:	697b      	ldr	r3, [r7, #20]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000468 	.word	0x20000468
 8002da8:	20000444 	.word	0x20000444
 8002dac:	200003f8 	.word	0x200003f8
 8002db0:	200003fc 	.word	0x200003fc
 8002db4:	20000458 	.word	0x20000458
 8002db8:	20000460 	.word	0x20000460
 8002dbc:	20000448 	.word	0x20000448
 8002dc0:	20000344 	.word	0x20000344
 8002dc4:	20000340 	.word	0x20000340
 8002dc8:	20000454 	.word	0x20000454
 8002dcc:	20000450 	.word	0x20000450

08002dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <vTaskSwitchContext+0xec>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <vTaskSwitchContext+0xf0>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002de4:	e066      	b.n	8002eb4 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <vTaskSwitchContext+0xf0>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <vTaskSwitchContext+0xf4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d111      	bne.n	8002e28 <vTaskSwitchContext+0x58>
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3304      	adds	r3, #4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d10b      	bne.n	8002e28 <vTaskSwitchContext+0x58>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	3308      	adds	r3, #8
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d105      	bne.n	8002e28 <vTaskSwitchContext+0x58>
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d008      	beq.n	8002e3a <vTaskSwitchContext+0x6a>
 8002e28:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <vTaskSwitchContext+0xf4>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <vTaskSwitchContext+0xf4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3334      	adds	r3, #52	; 0x34
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f7fd fc79 	bl	800072c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <vTaskSwitchContext+0xf8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	f1c3 031f 	rsb	r3, r3, #31
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	491e      	ldr	r1, [pc, #120]	; (8002ecc <vTaskSwitchContext+0xfc>)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <vTaskSwitchContext+0xaa>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	607b      	str	r3, [r7, #4]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <vTaskSwitchContext+0xa8>
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <vTaskSwitchContext+0xfc>)
 8002e86:	4413      	add	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d104      	bne.n	8002eaa <vTaskSwitchContext+0xda>
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <vTaskSwitchContext+0xf4>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000468 	.word	0x20000468
 8002ec0:	20000454 	.word	0x20000454
 8002ec4:	20000340 	.word	0x20000340
 8002ec8:	20000448 	.word	0x20000448
 8002ecc:	20000344 	.word	0x20000344

08002ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ed8:	f000 f852 	bl	8002f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <prvIdleTask+0x28>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d9f9      	bls.n	8002ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <prvIdleTask+0x2c>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ef4:	e7f0      	b.n	8002ed8 <prvIdleTask+0x8>
 8002ef6:	bf00      	nop
 8002ef8:	20000344 	.word	0x20000344
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	e00c      	b.n	8002f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <prvInitialiseTaskLists+0x60>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fb03 	bl	8002526 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3301      	adds	r3, #1
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b06      	cmp	r3, #6
 8002f2a:	d9ef      	bls.n	8002f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f2c:	480d      	ldr	r0, [pc, #52]	; (8002f64 <prvInitialiseTaskLists+0x64>)
 8002f2e:	f7ff fafa 	bl	8002526 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f32:	480d      	ldr	r0, [pc, #52]	; (8002f68 <prvInitialiseTaskLists+0x68>)
 8002f34:	f7ff faf7 	bl	8002526 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f38:	480c      	ldr	r0, [pc, #48]	; (8002f6c <prvInitialiseTaskLists+0x6c>)
 8002f3a:	f7ff faf4 	bl	8002526 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f3e:	480c      	ldr	r0, [pc, #48]	; (8002f70 <prvInitialiseTaskLists+0x70>)
 8002f40:	f7ff faf1 	bl	8002526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f44:	480b      	ldr	r0, [pc, #44]	; (8002f74 <prvInitialiseTaskLists+0x74>)
 8002f46:	f7ff faee 	bl	8002526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <prvInitialiseTaskLists+0x78>)
 8002f4c:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <prvInitialiseTaskLists+0x64>)
 8002f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <prvInitialiseTaskLists+0x7c>)
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <prvInitialiseTaskLists+0x68>)
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000344 	.word	0x20000344
 8002f64:	200003d0 	.word	0x200003d0
 8002f68:	200003e4 	.word	0x200003e4
 8002f6c:	20000400 	.word	0x20000400
 8002f70:	20000414 	.word	0x20000414
 8002f74:	2000042c 	.word	0x2000042c
 8002f78:	200003f8 	.word	0x200003f8
 8002f7c:	200003fc 	.word	0x200003fc

08002f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f86:	e019      	b.n	8002fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f88:	f000 fa64 	bl	8003454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <prvCheckTasksWaitingTermination+0x50>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fb4e 	bl	800263a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <prvCheckTasksWaitingTermination+0x54>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <prvCheckTasksWaitingTermination+0x54>)
 8002fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <prvCheckTasksWaitingTermination+0x58>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <prvCheckTasksWaitingTermination+0x58>)
 8002fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fb2:	f000 fa7f 	bl	80034b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f848 	bl	800304c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <prvCheckTasksWaitingTermination+0x58>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e1      	bne.n	8002f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000414 	.word	0x20000414
 8002fd4:	20000440 	.word	0x20000440
 8002fd8:	20000428 	.word	0x20000428

08002fdc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002fe8:	e005      	b.n	8002ff6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3301      	adds	r3, #1
 8002fee:	607b      	str	r3, [r7, #4]
			ulCount++;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2ba5      	cmp	r3, #165	; 0xa5
 8002ffc:	d0f5      	beq.n	8002fea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	b29b      	uxth	r3, r3
	}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <uxTaskGetStackHighWaterMark+0x14>
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <uxTaskGetStackHighWaterMark+0x34>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e000      	b.n	800302a <uxTaskGetStackHighWaterMark+0x16>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003032:	6938      	ldr	r0, [r7, #16]
 8003034:	f7ff ffd2 	bl	8002fdc <prvTaskCheckFreeStackSpace>
 8003038:	4603      	mov	r3, r0
 800303a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800303c:	68fb      	ldr	r3, [r7, #12]
	}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000340 	.word	0x20000340

0800304c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fba4 	bl	80037b0 <vPortFree>
				vPortFree( pxTCB );
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fba1 	bl	80037b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800306e:	e018      	b.n	80030a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003076:	2b01      	cmp	r3, #1
 8003078:	d103      	bne.n	8003082 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fb98 	bl	80037b0 <vPortFree>
	}
 8003080:	e00f      	b.n	80030a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003088:	2b02      	cmp	r3, #2
 800308a:	d00a      	beq.n	80030a2 <prvDeleteTCB+0x56>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	60fb      	str	r3, [r7, #12]
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <prvDeleteTCB+0x54>
	}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <prvResetNextTaskUnblockTime+0x38>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <prvResetNextTaskUnblockTime+0x3c>)
 80030be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030c4:	e008      	b.n	80030d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <prvResetNextTaskUnblockTime+0x38>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <prvResetNextTaskUnblockTime+0x3c>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	200003f8 	.word	0x200003f8
 80030e8:	20000460 	.word	0x20000460

080030ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <xTaskGetSchedulerState+0x34>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030fa:	2301      	movs	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	e008      	b.n	8003112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <xTaskGetSchedulerState+0x38>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003108:	2302      	movs	r3, #2
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	e001      	b.n	8003112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003112:	687b      	ldr	r3, [r7, #4]
	}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	2000044c 	.word	0x2000044c
 8003124:	20000468 	.word	0x20000468

08003128 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fa7b 	bl	800263a <uxListRemove>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2201      	movs	r2, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4013      	ands	r3, r2
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003160:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003168:	d10a      	bne.n	8003180 <prvAddCurrentTaskToDelayedList+0x58>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	481a      	ldr	r0, [pc, #104]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800317a:	f7ff fa01 	bl	8002580 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800317e:	e026      	b.n	80031ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d209      	bcs.n	80031ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4619      	mov	r1, r3
 80031a4:	4610      	mov	r0, r2
 80031a6:	f7ff fa0f 	bl	80025c8 <vListInsert>
}
 80031aa:	e010      	b.n	80031ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f7ff fa05 	bl	80025c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d202      	bcs.n	80031ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80031c8:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000444 	.word	0x20000444
 80031dc:	20000340 	.word	0x20000340
 80031e0:	20000448 	.word	0x20000448
 80031e4:	2000042c 	.word	0x2000042c
 80031e8:	200003fc 	.word	0x200003fc
 80031ec:	200003f8 	.word	0x200003f8
 80031f0:	20000460 	.word	0x20000460

080031f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b04      	subs	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800320c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b04      	subs	r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0201 	bic.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b04      	subs	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <pxPortInitialiseStack+0x64>)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3b14      	subs	r3, #20
 800322e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b04      	subs	r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f06f 0202 	mvn.w	r2, #2
 8003242:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b20      	subs	r3, #32
 8003248:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	0800325d 	.word	0x0800325d

0800325c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <prvTaskExitError+0x54>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800326e:	d00a      	beq.n	8003286 <prvTaskExitError+0x2a>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	60fb      	str	r3, [r7, #12]
}
 8003282:	bf00      	nop
 8003284:	e7fe      	b.n	8003284 <prvTaskExitError+0x28>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	60bb      	str	r3, [r7, #8]
}
 8003298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800329a:	bf00      	nop
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0fc      	beq.n	800329c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	2000000c 	.word	0x2000000c
	...

080032c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <pxCurrentTCBConst2>)
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	6808      	ldr	r0, [r1, #0]
 80032c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ca:	f380 8809 	msr	PSP, r0
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f04f 0000 	mov.w	r0, #0
 80032d6:	f380 8811 	msr	BASEPRI, r0
 80032da:	4770      	bx	lr
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst2>:
 80032e0:	20000340 	.word	0x20000340
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032e8:	4808      	ldr	r0, [pc, #32]	; (800330c <prvPortStartFirstTask+0x24>)
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	6800      	ldr	r0, [r0, #0]
 80032ee:	f380 8808 	msr	MSP, r0
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f380 8814 	msr	CONTROL, r0
 80032fa:	b662      	cpsie	i
 80032fc:	b661      	cpsie	f
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	df00      	svc	0
 8003308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800330a:	bf00      	nop
 800330c:	e000ed08 	.word	0xe000ed08

08003310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003316:	4b46      	ldr	r3, [pc, #280]	; (8003430 <xPortStartScheduler+0x120>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a46      	ldr	r2, [pc, #280]	; (8003434 <xPortStartScheduler+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10a      	bne.n	8003336 <xPortStartScheduler+0x26>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	613b      	str	r3, [r7, #16]
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003336:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <xPortStartScheduler+0x120>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <xPortStartScheduler+0x128>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10a      	bne.n	8003356 <xPortStartScheduler+0x46>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	60fb      	str	r3, [r7, #12]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003356:	4b39      	ldr	r3, [pc, #228]	; (800343c <xPortStartScheduler+0x12c>)
 8003358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	22ff      	movs	r2, #255	; 0xff
 8003366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <xPortStartScheduler+0x130>)
 800337c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <xPortStartScheduler+0x134>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003384:	e009      	b.n	800339a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <xPortStartScheduler+0x134>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3b01      	subs	r3, #1
 800338c:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <xPortStartScheduler+0x134>)
 800338e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d0ef      	beq.n	8003386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033a6:	4b27      	ldr	r3, [pc, #156]	; (8003444 <xPortStartScheduler+0x134>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d00a      	beq.n	80033c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	60bb      	str	r3, [r7, #8]
}
 80033c4:	bf00      	nop
 80033c6:	e7fe      	b.n	80033c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033c8:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <xPortStartScheduler+0x134>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <xPortStartScheduler+0x134>)
 80033d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <xPortStartScheduler+0x134>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033da:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <xPortStartScheduler+0x134>)
 80033dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <xPortStartScheduler+0x138>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <xPortStartScheduler+0x138>)
 80033ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <xPortStartScheduler+0x138>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a14      	ldr	r2, [pc, #80]	; (8003448 <xPortStartScheduler+0x138>)
 80033f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033fe:	f000 f8dd 	bl	80035bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <xPortStartScheduler+0x13c>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003408:	f000 f8fc 	bl	8003604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800340c:	4b10      	ldr	r3, [pc, #64]	; (8003450 <xPortStartScheduler+0x140>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <xPortStartScheduler+0x140>)
 8003412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003418:	f7ff ff66 	bl	80032e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800341c:	f7ff fcd8 	bl	8002dd0 <vTaskSwitchContext>
	prvTaskExitError();
 8003420:	f7ff ff1c 	bl	800325c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00
 8003434:	410fc271 	.word	0x410fc271
 8003438:	410fc270 	.word	0x410fc270
 800343c:	e000e400 	.word	0xe000e400
 8003440:	2000046c 	.word	0x2000046c
 8003444:	20000470 	.word	0x20000470
 8003448:	e000ed20 	.word	0xe000ed20
 800344c:	2000000c 	.word	0x2000000c
 8003450:	e000ef34 	.word	0xe000ef34

08003454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	607b      	str	r3, [r7, #4]
}
 800346c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <vPortEnterCritical+0x58>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <vPortEnterCritical+0x58>)
 8003476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <vPortEnterCritical+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10f      	bne.n	80034a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <vPortEnterCritical+0x5c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	603b      	str	r3, [r7, #0]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vPortEnterCritical+0x4a>
	}
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	2000000c 	.word	0x2000000c
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <vPortExitCritical+0x50>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <vPortExitCritical+0x24>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	607b      	str	r3, [r7, #4]
}
 80034d4:	bf00      	nop
 80034d6:	e7fe      	b.n	80034d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <vPortExitCritical+0x50>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <vPortExitCritical+0x50>)
 80034e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <vPortExitCritical+0x50>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <vPortExitCritical+0x42>
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	2000000c 	.word	0x2000000c
	...

08003510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003510:	f3ef 8009 	mrs	r0, PSP
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <pxCurrentTCBConst>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	f01e 0f10 	tst.w	lr, #16
 8003520:	bf08      	it	eq
 8003522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352a:	6010      	str	r0, [r2, #0]
 800352c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003534:	f380 8811 	msr	BASEPRI, r0
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f7ff fc46 	bl	8002dd0 <vTaskSwitchContext>
 8003544:	f04f 0000 	mov.w	r0, #0
 8003548:	f380 8811 	msr	BASEPRI, r0
 800354c:	bc09      	pop	{r0, r3}
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	6808      	ldr	r0, [r1, #0]
 8003552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003556:	f01e 0f10 	tst.w	lr, #16
 800355a:	bf08      	it	eq
 800355c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003560:	f380 8809 	msr	PSP, r0
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	f3af 8000 	nop.w

08003570 <pxCurrentTCBConst>:
 8003570:	20000340 	.word	0x20000340
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop

08003578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	607b      	str	r3, [r7, #4]
}
 8003590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003592:	f7ff fb65 	bl	8002c60 <xTaskIncrementTick>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <xPortSysTickHandler+0x40>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	2300      	movs	r3, #0
 80035a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f383 8811 	msr	BASEPRI, r3
}
 80035ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <vPortSetupTimerInterrupt+0x34>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <vPortSetupTimerInterrupt+0x38>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <vPortSetupTimerInterrupt+0x3c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <vPortSetupTimerInterrupt+0x40>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	4a09      	ldr	r2, [pc, #36]	; (8003600 <vPortSetupTimerInterrupt+0x44>)
 80035da:	3b01      	subs	r3, #1
 80035dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <vPortSetupTimerInterrupt+0x34>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000e010 	.word	0xe000e010
 80035f4:	e000e018 	.word	0xe000e018
 80035f8:	20000000 	.word	0x20000000
 80035fc:	10624dd3 	.word	0x10624dd3
 8003600:	e000e014 	.word	0xe000e014

08003604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003614 <vPortEnableVFP+0x10>
 8003608:	6801      	ldr	r1, [r0, #0]
 800360a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800360e:	6001      	str	r1, [r0, #0]
 8003610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003612:	bf00      	nop
 8003614:	e000ed88 	.word	0xe000ed88

08003618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003624:	f7ff fa62 	bl	8002aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <pvPortMalloc+0x180>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003630:	f000 f920 	bl	8003874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <pvPortMalloc+0x184>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 8093 	bne.w	8003768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01d      	beq.n	8003684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003648:	2208      	movs	r2, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f023 0307 	bic.w	r3, r3, #7
 8003660:	3308      	adds	r3, #8
 8003662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <pvPortMalloc+0x6c>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	617b      	str	r3, [r7, #20]
}
 8003680:	bf00      	nop
 8003682:	e7fe      	b.n	8003682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d06e      	beq.n	8003768 <pvPortMalloc+0x150>
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <pvPortMalloc+0x188>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d869      	bhi.n	8003768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003694:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <pvPortMalloc+0x18c>)
 8003696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <pvPortMalloc+0x18c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369e:	e004      	b.n	80036aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d903      	bls.n	80036bc <pvPortMalloc+0xa4>
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f1      	bne.n	80036a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <pvPortMalloc+0x180>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d050      	beq.n	8003768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2208      	movs	r2, #8
 80036cc:	4413      	add	r3, r2
 80036ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	1ad2      	subs	r2, r2, r3
 80036e0:	2308      	movs	r3, #8
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d91f      	bls.n	8003728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <pvPortMalloc+0xf8>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	613b      	str	r3, [r7, #16]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003722:	69b8      	ldr	r0, [r7, #24]
 8003724:	f000 f908 	bl	8003938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <pvPortMalloc+0x188>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <pvPortMalloc+0x188>)
 8003734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <pvPortMalloc+0x188>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <pvPortMalloc+0x190>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d203      	bcs.n	800374a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <pvPortMalloc+0x188>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <pvPortMalloc+0x190>)
 8003748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <pvPortMalloc+0x184>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	431a      	orrs	r2, r3
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <pvPortMalloc+0x194>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	4a11      	ldr	r2, [pc, #68]	; (80037ac <pvPortMalloc+0x194>)
 8003766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003768:	f7ff f9ce 	bl	8002b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <pvPortMalloc+0x174>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	60fb      	str	r3, [r7, #12]
}
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <pvPortMalloc+0x172>
	return pvReturn;
 800378c:	69fb      	ldr	r3, [r7, #28]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000407c 	.word	0x2000407c
 800379c:	20004090 	.word	0x20004090
 80037a0:	20004080 	.word	0x20004080
 80037a4:	20004074 	.word	0x20004074
 80037a8:	20004084 	.word	0x20004084
 80037ac:	20004088 	.word	0x20004088

080037b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04d      	beq.n	800385e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037c2:	2308      	movs	r3, #8
 80037c4:	425b      	negs	r3, r3
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4413      	add	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <vPortFree+0xb8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <vPortFree+0x44>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	60fb      	str	r3, [r7, #12]
}
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <vPortFree+0x62>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	60bb      	str	r3, [r7, #8]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <vPortFree+0xb8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01e      	beq.n	800385e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11a      	bne.n	800385e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <vPortFree+0xb8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003838:	f7ff f958 	bl	8002aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <vPortFree+0xbc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4413      	add	r3, r2
 8003846:	4a09      	ldr	r2, [pc, #36]	; (800386c <vPortFree+0xbc>)
 8003848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800384a:	6938      	ldr	r0, [r7, #16]
 800384c:	f000 f874 	bl	8003938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <vPortFree+0xc0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a06      	ldr	r2, [pc, #24]	; (8003870 <vPortFree+0xc0>)
 8003858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800385a:	f7ff f955 	bl	8002b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20004090 	.word	0x20004090
 800386c:	20004080 	.word	0x20004080
 8003870:	2000408c 	.word	0x2000408c

08003874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800387a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800387e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <prvHeapInit+0xac>)
 8003882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3307      	adds	r3, #7
 8003892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0307 	bic.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <prvHeapInit+0xac>)
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <prvHeapInit+0xb0>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <prvHeapInit+0xb0>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038c0:	2208      	movs	r2, #8
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <prvHeapInit+0xb4>)
 80038d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <prvHeapInit+0xb4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2200      	movs	r2, #0
 80038dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <prvHeapInit+0xb4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	1ad2      	subs	r2, r2, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <prvHeapInit+0xb4>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <prvHeapInit+0xb8>)
 8003902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <prvHeapInit+0xbc>)
 800390a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <prvHeapInit+0xc0>)
 800390e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	20000474 	.word	0x20000474
 8003924:	20004074 	.word	0x20004074
 8003928:	2000407c 	.word	0x2000407c
 800392c:	20004084 	.word	0x20004084
 8003930:	20004080 	.word	0x20004080
 8003934:	20004090 	.word	0x20004090

08003938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003940:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <prvInsertBlockIntoFreeList+0xac>)
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e002      	b.n	800394c <prvInsertBlockIntoFreeList+0x14>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d8f7      	bhi.n	8003946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4413      	add	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d108      	bne.n	800397a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	441a      	add	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	441a      	add	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d118      	bne.n	80039c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <prvInsertBlockIntoFreeList+0xb0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d00d      	beq.n	80039b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e008      	b.n	80039c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <prvInsertBlockIntoFreeList+0xb0>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e003      	b.n	80039c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d002      	beq.n	80039d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20004074 	.word	0x20004074
 80039e8:	2000407c 	.word	0x2000407c

080039ec <__errno>:
 80039ec:	4b01      	ldr	r3, [pc, #4]	; (80039f4 <__errno+0x8>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000010 	.word	0x20000010

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	4d0d      	ldr	r5, [pc, #52]	; (8003a30 <__libc_init_array+0x38>)
 80039fc:	4c0d      	ldr	r4, [pc, #52]	; (8003a34 <__libc_init_array+0x3c>)
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	10a4      	asrs	r4, r4, #2
 8003a02:	2600      	movs	r6, #0
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	4d0b      	ldr	r5, [pc, #44]	; (8003a38 <__libc_init_array+0x40>)
 8003a0a:	4c0c      	ldr	r4, [pc, #48]	; (8003a3c <__libc_init_array+0x44>)
 8003a0c:	f000 fc8e 	bl	800432c <_init>
 8003a10:	1b64      	subs	r4, r4, r5
 8003a12:	10a4      	asrs	r4, r4, #2
 8003a14:	2600      	movs	r6, #0
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	08004454 	.word	0x08004454
 8003a34:	08004454 	.word	0x08004454
 8003a38:	08004454 	.word	0x08004454
 8003a3c:	08004458 	.word	0x08004458

08003a40 <memcpy>:
 8003a40:	440a      	add	r2, r1
 8003a42:	4291      	cmp	r1, r2
 8003a44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a48:	d100      	bne.n	8003a4c <memcpy+0xc>
 8003a4a:	4770      	bx	lr
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a56:	4291      	cmp	r1, r2
 8003a58:	d1f9      	bne.n	8003a4e <memcpy+0xe>
 8003a5a:	bd10      	pop	{r4, pc}

08003a5c <memset>:
 8003a5c:	4402      	add	r2, r0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d100      	bne.n	8003a66 <memset+0xa>
 8003a64:	4770      	bx	lr
 8003a66:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6a:	e7f9      	b.n	8003a60 <memset+0x4>

08003a6c <siprintf>:
 8003a6c:	b40e      	push	{r1, r2, r3}
 8003a6e:	b500      	push	{lr}
 8003a70:	b09c      	sub	sp, #112	; 0x70
 8003a72:	ab1d      	add	r3, sp, #116	; 0x74
 8003a74:	9002      	str	r0, [sp, #8]
 8003a76:	9006      	str	r0, [sp, #24]
 8003a78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a7c:	4809      	ldr	r0, [pc, #36]	; (8003aa4 <siprintf+0x38>)
 8003a7e:	9107      	str	r1, [sp, #28]
 8003a80:	9104      	str	r1, [sp, #16]
 8003a82:	4909      	ldr	r1, [pc, #36]	; (8003aa8 <siprintf+0x3c>)
 8003a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a88:	9105      	str	r1, [sp, #20]
 8003a8a:	6800      	ldr	r0, [r0, #0]
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	a902      	add	r1, sp, #8
 8003a90:	f000 f868 	bl	8003b64 <_svfiprintf_r>
 8003a94:	9b02      	ldr	r3, [sp, #8]
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	b01c      	add	sp, #112	; 0x70
 8003a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aa0:	b003      	add	sp, #12
 8003aa2:	4770      	bx	lr
 8003aa4:	20000010 	.word	0x20000010
 8003aa8:	ffff0208 	.word	0xffff0208

08003aac <__ssputs_r>:
 8003aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab0:	688e      	ldr	r6, [r1, #8]
 8003ab2:	429e      	cmp	r6, r3
 8003ab4:	4682      	mov	sl, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4690      	mov	r8, r2
 8003aba:	461f      	mov	r7, r3
 8003abc:	d838      	bhi.n	8003b30 <__ssputs_r+0x84>
 8003abe:	898a      	ldrh	r2, [r1, #12]
 8003ac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ac4:	d032      	beq.n	8003b2c <__ssputs_r+0x80>
 8003ac6:	6825      	ldr	r5, [r4, #0]
 8003ac8:	6909      	ldr	r1, [r1, #16]
 8003aca:	eba5 0901 	sub.w	r9, r5, r1
 8003ace:	6965      	ldr	r5, [r4, #20]
 8003ad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ad8:	3301      	adds	r3, #1
 8003ada:	444b      	add	r3, r9
 8003adc:	106d      	asrs	r5, r5, #1
 8003ade:	429d      	cmp	r5, r3
 8003ae0:	bf38      	it	cc
 8003ae2:	461d      	movcc	r5, r3
 8003ae4:	0553      	lsls	r3, r2, #21
 8003ae6:	d531      	bpl.n	8003b4c <__ssputs_r+0xa0>
 8003ae8:	4629      	mov	r1, r5
 8003aea:	f000 fb55 	bl	8004198 <_malloc_r>
 8003aee:	4606      	mov	r6, r0
 8003af0:	b950      	cbnz	r0, 8003b08 <__ssputs_r+0x5c>
 8003af2:	230c      	movs	r3, #12
 8003af4:	f8ca 3000 	str.w	r3, [sl]
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afe:	81a3      	strh	r3, [r4, #12]
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b08:	6921      	ldr	r1, [r4, #16]
 8003b0a:	464a      	mov	r2, r9
 8003b0c:	f7ff ff98 	bl	8003a40 <memcpy>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	6126      	str	r6, [r4, #16]
 8003b1e:	6165      	str	r5, [r4, #20]
 8003b20:	444e      	add	r6, r9
 8003b22:	eba5 0509 	sub.w	r5, r5, r9
 8003b26:	6026      	str	r6, [r4, #0]
 8003b28:	60a5      	str	r5, [r4, #8]
 8003b2a:	463e      	mov	r6, r7
 8003b2c:	42be      	cmp	r6, r7
 8003b2e:	d900      	bls.n	8003b32 <__ssputs_r+0x86>
 8003b30:	463e      	mov	r6, r7
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	4632      	mov	r2, r6
 8003b36:	4641      	mov	r1, r8
 8003b38:	f000 faa8 	bl	800408c <memmove>
 8003b3c:	68a3      	ldr	r3, [r4, #8]
 8003b3e:	1b9b      	subs	r3, r3, r6
 8003b40:	60a3      	str	r3, [r4, #8]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	4433      	add	r3, r6
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	2000      	movs	r0, #0
 8003b4a:	e7db      	b.n	8003b04 <__ssputs_r+0x58>
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	f000 fb97 	bl	8004280 <_realloc_r>
 8003b52:	4606      	mov	r6, r0
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d1e1      	bne.n	8003b1c <__ssputs_r+0x70>
 8003b58:	6921      	ldr	r1, [r4, #16]
 8003b5a:	4650      	mov	r0, sl
 8003b5c:	f000 fab0 	bl	80040c0 <_free_r>
 8003b60:	e7c7      	b.n	8003af2 <__ssputs_r+0x46>
	...

08003b64 <_svfiprintf_r>:
 8003b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b68:	4698      	mov	r8, r3
 8003b6a:	898b      	ldrh	r3, [r1, #12]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	b09d      	sub	sp, #116	; 0x74
 8003b70:	4607      	mov	r7, r0
 8003b72:	460d      	mov	r5, r1
 8003b74:	4614      	mov	r4, r2
 8003b76:	d50e      	bpl.n	8003b96 <_svfiprintf_r+0x32>
 8003b78:	690b      	ldr	r3, [r1, #16]
 8003b7a:	b963      	cbnz	r3, 8003b96 <_svfiprintf_r+0x32>
 8003b7c:	2140      	movs	r1, #64	; 0x40
 8003b7e:	f000 fb0b 	bl	8004198 <_malloc_r>
 8003b82:	6028      	str	r0, [r5, #0]
 8003b84:	6128      	str	r0, [r5, #16]
 8003b86:	b920      	cbnz	r0, 8003b92 <_svfiprintf_r+0x2e>
 8003b88:	230c      	movs	r3, #12
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b90:	e0d1      	b.n	8003d36 <_svfiprintf_r+0x1d2>
 8003b92:	2340      	movs	r3, #64	; 0x40
 8003b94:	616b      	str	r3, [r5, #20]
 8003b96:	2300      	movs	r3, #0
 8003b98:	9309      	str	r3, [sp, #36]	; 0x24
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ba4:	2330      	movs	r3, #48	; 0x30
 8003ba6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d50 <_svfiprintf_r+0x1ec>
 8003baa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bae:	f04f 0901 	mov.w	r9, #1
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	469a      	mov	sl, r3
 8003bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bba:	b10a      	cbz	r2, 8003bc0 <_svfiprintf_r+0x5c>
 8003bbc:	2a25      	cmp	r2, #37	; 0x25
 8003bbe:	d1f9      	bne.n	8003bb4 <_svfiprintf_r+0x50>
 8003bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8003bc4:	d00b      	beq.n	8003bde <_svfiprintf_r+0x7a>
 8003bc6:	465b      	mov	r3, fp
 8003bc8:	4622      	mov	r2, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	4638      	mov	r0, r7
 8003bce:	f7ff ff6d 	bl	8003aac <__ssputs_r>
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	f000 80aa 	beq.w	8003d2c <_svfiprintf_r+0x1c8>
 8003bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bda:	445a      	add	r2, fp
 8003bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8003bde:	f89a 3000 	ldrb.w	r3, [sl]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80a2 	beq.w	8003d2c <_svfiprintf_r+0x1c8>
 8003be8:	2300      	movs	r3, #0
 8003bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bf2:	f10a 0a01 	add.w	sl, sl, #1
 8003bf6:	9304      	str	r3, [sp, #16]
 8003bf8:	9307      	str	r3, [sp, #28]
 8003bfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bfe:	931a      	str	r3, [sp, #104]	; 0x68
 8003c00:	4654      	mov	r4, sl
 8003c02:	2205      	movs	r2, #5
 8003c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c08:	4851      	ldr	r0, [pc, #324]	; (8003d50 <_svfiprintf_r+0x1ec>)
 8003c0a:	f7fc faf9 	bl	8000200 <memchr>
 8003c0e:	9a04      	ldr	r2, [sp, #16]
 8003c10:	b9d8      	cbnz	r0, 8003c4a <_svfiprintf_r+0xe6>
 8003c12:	06d0      	lsls	r0, r2, #27
 8003c14:	bf44      	itt	mi
 8003c16:	2320      	movmi	r3, #32
 8003c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1c:	0711      	lsls	r1, r2, #28
 8003c1e:	bf44      	itt	mi
 8003c20:	232b      	movmi	r3, #43	; 0x2b
 8003c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c26:	f89a 3000 	ldrb.w	r3, [sl]
 8003c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2c:	d015      	beq.n	8003c5a <_svfiprintf_r+0xf6>
 8003c2e:	9a07      	ldr	r2, [sp, #28]
 8003c30:	4654      	mov	r4, sl
 8003c32:	2000      	movs	r0, #0
 8003c34:	f04f 0c0a 	mov.w	ip, #10
 8003c38:	4621      	mov	r1, r4
 8003c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c3e:	3b30      	subs	r3, #48	; 0x30
 8003c40:	2b09      	cmp	r3, #9
 8003c42:	d94e      	bls.n	8003ce2 <_svfiprintf_r+0x17e>
 8003c44:	b1b0      	cbz	r0, 8003c74 <_svfiprintf_r+0x110>
 8003c46:	9207      	str	r2, [sp, #28]
 8003c48:	e014      	b.n	8003c74 <_svfiprintf_r+0x110>
 8003c4a:	eba0 0308 	sub.w	r3, r0, r8
 8003c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	9304      	str	r3, [sp, #16]
 8003c56:	46a2      	mov	sl, r4
 8003c58:	e7d2      	b.n	8003c00 <_svfiprintf_r+0x9c>
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	1d19      	adds	r1, r3, #4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	9103      	str	r1, [sp, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bfbb      	ittet	lt
 8003c66:	425b      	neglt	r3, r3
 8003c68:	f042 0202 	orrlt.w	r2, r2, #2
 8003c6c:	9307      	strge	r3, [sp, #28]
 8003c6e:	9307      	strlt	r3, [sp, #28]
 8003c70:	bfb8      	it	lt
 8003c72:	9204      	strlt	r2, [sp, #16]
 8003c74:	7823      	ldrb	r3, [r4, #0]
 8003c76:	2b2e      	cmp	r3, #46	; 0x2e
 8003c78:	d10c      	bne.n	8003c94 <_svfiprintf_r+0x130>
 8003c7a:	7863      	ldrb	r3, [r4, #1]
 8003c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7e:	d135      	bne.n	8003cec <_svfiprintf_r+0x188>
 8003c80:	9b03      	ldr	r3, [sp, #12]
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	9203      	str	r2, [sp, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bfb8      	it	lt
 8003c8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c90:	3402      	adds	r4, #2
 8003c92:	9305      	str	r3, [sp, #20]
 8003c94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d60 <_svfiprintf_r+0x1fc>
 8003c98:	7821      	ldrb	r1, [r4, #0]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	4650      	mov	r0, sl
 8003c9e:	f7fc faaf 	bl	8000200 <memchr>
 8003ca2:	b140      	cbz	r0, 8003cb6 <_svfiprintf_r+0x152>
 8003ca4:	2340      	movs	r3, #64	; 0x40
 8003ca6:	eba0 000a 	sub.w	r0, r0, sl
 8003caa:	fa03 f000 	lsl.w	r0, r3, r0
 8003cae:	9b04      	ldr	r3, [sp, #16]
 8003cb0:	4303      	orrs	r3, r0
 8003cb2:	3401      	adds	r4, #1
 8003cb4:	9304      	str	r3, [sp, #16]
 8003cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cba:	4826      	ldr	r0, [pc, #152]	; (8003d54 <_svfiprintf_r+0x1f0>)
 8003cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cc0:	2206      	movs	r2, #6
 8003cc2:	f7fc fa9d 	bl	8000200 <memchr>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d038      	beq.n	8003d3c <_svfiprintf_r+0x1d8>
 8003cca:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <_svfiprintf_r+0x1f4>)
 8003ccc:	bb1b      	cbnz	r3, 8003d16 <_svfiprintf_r+0x1b2>
 8003cce:	9b03      	ldr	r3, [sp, #12]
 8003cd0:	3307      	adds	r3, #7
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	9303      	str	r3, [sp, #12]
 8003cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cdc:	4433      	add	r3, r6
 8003cde:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce0:	e767      	b.n	8003bb2 <_svfiprintf_r+0x4e>
 8003ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	2001      	movs	r0, #1
 8003cea:	e7a5      	b.n	8003c38 <_svfiprintf_r+0xd4>
 8003cec:	2300      	movs	r3, #0
 8003cee:	3401      	adds	r4, #1
 8003cf0:	9305      	str	r3, [sp, #20]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f04f 0c0a 	mov.w	ip, #10
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cfe:	3a30      	subs	r2, #48	; 0x30
 8003d00:	2a09      	cmp	r2, #9
 8003d02:	d903      	bls.n	8003d0c <_svfiprintf_r+0x1a8>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0c5      	beq.n	8003c94 <_svfiprintf_r+0x130>
 8003d08:	9105      	str	r1, [sp, #20]
 8003d0a:	e7c3      	b.n	8003c94 <_svfiprintf_r+0x130>
 8003d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d10:	4604      	mov	r4, r0
 8003d12:	2301      	movs	r3, #1
 8003d14:	e7f0      	b.n	8003cf8 <_svfiprintf_r+0x194>
 8003d16:	ab03      	add	r3, sp, #12
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <_svfiprintf_r+0x1f8>)
 8003d1e:	a904      	add	r1, sp, #16
 8003d20:	4638      	mov	r0, r7
 8003d22:	f3af 8000 	nop.w
 8003d26:	1c42      	adds	r2, r0, #1
 8003d28:	4606      	mov	r6, r0
 8003d2a:	d1d6      	bne.n	8003cda <_svfiprintf_r+0x176>
 8003d2c:	89ab      	ldrh	r3, [r5, #12]
 8003d2e:	065b      	lsls	r3, r3, #25
 8003d30:	f53f af2c 	bmi.w	8003b8c <_svfiprintf_r+0x28>
 8003d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d36:	b01d      	add	sp, #116	; 0x74
 8003d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3c:	ab03      	add	r3, sp, #12
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	462a      	mov	r2, r5
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <_svfiprintf_r+0x1f8>)
 8003d44:	a904      	add	r1, sp, #16
 8003d46:	4638      	mov	r0, r7
 8003d48:	f000 f87a 	bl	8003e40 <_printf_i>
 8003d4c:	e7eb      	b.n	8003d26 <_svfiprintf_r+0x1c2>
 8003d4e:	bf00      	nop
 8003d50:	08004418 	.word	0x08004418
 8003d54:	08004422 	.word	0x08004422
 8003d58:	00000000 	.word	0x00000000
 8003d5c:	08003aad 	.word	0x08003aad
 8003d60:	0800441e 	.word	0x0800441e

08003d64 <_printf_common>:
 8003d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	4616      	mov	r6, r2
 8003d6a:	4699      	mov	r9, r3
 8003d6c:	688a      	ldr	r2, [r1, #8]
 8003d6e:	690b      	ldr	r3, [r1, #16]
 8003d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bfb8      	it	lt
 8003d78:	4613      	movlt	r3, r2
 8003d7a:	6033      	str	r3, [r6, #0]
 8003d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d80:	4607      	mov	r7, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	b10a      	cbz	r2, 8003d8a <_printf_common+0x26>
 8003d86:	3301      	adds	r3, #1
 8003d88:	6033      	str	r3, [r6, #0]
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	0699      	lsls	r1, r3, #26
 8003d8e:	bf42      	ittt	mi
 8003d90:	6833      	ldrmi	r3, [r6, #0]
 8003d92:	3302      	addmi	r3, #2
 8003d94:	6033      	strmi	r3, [r6, #0]
 8003d96:	6825      	ldr	r5, [r4, #0]
 8003d98:	f015 0506 	ands.w	r5, r5, #6
 8003d9c:	d106      	bne.n	8003dac <_printf_common+0x48>
 8003d9e:	f104 0a19 	add.w	sl, r4, #25
 8003da2:	68e3      	ldr	r3, [r4, #12]
 8003da4:	6832      	ldr	r2, [r6, #0]
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	42ab      	cmp	r3, r5
 8003daa:	dc26      	bgt.n	8003dfa <_printf_common+0x96>
 8003dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003db0:	1e13      	subs	r3, r2, #0
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	bf18      	it	ne
 8003db6:	2301      	movne	r3, #1
 8003db8:	0692      	lsls	r2, r2, #26
 8003dba:	d42b      	bmi.n	8003e14 <_printf_common+0xb0>
 8003dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	47c0      	blx	r8
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d01e      	beq.n	8003e08 <_printf_common+0xa4>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	68e5      	ldr	r5, [r4, #12]
 8003dce:	6832      	ldr	r2, [r6, #0]
 8003dd0:	f003 0306 	and.w	r3, r3, #6
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	bf08      	it	eq
 8003dd8:	1aad      	subeq	r5, r5, r2
 8003dda:	68a3      	ldr	r3, [r4, #8]
 8003ddc:	6922      	ldr	r2, [r4, #16]
 8003dde:	bf0c      	ite	eq
 8003de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003de4:	2500      	movne	r5, #0
 8003de6:	4293      	cmp	r3, r2
 8003de8:	bfc4      	itt	gt
 8003dea:	1a9b      	subgt	r3, r3, r2
 8003dec:	18ed      	addgt	r5, r5, r3
 8003dee:	2600      	movs	r6, #0
 8003df0:	341a      	adds	r4, #26
 8003df2:	42b5      	cmp	r5, r6
 8003df4:	d11a      	bne.n	8003e2c <_printf_common+0xc8>
 8003df6:	2000      	movs	r0, #0
 8003df8:	e008      	b.n	8003e0c <_printf_common+0xa8>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	4649      	mov	r1, r9
 8003e00:	4638      	mov	r0, r7
 8003e02:	47c0      	blx	r8
 8003e04:	3001      	adds	r0, #1
 8003e06:	d103      	bne.n	8003e10 <_printf_common+0xac>
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e10:	3501      	adds	r5, #1
 8003e12:	e7c6      	b.n	8003da2 <_printf_common+0x3e>
 8003e14:	18e1      	adds	r1, r4, r3
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	2030      	movs	r0, #48	; 0x30
 8003e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e1e:	4422      	add	r2, r4
 8003e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e28:	3302      	adds	r3, #2
 8003e2a:	e7c7      	b.n	8003dbc <_printf_common+0x58>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4622      	mov	r2, r4
 8003e30:	4649      	mov	r1, r9
 8003e32:	4638      	mov	r0, r7
 8003e34:	47c0      	blx	r8
 8003e36:	3001      	adds	r0, #1
 8003e38:	d0e6      	beq.n	8003e08 <_printf_common+0xa4>
 8003e3a:	3601      	adds	r6, #1
 8003e3c:	e7d9      	b.n	8003df2 <_printf_common+0x8e>
	...

08003e40 <_printf_i>:
 8003e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e44:	7e0f      	ldrb	r7, [r1, #24]
 8003e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e48:	2f78      	cmp	r7, #120	; 0x78
 8003e4a:	4691      	mov	r9, r2
 8003e4c:	4680      	mov	r8, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	469a      	mov	sl, r3
 8003e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e56:	d807      	bhi.n	8003e68 <_printf_i+0x28>
 8003e58:	2f62      	cmp	r7, #98	; 0x62
 8003e5a:	d80a      	bhi.n	8003e72 <_printf_i+0x32>
 8003e5c:	2f00      	cmp	r7, #0
 8003e5e:	f000 80d8 	beq.w	8004012 <_printf_i+0x1d2>
 8003e62:	2f58      	cmp	r7, #88	; 0x58
 8003e64:	f000 80a3 	beq.w	8003fae <_printf_i+0x16e>
 8003e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e70:	e03a      	b.n	8003ee8 <_printf_i+0xa8>
 8003e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e76:	2b15      	cmp	r3, #21
 8003e78:	d8f6      	bhi.n	8003e68 <_printf_i+0x28>
 8003e7a:	a101      	add	r1, pc, #4	; (adr r1, 8003e80 <_printf_i+0x40>)
 8003e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e80:	08003ed9 	.word	0x08003ed9
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003e69 	.word	0x08003e69
 8003e8c:	08003e69 	.word	0x08003e69
 8003e90:	08003e69 	.word	0x08003e69
 8003e94:	08003e69 	.word	0x08003e69
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003e69 	.word	0x08003e69
 8003ea0:	08003e69 	.word	0x08003e69
 8003ea4:	08003e69 	.word	0x08003e69
 8003ea8:	08003e69 	.word	0x08003e69
 8003eac:	08003ff9 	.word	0x08003ff9
 8003eb0:	08003f1d 	.word	0x08003f1d
 8003eb4:	08003fdb 	.word	0x08003fdb
 8003eb8:	08003e69 	.word	0x08003e69
 8003ebc:	08003e69 	.word	0x08003e69
 8003ec0:	0800401b 	.word	0x0800401b
 8003ec4:	08003e69 	.word	0x08003e69
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e69 	.word	0x08003e69
 8003ed0:	08003e69 	.word	0x08003e69
 8003ed4:	08003fe3 	.word	0x08003fe3
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	1d1a      	adds	r2, r3, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	602a      	str	r2, [r5, #0]
 8003ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0a3      	b.n	8004034 <_printf_i+0x1f4>
 8003eec:	6820      	ldr	r0, [r4, #0]
 8003eee:	6829      	ldr	r1, [r5, #0]
 8003ef0:	0606      	lsls	r6, r0, #24
 8003ef2:	f101 0304 	add.w	r3, r1, #4
 8003ef6:	d50a      	bpl.n	8003f0e <_printf_i+0xce>
 8003ef8:	680e      	ldr	r6, [r1, #0]
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	2e00      	cmp	r6, #0
 8003efe:	da03      	bge.n	8003f08 <_printf_i+0xc8>
 8003f00:	232d      	movs	r3, #45	; 0x2d
 8003f02:	4276      	negs	r6, r6
 8003f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f08:	485e      	ldr	r0, [pc, #376]	; (8004084 <_printf_i+0x244>)
 8003f0a:	230a      	movs	r3, #10
 8003f0c:	e019      	b.n	8003f42 <_printf_i+0x102>
 8003f0e:	680e      	ldr	r6, [r1, #0]
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f16:	bf18      	it	ne
 8003f18:	b236      	sxthne	r6, r6
 8003f1a:	e7ef      	b.n	8003efc <_printf_i+0xbc>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	1d19      	adds	r1, r3, #4
 8003f22:	6029      	str	r1, [r5, #0]
 8003f24:	0601      	lsls	r1, r0, #24
 8003f26:	d501      	bpl.n	8003f2c <_printf_i+0xec>
 8003f28:	681e      	ldr	r6, [r3, #0]
 8003f2a:	e002      	b.n	8003f32 <_printf_i+0xf2>
 8003f2c:	0646      	lsls	r6, r0, #25
 8003f2e:	d5fb      	bpl.n	8003f28 <_printf_i+0xe8>
 8003f30:	881e      	ldrh	r6, [r3, #0]
 8003f32:	4854      	ldr	r0, [pc, #336]	; (8004084 <_printf_i+0x244>)
 8003f34:	2f6f      	cmp	r7, #111	; 0x6f
 8003f36:	bf0c      	ite	eq
 8003f38:	2308      	moveq	r3, #8
 8003f3a:	230a      	movne	r3, #10
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f42:	6865      	ldr	r5, [r4, #4]
 8003f44:	60a5      	str	r5, [r4, #8]
 8003f46:	2d00      	cmp	r5, #0
 8003f48:	bfa2      	ittt	ge
 8003f4a:	6821      	ldrge	r1, [r4, #0]
 8003f4c:	f021 0104 	bicge.w	r1, r1, #4
 8003f50:	6021      	strge	r1, [r4, #0]
 8003f52:	b90e      	cbnz	r6, 8003f58 <_printf_i+0x118>
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	d04d      	beq.n	8003ff4 <_printf_i+0x1b4>
 8003f58:	4615      	mov	r5, r2
 8003f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8003f62:	5dc7      	ldrb	r7, [r0, r7]
 8003f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f68:	4637      	mov	r7, r6
 8003f6a:	42bb      	cmp	r3, r7
 8003f6c:	460e      	mov	r6, r1
 8003f6e:	d9f4      	bls.n	8003f5a <_printf_i+0x11a>
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d10b      	bne.n	8003f8c <_printf_i+0x14c>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	07de      	lsls	r6, r3, #31
 8003f78:	d508      	bpl.n	8003f8c <_printf_i+0x14c>
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	6861      	ldr	r1, [r4, #4]
 8003f7e:	4299      	cmp	r1, r3
 8003f80:	bfde      	ittt	le
 8003f82:	2330      	movle	r3, #48	; 0x30
 8003f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f8c:	1b52      	subs	r2, r2, r5
 8003f8e:	6122      	str	r2, [r4, #16]
 8003f90:	f8cd a000 	str.w	sl, [sp]
 8003f94:	464b      	mov	r3, r9
 8003f96:	aa03      	add	r2, sp, #12
 8003f98:	4621      	mov	r1, r4
 8003f9a:	4640      	mov	r0, r8
 8003f9c:	f7ff fee2 	bl	8003d64 <_printf_common>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d14c      	bne.n	800403e <_printf_i+0x1fe>
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa8:	b004      	add	sp, #16
 8003faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fae:	4835      	ldr	r0, [pc, #212]	; (8004084 <_printf_i+0x244>)
 8003fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fb4:	6829      	ldr	r1, [r5, #0]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fbc:	6029      	str	r1, [r5, #0]
 8003fbe:	061d      	lsls	r5, r3, #24
 8003fc0:	d514      	bpl.n	8003fec <_printf_i+0x1ac>
 8003fc2:	07df      	lsls	r7, r3, #31
 8003fc4:	bf44      	itt	mi
 8003fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8003fca:	6023      	strmi	r3, [r4, #0]
 8003fcc:	b91e      	cbnz	r6, 8003fd6 <_printf_i+0x196>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	f023 0320 	bic.w	r3, r3, #32
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	e7b0      	b.n	8003f3c <_printf_i+0xfc>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	f043 0320 	orr.w	r3, r3, #32
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	2378      	movs	r3, #120	; 0x78
 8003fe4:	4828      	ldr	r0, [pc, #160]	; (8004088 <_printf_i+0x248>)
 8003fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fea:	e7e3      	b.n	8003fb4 <_printf_i+0x174>
 8003fec:	0659      	lsls	r1, r3, #25
 8003fee:	bf48      	it	mi
 8003ff0:	b2b6      	uxthmi	r6, r6
 8003ff2:	e7e6      	b.n	8003fc2 <_printf_i+0x182>
 8003ff4:	4615      	mov	r5, r2
 8003ff6:	e7bb      	b.n	8003f70 <_printf_i+0x130>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	6826      	ldr	r6, [r4, #0]
 8003ffc:	6961      	ldr	r1, [r4, #20]
 8003ffe:	1d18      	adds	r0, r3, #4
 8004000:	6028      	str	r0, [r5, #0]
 8004002:	0635      	lsls	r5, r6, #24
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	d501      	bpl.n	800400c <_printf_i+0x1cc>
 8004008:	6019      	str	r1, [r3, #0]
 800400a:	e002      	b.n	8004012 <_printf_i+0x1d2>
 800400c:	0670      	lsls	r0, r6, #25
 800400e:	d5fb      	bpl.n	8004008 <_printf_i+0x1c8>
 8004010:	8019      	strh	r1, [r3, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	6123      	str	r3, [r4, #16]
 8004016:	4615      	mov	r5, r2
 8004018:	e7ba      	b.n	8003f90 <_printf_i+0x150>
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	602a      	str	r2, [r5, #0]
 8004020:	681d      	ldr	r5, [r3, #0]
 8004022:	6862      	ldr	r2, [r4, #4]
 8004024:	2100      	movs	r1, #0
 8004026:	4628      	mov	r0, r5
 8004028:	f7fc f8ea 	bl	8000200 <memchr>
 800402c:	b108      	cbz	r0, 8004032 <_printf_i+0x1f2>
 800402e:	1b40      	subs	r0, r0, r5
 8004030:	6060      	str	r0, [r4, #4]
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	2300      	movs	r3, #0
 8004038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403c:	e7a8      	b.n	8003f90 <_printf_i+0x150>
 800403e:	6923      	ldr	r3, [r4, #16]
 8004040:	462a      	mov	r2, r5
 8004042:	4649      	mov	r1, r9
 8004044:	4640      	mov	r0, r8
 8004046:	47d0      	blx	sl
 8004048:	3001      	adds	r0, #1
 800404a:	d0ab      	beq.n	8003fa4 <_printf_i+0x164>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	079b      	lsls	r3, r3, #30
 8004050:	d413      	bmi.n	800407a <_printf_i+0x23a>
 8004052:	68e0      	ldr	r0, [r4, #12]
 8004054:	9b03      	ldr	r3, [sp, #12]
 8004056:	4298      	cmp	r0, r3
 8004058:	bfb8      	it	lt
 800405a:	4618      	movlt	r0, r3
 800405c:	e7a4      	b.n	8003fa8 <_printf_i+0x168>
 800405e:	2301      	movs	r3, #1
 8004060:	4632      	mov	r2, r6
 8004062:	4649      	mov	r1, r9
 8004064:	4640      	mov	r0, r8
 8004066:	47d0      	blx	sl
 8004068:	3001      	adds	r0, #1
 800406a:	d09b      	beq.n	8003fa4 <_printf_i+0x164>
 800406c:	3501      	adds	r5, #1
 800406e:	68e3      	ldr	r3, [r4, #12]
 8004070:	9903      	ldr	r1, [sp, #12]
 8004072:	1a5b      	subs	r3, r3, r1
 8004074:	42ab      	cmp	r3, r5
 8004076:	dcf2      	bgt.n	800405e <_printf_i+0x21e>
 8004078:	e7eb      	b.n	8004052 <_printf_i+0x212>
 800407a:	2500      	movs	r5, #0
 800407c:	f104 0619 	add.w	r6, r4, #25
 8004080:	e7f5      	b.n	800406e <_printf_i+0x22e>
 8004082:	bf00      	nop
 8004084:	08004429 	.word	0x08004429
 8004088:	0800443a 	.word	0x0800443a

0800408c <memmove>:
 800408c:	4288      	cmp	r0, r1
 800408e:	b510      	push	{r4, lr}
 8004090:	eb01 0402 	add.w	r4, r1, r2
 8004094:	d902      	bls.n	800409c <memmove+0x10>
 8004096:	4284      	cmp	r4, r0
 8004098:	4623      	mov	r3, r4
 800409a:	d807      	bhi.n	80040ac <memmove+0x20>
 800409c:	1e43      	subs	r3, r0, #1
 800409e:	42a1      	cmp	r1, r4
 80040a0:	d008      	beq.n	80040b4 <memmove+0x28>
 80040a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040aa:	e7f8      	b.n	800409e <memmove+0x12>
 80040ac:	4402      	add	r2, r0
 80040ae:	4601      	mov	r1, r0
 80040b0:	428a      	cmp	r2, r1
 80040b2:	d100      	bne.n	80040b6 <memmove+0x2a>
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040be:	e7f7      	b.n	80040b0 <memmove+0x24>

080040c0 <_free_r>:
 80040c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040c2:	2900      	cmp	r1, #0
 80040c4:	d044      	beq.n	8004150 <_free_r+0x90>
 80040c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ca:	9001      	str	r0, [sp, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f1a1 0404 	sub.w	r4, r1, #4
 80040d2:	bfb8      	it	lt
 80040d4:	18e4      	addlt	r4, r4, r3
 80040d6:	f000 f913 	bl	8004300 <__malloc_lock>
 80040da:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <_free_r+0x94>)
 80040dc:	9801      	ldr	r0, [sp, #4]
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	b933      	cbnz	r3, 80040f0 <_free_r+0x30>
 80040e2:	6063      	str	r3, [r4, #4]
 80040e4:	6014      	str	r4, [r2, #0]
 80040e6:	b003      	add	sp, #12
 80040e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040ec:	f000 b90e 	b.w	800430c <__malloc_unlock>
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	d908      	bls.n	8004106 <_free_r+0x46>
 80040f4:	6825      	ldr	r5, [r4, #0]
 80040f6:	1961      	adds	r1, r4, r5
 80040f8:	428b      	cmp	r3, r1
 80040fa:	bf01      	itttt	eq
 80040fc:	6819      	ldreq	r1, [r3, #0]
 80040fe:	685b      	ldreq	r3, [r3, #4]
 8004100:	1949      	addeq	r1, r1, r5
 8004102:	6021      	streq	r1, [r4, #0]
 8004104:	e7ed      	b.n	80040e2 <_free_r+0x22>
 8004106:	461a      	mov	r2, r3
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	b10b      	cbz	r3, 8004110 <_free_r+0x50>
 800410c:	42a3      	cmp	r3, r4
 800410e:	d9fa      	bls.n	8004106 <_free_r+0x46>
 8004110:	6811      	ldr	r1, [r2, #0]
 8004112:	1855      	adds	r5, r2, r1
 8004114:	42a5      	cmp	r5, r4
 8004116:	d10b      	bne.n	8004130 <_free_r+0x70>
 8004118:	6824      	ldr	r4, [r4, #0]
 800411a:	4421      	add	r1, r4
 800411c:	1854      	adds	r4, r2, r1
 800411e:	42a3      	cmp	r3, r4
 8004120:	6011      	str	r1, [r2, #0]
 8004122:	d1e0      	bne.n	80040e6 <_free_r+0x26>
 8004124:	681c      	ldr	r4, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	6053      	str	r3, [r2, #4]
 800412a:	4421      	add	r1, r4
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	e7da      	b.n	80040e6 <_free_r+0x26>
 8004130:	d902      	bls.n	8004138 <_free_r+0x78>
 8004132:	230c      	movs	r3, #12
 8004134:	6003      	str	r3, [r0, #0]
 8004136:	e7d6      	b.n	80040e6 <_free_r+0x26>
 8004138:	6825      	ldr	r5, [r4, #0]
 800413a:	1961      	adds	r1, r4, r5
 800413c:	428b      	cmp	r3, r1
 800413e:	bf04      	itt	eq
 8004140:	6819      	ldreq	r1, [r3, #0]
 8004142:	685b      	ldreq	r3, [r3, #4]
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	bf04      	itt	eq
 8004148:	1949      	addeq	r1, r1, r5
 800414a:	6021      	streq	r1, [r4, #0]
 800414c:	6054      	str	r4, [r2, #4]
 800414e:	e7ca      	b.n	80040e6 <_free_r+0x26>
 8004150:	b003      	add	sp, #12
 8004152:	bd30      	pop	{r4, r5, pc}
 8004154:	20004094 	.word	0x20004094

08004158 <sbrk_aligned>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4e0e      	ldr	r6, [pc, #56]	; (8004194 <sbrk_aligned+0x3c>)
 800415c:	460c      	mov	r4, r1
 800415e:	6831      	ldr	r1, [r6, #0]
 8004160:	4605      	mov	r5, r0
 8004162:	b911      	cbnz	r1, 800416a <sbrk_aligned+0x12>
 8004164:	f000 f8bc 	bl	80042e0 <_sbrk_r>
 8004168:	6030      	str	r0, [r6, #0]
 800416a:	4621      	mov	r1, r4
 800416c:	4628      	mov	r0, r5
 800416e:	f000 f8b7 	bl	80042e0 <_sbrk_r>
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	d00a      	beq.n	800418c <sbrk_aligned+0x34>
 8004176:	1cc4      	adds	r4, r0, #3
 8004178:	f024 0403 	bic.w	r4, r4, #3
 800417c:	42a0      	cmp	r0, r4
 800417e:	d007      	beq.n	8004190 <sbrk_aligned+0x38>
 8004180:	1a21      	subs	r1, r4, r0
 8004182:	4628      	mov	r0, r5
 8004184:	f000 f8ac 	bl	80042e0 <_sbrk_r>
 8004188:	3001      	adds	r0, #1
 800418a:	d101      	bne.n	8004190 <sbrk_aligned+0x38>
 800418c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004190:	4620      	mov	r0, r4
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	20004098 	.word	0x20004098

08004198 <_malloc_r>:
 8004198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419c:	1ccd      	adds	r5, r1, #3
 800419e:	f025 0503 	bic.w	r5, r5, #3
 80041a2:	3508      	adds	r5, #8
 80041a4:	2d0c      	cmp	r5, #12
 80041a6:	bf38      	it	cc
 80041a8:	250c      	movcc	r5, #12
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	4607      	mov	r7, r0
 80041ae:	db01      	blt.n	80041b4 <_malloc_r+0x1c>
 80041b0:	42a9      	cmp	r1, r5
 80041b2:	d905      	bls.n	80041c0 <_malloc_r+0x28>
 80041b4:	230c      	movs	r3, #12
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	2600      	movs	r6, #0
 80041ba:	4630      	mov	r0, r6
 80041bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c0:	4e2e      	ldr	r6, [pc, #184]	; (800427c <_malloc_r+0xe4>)
 80041c2:	f000 f89d 	bl	8004300 <__malloc_lock>
 80041c6:	6833      	ldr	r3, [r6, #0]
 80041c8:	461c      	mov	r4, r3
 80041ca:	bb34      	cbnz	r4, 800421a <_malloc_r+0x82>
 80041cc:	4629      	mov	r1, r5
 80041ce:	4638      	mov	r0, r7
 80041d0:	f7ff ffc2 	bl	8004158 <sbrk_aligned>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	4604      	mov	r4, r0
 80041d8:	d14d      	bne.n	8004276 <_malloc_r+0xde>
 80041da:	6834      	ldr	r4, [r6, #0]
 80041dc:	4626      	mov	r6, r4
 80041de:	2e00      	cmp	r6, #0
 80041e0:	d140      	bne.n	8004264 <_malloc_r+0xcc>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	4631      	mov	r1, r6
 80041e6:	4638      	mov	r0, r7
 80041e8:	eb04 0803 	add.w	r8, r4, r3
 80041ec:	f000 f878 	bl	80042e0 <_sbrk_r>
 80041f0:	4580      	cmp	r8, r0
 80041f2:	d13a      	bne.n	800426a <_malloc_r+0xd2>
 80041f4:	6821      	ldr	r1, [r4, #0]
 80041f6:	3503      	adds	r5, #3
 80041f8:	1a6d      	subs	r5, r5, r1
 80041fa:	f025 0503 	bic.w	r5, r5, #3
 80041fe:	3508      	adds	r5, #8
 8004200:	2d0c      	cmp	r5, #12
 8004202:	bf38      	it	cc
 8004204:	250c      	movcc	r5, #12
 8004206:	4629      	mov	r1, r5
 8004208:	4638      	mov	r0, r7
 800420a:	f7ff ffa5 	bl	8004158 <sbrk_aligned>
 800420e:	3001      	adds	r0, #1
 8004210:	d02b      	beq.n	800426a <_malloc_r+0xd2>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	442b      	add	r3, r5
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	e00e      	b.n	8004238 <_malloc_r+0xa0>
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	1b52      	subs	r2, r2, r5
 800421e:	d41e      	bmi.n	800425e <_malloc_r+0xc6>
 8004220:	2a0b      	cmp	r2, #11
 8004222:	d916      	bls.n	8004252 <_malloc_r+0xba>
 8004224:	1961      	adds	r1, r4, r5
 8004226:	42a3      	cmp	r3, r4
 8004228:	6025      	str	r5, [r4, #0]
 800422a:	bf18      	it	ne
 800422c:	6059      	strne	r1, [r3, #4]
 800422e:	6863      	ldr	r3, [r4, #4]
 8004230:	bf08      	it	eq
 8004232:	6031      	streq	r1, [r6, #0]
 8004234:	5162      	str	r2, [r4, r5]
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	4638      	mov	r0, r7
 800423a:	f104 060b 	add.w	r6, r4, #11
 800423e:	f000 f865 	bl	800430c <__malloc_unlock>
 8004242:	f026 0607 	bic.w	r6, r6, #7
 8004246:	1d23      	adds	r3, r4, #4
 8004248:	1af2      	subs	r2, r6, r3
 800424a:	d0b6      	beq.n	80041ba <_malloc_r+0x22>
 800424c:	1b9b      	subs	r3, r3, r6
 800424e:	50a3      	str	r3, [r4, r2]
 8004250:	e7b3      	b.n	80041ba <_malloc_r+0x22>
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	42a3      	cmp	r3, r4
 8004256:	bf0c      	ite	eq
 8004258:	6032      	streq	r2, [r6, #0]
 800425a:	605a      	strne	r2, [r3, #4]
 800425c:	e7ec      	b.n	8004238 <_malloc_r+0xa0>
 800425e:	4623      	mov	r3, r4
 8004260:	6864      	ldr	r4, [r4, #4]
 8004262:	e7b2      	b.n	80041ca <_malloc_r+0x32>
 8004264:	4634      	mov	r4, r6
 8004266:	6876      	ldr	r6, [r6, #4]
 8004268:	e7b9      	b.n	80041de <_malloc_r+0x46>
 800426a:	230c      	movs	r3, #12
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4638      	mov	r0, r7
 8004270:	f000 f84c 	bl	800430c <__malloc_unlock>
 8004274:	e7a1      	b.n	80041ba <_malloc_r+0x22>
 8004276:	6025      	str	r5, [r4, #0]
 8004278:	e7de      	b.n	8004238 <_malloc_r+0xa0>
 800427a:	bf00      	nop
 800427c:	20004094 	.word	0x20004094

08004280 <_realloc_r>:
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	4680      	mov	r8, r0
 8004286:	4614      	mov	r4, r2
 8004288:	460e      	mov	r6, r1
 800428a:	b921      	cbnz	r1, 8004296 <_realloc_r+0x16>
 800428c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004290:	4611      	mov	r1, r2
 8004292:	f7ff bf81 	b.w	8004198 <_malloc_r>
 8004296:	b92a      	cbnz	r2, 80042a4 <_realloc_r+0x24>
 8004298:	f7ff ff12 	bl	80040c0 <_free_r>
 800429c:	4625      	mov	r5, r4
 800429e:	4628      	mov	r0, r5
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	f000 f838 	bl	8004318 <_malloc_usable_size_r>
 80042a8:	4284      	cmp	r4, r0
 80042aa:	4607      	mov	r7, r0
 80042ac:	d802      	bhi.n	80042b4 <_realloc_r+0x34>
 80042ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042b2:	d812      	bhi.n	80042da <_realloc_r+0x5a>
 80042b4:	4621      	mov	r1, r4
 80042b6:	4640      	mov	r0, r8
 80042b8:	f7ff ff6e 	bl	8004198 <_malloc_r>
 80042bc:	4605      	mov	r5, r0
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0ed      	beq.n	800429e <_realloc_r+0x1e>
 80042c2:	42bc      	cmp	r4, r7
 80042c4:	4622      	mov	r2, r4
 80042c6:	4631      	mov	r1, r6
 80042c8:	bf28      	it	cs
 80042ca:	463a      	movcs	r2, r7
 80042cc:	f7ff fbb8 	bl	8003a40 <memcpy>
 80042d0:	4631      	mov	r1, r6
 80042d2:	4640      	mov	r0, r8
 80042d4:	f7ff fef4 	bl	80040c0 <_free_r>
 80042d8:	e7e1      	b.n	800429e <_realloc_r+0x1e>
 80042da:	4635      	mov	r5, r6
 80042dc:	e7df      	b.n	800429e <_realloc_r+0x1e>
	...

080042e0 <_sbrk_r>:
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	4d06      	ldr	r5, [pc, #24]	; (80042fc <_sbrk_r+0x1c>)
 80042e4:	2300      	movs	r3, #0
 80042e6:	4604      	mov	r4, r0
 80042e8:	4608      	mov	r0, r1
 80042ea:	602b      	str	r3, [r5, #0]
 80042ec:	f7fc fc98 	bl	8000c20 <_sbrk>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_sbrk_r+0x1a>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_sbrk_r+0x1a>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	2000409c 	.word	0x2000409c

08004300 <__malloc_lock>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__malloc_lock+0x8>)
 8004302:	f000 b811 	b.w	8004328 <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	200040a0 	.word	0x200040a0

0800430c <__malloc_unlock>:
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <__malloc_unlock+0x8>)
 800430e:	f000 b80c 	b.w	800432a <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	200040a0 	.word	0x200040a0

08004318 <_malloc_usable_size_r>:
 8004318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431c:	1f18      	subs	r0, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	bfbc      	itt	lt
 8004322:	580b      	ldrlt	r3, [r1, r0]
 8004324:	18c0      	addlt	r0, r0, r3
 8004326:	4770      	bx	lr

08004328 <__retarget_lock_acquire_recursive>:
 8004328:	4770      	bx	lr

0800432a <__retarget_lock_release_recursive>:
 800432a:	4770      	bx	lr

0800432c <_init>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr

08004338 <_fini>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr
