
trabajo_practico_final_RTOSII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064dc  080064dc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e4  080064e4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080064ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00004628  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200046ac  200046ac  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012230  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a9  00000000  00000000  000322e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00035690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd0  00000000  00000000  000365b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000414c  00000000  00000000  00037380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c1d  00000000  00000000  0003b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcae8  00000000  00000000  0004e0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012abd1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003db4  00000000  00000000  0012ac24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006478 	.word	0x08006478

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08006478 	.word	0x08006478

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <vApplicationGetIdleTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <vApplicationGetIdleTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200000a0 	.word	0x200000a0
 8000524:	200000f4 	.word	0x200000f4

08000528 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetTimerTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetTimerTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	200002f4 	.word	0x200002f4
 8000558:	20000348 	.word	0x20000348

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fbaa 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f81c 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f8de 	bl	8000728 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800056c:	f000 f8b2 	bl	80006d4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f886 	bl	8000680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, pbuffer,1);
 8000574:	2201      	movs	r2, #1
 8000576:	4906      	ldr	r1, [pc, #24]	; (8000590 <main+0x34>)
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <main+0x38>)
 800057a:	f001 fcf3 	bl	8001f64 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, pbuffer2,1);
 800057e:	2201      	movs	r2, #1
 8000580:	4905      	ldr	r1, [pc, #20]	; (8000598 <main+0x3c>)
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <main+0x40>)
 8000584:	f001 fcee 	bl	8001f64 <HAL_UART_Receive_IT>
  application();
 8000588:	f005 f930 	bl	80057ec <application>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x30>
 800058e:	bf00      	nop
 8000590:	200007d0 	.word	0x200007d0
 8000594:	2000078c 	.word	0x2000078c
 8000598:	200007d4 	.word	0x200007d4
 800059c:	20000748 	.word	0x20000748

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fe5c 	bl	800626c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <SystemClock_Config+0xd8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <SystemClock_Config+0xd8>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xd8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <SystemClock_Config+0xdc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <SystemClock_Config+0xdc>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xdc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000614:	23b4      	movs	r3, #180	; 0xb4
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f000 ff73 	bl	8001510 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f9aa 	bl	8000988 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000634:	f000 ff1c 	bl	8001470 <HAL_PWREx_EnableOverDrive>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800063e:	f000 f9a3 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2105      	movs	r1, #5
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f9cd 	bl	8001a00 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800066c:	f000 f98c 	bl	8000988 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f001 fbc2 	bl	8001e40 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f961 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000748 	.word	0x20000748
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART3_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 800070c:	f001 fb98 	bl	8001e40 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f937 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000078c 	.word	0x2000078c
 8000724:	40004800 	.word	0x40004800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b7c      	ldr	r3, [pc, #496]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a7b      	ldr	r2, [pc, #492]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b79      	ldr	r3, [pc, #484]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b75      	ldr	r3, [pc, #468]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a74      	ldr	r2, [pc, #464]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b72      	ldr	r3, [pc, #456]	; (8000934 <MX_GPIO_Init+0x20c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b6e      	ldr	r3, [pc, #440]	; (8000934 <MX_GPIO_Init+0x20c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a6d      	ldr	r2, [pc, #436]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b6b      	ldr	r3, [pc, #428]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b67      	ldr	r3, [pc, #412]	; (8000934 <MX_GPIO_Init+0x20c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a66      	ldr	r2, [pc, #408]	; (8000934 <MX_GPIO_Init+0x20c>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b64      	ldr	r3, [pc, #400]	; (8000934 <MX_GPIO_Init+0x20c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b60      	ldr	r3, [pc, #384]	; (8000934 <MX_GPIO_Init+0x20c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a5f      	ldr	r2, [pc, #380]	; (8000934 <MX_GPIO_Init+0x20c>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b5d      	ldr	r3, [pc, #372]	; (8000934 <MX_GPIO_Init+0x20c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b59      	ldr	r3, [pc, #356]	; (8000934 <MX_GPIO_Init+0x20c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a58      	ldr	r2, [pc, #352]	; (8000934 <MX_GPIO_Init+0x20c>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b56      	ldr	r3, [pc, #344]	; (8000934 <MX_GPIO_Init+0x20c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007ec:	4852      	ldr	r0, [pc, #328]	; (8000938 <MX_GPIO_Init+0x210>)
 80007ee:	f000 fe25 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4851      	ldr	r0, [pc, #324]	; (800093c <MX_GPIO_Init+0x214>)
 80007f8:	f000 fe20 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000802:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	484b      	ldr	r0, [pc, #300]	; (8000940 <MX_GPIO_Init+0x218>)
 8000814:	f000 fc66 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000818:	2332      	movs	r3, #50	; 0x32
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4843      	ldr	r0, [pc, #268]	; (8000940 <MX_GPIO_Init+0x218>)
 8000834:	f000 fc56 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000838:	2386      	movs	r3, #134	; 0x86
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000848:	230b      	movs	r3, #11
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	483c      	ldr	r0, [pc, #240]	; (8000944 <MX_GPIO_Init+0x21c>)
 8000854:	f000 fc46 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000858:	f244 0381 	movw	r3, #16513	; 0x4081
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4831      	ldr	r0, [pc, #196]	; (8000938 <MX_GPIO_Init+0x210>)
 8000872:	f000 fc37 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000888:	230b      	movs	r3, #11
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4829      	ldr	r0, [pc, #164]	; (8000938 <MX_GPIO_Init+0x210>)
 8000894:	f000 fc26 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000898:	2340      	movs	r3, #64	; 0x40
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4823      	ldr	r0, [pc, #140]	; (800093c <MX_GPIO_Init+0x214>)
 80008b0:	f000 fc18 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_GPIO_Init+0x214>)
 80008c8:	f000 fc0c 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008de:	230a      	movs	r3, #10
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	; (8000944 <MX_GPIO_Init+0x21c>)
 80008ea:	f000 fbfb 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	; (8000944 <MX_GPIO_Init+0x21c>)
 8000904:	f000 fbee 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000908:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091a:	230b      	movs	r3, #11
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_GPIO_Init+0x214>)
 8000926:	f000 fbdd 	bl	80010e4 <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400
 800093c:	40021800 	.word	0x40021800
 8000940:	40020800 	.word	0x40020800
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if (huart==&huart3) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_UART_RxCpltCallback+0x34>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d104      	bne.n	8000962 <HAL_UART_RxCpltCallback+0x1a>
		HAL_UART_Receive_IT(&huart3, pbuffer,1);
 8000958:	2201      	movs	r2, #1
 800095a:	4909      	ldr	r1, [pc, #36]	; (8000980 <HAL_UART_RxCpltCallback+0x38>)
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <HAL_UART_RxCpltCallback+0x34>)
 800095e:	f001 fb01 	bl	8001f64 <HAL_UART_Receive_IT>
	}
	if (huart==&huart2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_UART_RxCpltCallback+0x3c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d104      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, pbuffer,1);
 800096a:	2201      	movs	r2, #1
 800096c:	4904      	ldr	r1, [pc, #16]	; (8000980 <HAL_UART_RxCpltCallback+0x38>)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_RxCpltCallback+0x3c>)
 8000970:	f001 faf8 	bl	8001f64 <HAL_UART_Receive_IT>
	}

}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000078c 	.word	0x2000078c
 8000980:	200007d0 	.word	0x200007d0
 8000984:	20000748 	.word	0x20000748

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x54>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_MspInit+0x54>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 faba 	bl	8000f52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a49      	ldr	r2, [pc, #292]	; (8000b30 <HAL_UART_MspInit+0x144>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d152      	bne.n	8000ab4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a47      	ldr	r2, [pc, #284]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	4b41      	ldr	r3, [pc, #260]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a39      	ldr	r2, [pc, #228]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a62:	2308      	movs	r3, #8
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a72:	2307      	movs	r3, #7
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	482e      	ldr	r0, [pc, #184]	; (8000b38 <HAL_UART_MspInit+0x14c>)
 8000a7e:	f000 fb31 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a82:	2320      	movs	r3, #32
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4827      	ldr	r0, [pc, #156]	; (8000b3c <HAL_UART_MspInit+0x150>)
 8000a9e:	f000 fb21 	bl	80010e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2105      	movs	r1, #5
 8000aa6:	2026      	movs	r0, #38	; 0x26
 8000aa8:	f000 fa53 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aac:	2026      	movs	r0, #38	; 0x26
 8000aae:	f000 fa6c 	bl	8000f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ab2:	e039      	b.n	8000b28 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_UART_MspInit+0x154>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d134      	bne.n	8000b28 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_UART_MspInit+0x148>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000af6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <HAL_UART_MspInit+0x150>)
 8000b14:	f000 fae6 	bl	80010e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2105      	movs	r1, #5
 8000b1c:	2027      	movs	r0, #39	; 0x27
 8000b1e:	f000 fa18 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b22:	2027      	movs	r0, #39	; 0x27
 8000b24:	f000 fa31 	bl	8000f8a <HAL_NVIC_EnableIRQ>
}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40004800 	.word	0x40004800

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f8f2 	bl	8000d5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b78:	f003 fcd8 	bl	800452c <xTaskGetSchedulerState>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d001      	beq.n	8000b86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b82:	f004 fb49 	bl	8005218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <USART2_IRQHandler+0x1c>)
 8000b92:	f001 fa17 	bl	8001fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  frame_process(&frame2,*huart2.pRxBuffPtr);
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <USART2_IRQHandler+0x1c>)
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <USART2_IRQHandler+0x20>)
 8000ba0:	f004 fed1 	bl	8005946 <frame_process>
  /* USER CODE END USART2_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000748 	.word	0x20000748
 8000bac:	20004684 	.word	0x20004684

08000bb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <USART3_IRQHandler+0x1c>)
 8000bb6:	f001 fa05 	bl	8001fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //huart3.pRxBuffPtr -= 1U;
  frame_process(&frame,*huart3.pRxBuffPtr);
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <USART3_IRQHandler+0x1c>)
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <USART3_IRQHandler+0x20>)
 8000bc4:	f004 febf 	bl	8005946 <frame_process>
  {
	  HAL_UART_Transmit(&huart3,"TRAMA OK",9,20);
  }*/

  /* USER CODE END USART3_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000078c 	.word	0x2000078c
 8000bd0:	20004670 	.word	0x20004670

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f005 fad0 	bl	80061a8 <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20030000 	.word	0x20030000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	200007d8 	.word	0x200007d8
 8000c3c:	200046b0 	.word	0x200046b0

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f005 fa8f 	bl	80061b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc61 	bl	800055c <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ca8:	080064ec 	.word	0x080064ec
  ldr r2, =_sbss
 8000cac:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000cb0:	200046ac 	.word	0x200046ac

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f92b 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe52 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f943 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d38:	f000 f90b 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	200007dc 	.word	0x200007dc

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200007dc 	.word	0x200007dc

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	; (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff29 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff3e 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff31 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffa2 	bl	8000ef8 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff feda 	bl	8000d84 <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d008      	beq.n	8000ff0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e052      	b.n	8001096 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0216 	bic.w	r2, r2, #22
 8000ffe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800100e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <HAL_DMA_Abort+0x62>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0208 	bic.w	r2, r2, #8
 800102e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001040:	e013      	b.n	800106a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001042:	f7ff fe9f 	bl	8000d84 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b05      	cmp	r3, #5
 800104e:	d90c      	bls.n	800106a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2220      	movs	r2, #32
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e015      	b.n	8001096 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e4      	bne.n	8001042 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	223f      	movs	r2, #63	; 0x3f
 800107e:	409a      	lsls	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d004      	beq.n	80010bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e00c      	b.n	80010d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2205      	movs	r2, #5
 80010c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e177      	b.n	80013f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 8166 	bne.w	80013ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d005      	beq.n	8001136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	2b02      	cmp	r3, #2
 8001134:	d130      	bne.n	8001198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 0201 	and.w	r2, r3, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d017      	beq.n	80011d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d123      	bne.n	8001228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0203 	and.w	r2, r3, #3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80c0 	beq.w	80013ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b66      	ldr	r3, [pc, #408]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a65      	ldr	r2, [pc, #404]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_GPIO_Init+0x324>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001286:	4a61      	ldr	r2, [pc, #388]	; (800140c <HAL_GPIO_Init+0x328>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_GPIO_Init+0x32c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d037      	beq.n	8001322 <HAL_GPIO_Init+0x23e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_GPIO_Init+0x330>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d031      	beq.n	800131e <HAL_GPIO_Init+0x23a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a56      	ldr	r2, [pc, #344]	; (8001418 <HAL_GPIO_Init+0x334>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x236>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a55      	ldr	r2, [pc, #340]	; (800141c <HAL_GPIO_Init+0x338>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x232>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a54      	ldr	r2, [pc, #336]	; (8001420 <HAL_GPIO_Init+0x33c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x22e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a53      	ldr	r2, [pc, #332]	; (8001424 <HAL_GPIO_Init+0x340>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x22a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_GPIO_Init+0x344>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x226>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a51      	ldr	r2, [pc, #324]	; (800142c <HAL_GPIO_Init+0x348>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x222>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a50      	ldr	r2, [pc, #320]	; (8001430 <HAL_GPIO_Init+0x34c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x21e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <HAL_GPIO_Init+0x350>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x21a>
 80012fa:	2309      	movs	r3, #9
 80012fc:	e012      	b.n	8001324 <HAL_GPIO_Init+0x240>
 80012fe:	230a      	movs	r3, #10
 8001300:	e010      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001302:	2308      	movs	r3, #8
 8001304:	e00e      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001306:	2307      	movs	r3, #7
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800130a:	2306      	movs	r3, #6
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x328>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a34      	ldr	r2, [pc, #208]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_GPIO_Init+0x354>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_GPIO_Init+0x354>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_GPIO_Init+0x354>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_GPIO_Init+0x354>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae84 	bls.w	8001100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40021c00 	.word	0x40021c00
 8001430:	40022000 	.word	0x40022000
 8001434:	40022400 	.word	0x40022400
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_PWREx_EnableOverDrive+0x90>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_PWREx_EnableOverDrive+0x90>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_PWREx_EnableOverDrive+0x90>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_PWREx_EnableOverDrive+0x94>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff fc72 	bl	8000d84 <HAL_GetTick>
 80014a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014a2:	e009      	b.n	80014b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014a4:	f7ff fc6e 	bl	8000d84 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b2:	d901      	bls.n	80014b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e01f      	b.n	80014f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_PWREx_EnableOverDrive+0x98>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d1ee      	bne.n	80014a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014cc:	f7ff fc5a 	bl	8000d84 <HAL_GetTick>
 80014d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014d2:	e009      	b.n	80014e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014d4:	f7ff fc56 	bl	8000d84 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e2:	d901      	bls.n	80014e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e007      	b.n	80014f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_PWREx_EnableOverDrive+0x98>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014f4:	d1ee      	bne.n	80014d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	420e0040 	.word	0x420e0040
 8001508:	40007000 	.word	0x40007000
 800150c:	420e0044 	.word	0x420e0044

08001510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e267      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d075      	beq.n	800161a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152e:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b04      	cmp	r3, #4
 8001538:	d00c      	beq.n	8001554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153a:	4b85      	ldr	r3, [pc, #532]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001542:	2b08      	cmp	r3, #8
 8001544:	d112      	bne.n	800156c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001546:	4b82      	ldr	r3, [pc, #520]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001552:	d10b      	bne.n	800156c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d05b      	beq.n	8001618 <HAL_RCC_OscConfig+0x108>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d157      	bne.n	8001618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e242      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x74>
 8001576:	4b76      	ldr	r3, [pc, #472]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a75      	ldr	r2, [pc, #468]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e01d      	b.n	80015c0 <HAL_RCC_OscConfig+0xb0>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x98>
 800158e:	4b70      	ldr	r3, [pc, #448]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6f      	ldr	r2, [pc, #444]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6c      	ldr	r2, [pc, #432]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xb0>
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a68      	ldr	r2, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fbdc 	bl	8000d84 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fbd8 	bl	8000d84 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e207      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0xc0>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbc8 	bl	8000d84 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbc4 	bl	8000d84 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1f3      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	4b51      	ldr	r3, [pc, #324]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0xe8>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d063      	beq.n	80016ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163a:	2b08      	cmp	r3, #8
 800163c:	d11c      	bne.n	8001678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d116      	bne.n	8001678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x152>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e1c7      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4937      	ldr	r1, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	e03a      	b.n	80016ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_RCC_OscConfig+0x244>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fb7d 	bl	8000d84 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fb79 	bl	8000d84 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1a8      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4925      	ldr	r1, [pc, #148]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
 80016c0:	e015      	b.n	80016ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <HAL_RCC_OscConfig+0x244>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb5c 	bl	8000d84 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb58 	bl	8000d84 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e187      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d036      	beq.n	8001768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d016      	beq.n	8001730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_RCC_OscConfig+0x248>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fb3c 	bl	8000d84 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fb38 	bl	8000d84 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e167      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_OscConfig+0x240>)
 8001724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x200>
 800172e:	e01b      	b.n	8001768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_OscConfig+0x248>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff fb25 	bl	8000d84 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173c:	e00e      	b.n	800175c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff fb21 	bl	8000d84 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d907      	bls.n	800175c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e150      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
 8001750:	40023800 	.word	0x40023800
 8001754:	42470000 	.word	0x42470000
 8001758:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ea      	bne.n	800173e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8097 	beq.w	80018a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177a:	4b81      	ldr	r3, [pc, #516]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10f      	bne.n	80017a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b7d      	ldr	r3, [pc, #500]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a7c      	ldr	r2, [pc, #496]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b7a      	ldr	r3, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b77      	ldr	r3, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x474>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d118      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b2:	4b74      	ldr	r3, [pc, #464]	; (8001984 <HAL_RCC_OscConfig+0x474>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a73      	ldr	r2, [pc, #460]	; (8001984 <HAL_RCC_OscConfig+0x474>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7ff fae1 	bl	8000d84 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c6:	f7ff fadd 	bl	8000d84 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e10c      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x474>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x2ea>
 80017ec:	4b64      	ldr	r3, [pc, #400]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a63      	ldr	r2, [pc, #396]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
 80017f8:	e01c      	b.n	8001834 <HAL_RCC_OscConfig+0x324>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x30c>
 8001802:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	4a5e      	ldr	r2, [pc, #376]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6713      	str	r3, [r2, #112]	; 0x70
 800180e:	4b5c      	ldr	r3, [pc, #368]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	4a5b      	ldr	r2, [pc, #364]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0x324>
 800181c:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	4b55      	ldr	r3, [pc, #340]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a54      	ldr	r2, [pc, #336]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 0304 	bic.w	r3, r3, #4
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d015      	beq.n	8001868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff faa2 	bl	8000d84 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff fa9e 	bl	8000d84 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e0cb      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0ee      	beq.n	8001844 <HAL_RCC_OscConfig+0x334>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff fa8c 	bl	8000d84 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff fa88 	bl	8000d84 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0b5      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001886:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ee      	bne.n	8001870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a38      	ldr	r2, [pc, #224]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800189e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a1 	beq.w	80019f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ae:	4b34      	ldr	r3, [pc, #208]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d05c      	beq.n	8001974 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d141      	bne.n	8001946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <HAL_RCC_OscConfig+0x478>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa5c 	bl	8000d84 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff fa58 	bl	8000d84 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e087      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	041b      	lsls	r3, r3, #16
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	491b      	ldr	r1, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x478>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff fa31 	bl	8000d84 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff fa2d 	bl	8000d84 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e05c      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x416>
 8001944:	e054      	b.n	80019f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_OscConfig+0x478>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fa1a 	bl	8000d84 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff fa16 	bl	8000d84 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e045      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_RCC_OscConfig+0x470>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x444>
 8001972:	e03d      	b.n	80019f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e038      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
 8001980:	40023800 	.word	0x40023800
 8001984:	40007000 	.word	0x40007000
 8001988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x4ec>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d028      	beq.n	80019ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d121      	bne.n	80019ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d11a      	bne.n	80019ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d111      	bne.n	80019ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0cc      	b.n	8001bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b68      	ldr	r3, [pc, #416]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d90c      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0b8      	b.n	8001bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a54:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a58      	ldr	r2, [pc, #352]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	494d      	ldr	r1, [pc, #308]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d044      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d119      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e07f      	b.n	8001bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e06f      	b.n	8001bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e067      	b.n	8001bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4934      	ldr	r1, [pc, #208]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af0:	f7ff f948 	bl	8000d84 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff f944 	bl	8000d84 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e04f      	b.n	8001bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 020c 	and.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d20c      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e032      	b.n	8001bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4916      	ldr	r1, [pc, #88]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	490e      	ldr	r1, [pc, #56]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b86:	f000 f821 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	490a      	ldr	r1, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	5ccb      	ldrb	r3, [r1, r3]
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f8a8 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	080064c4 	.word	0x080064c4
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd0:	b094      	sub	sp, #80	; 0x50
 8001bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bdc:	2300      	movs	r3, #0
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be4:	4b79      	ldr	r3, [pc, #484]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d00d      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x40>
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	f200 80e1 	bhi.w	8001db8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x34>
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d003      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bfe:	e0db      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c04:	e0db      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c06:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c0a:	e0d8      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c16:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	2200      	movs	r2, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c3e:	4622      	mov	r2, r4
 8001c40:	462b      	mov	r3, r5
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0159      	lsls	r1, r3, #5
 8001c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c50:	0150      	lsls	r0, r2, #5
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4621      	mov	r1, r4
 8001c58:	1a51      	subs	r1, r2, r1
 8001c5a:	6139      	str	r1, [r7, #16]
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c70:	4659      	mov	r1, fp
 8001c72:	018b      	lsls	r3, r1, #6
 8001c74:	4651      	mov	r1, sl
 8001c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7a:	4651      	mov	r1, sl
 8001c7c:	018a      	lsls	r2, r1, #6
 8001c7e:	4651      	mov	r1, sl
 8001c80:	ebb2 0801 	subs.w	r8, r2, r1
 8001c84:	4659      	mov	r1, fp
 8001c86:	eb63 0901 	sbc.w	r9, r3, r1
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	4699      	mov	r9, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	eb18 0303 	adds.w	r3, r8, r3
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	462b      	mov	r3, r5
 8001cac:	eb49 0303 	adc.w	r3, r9, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	024b      	lsls	r3, r1, #9
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc8:	4621      	mov	r1, r4
 8001cca:	024a      	lsls	r2, r1, #9
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cdc:	f7fe fa88 	bl	80001f0 <__aeabi_uldivmod>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce8:	e058      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d04:	4642      	mov	r2, r8
 8001d06:	464b      	mov	r3, r9
 8001d08:	f04f 0000 	mov.w	r0, #0
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	0159      	lsls	r1, r3, #5
 8001d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d16:	0150      	lsls	r0, r2, #5
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4641      	mov	r1, r8
 8001d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d22:	4649      	mov	r1, r9
 8001d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d40:	eb63 050b 	sbc.w	r5, r3, fp
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	00eb      	lsls	r3, r5, #3
 8001d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d52:	00e2      	lsls	r2, r4, #3
 8001d54:	4614      	mov	r4, r2
 8001d56:	461d      	mov	r5, r3
 8001d58:	4643      	mov	r3, r8
 8001d5a:	18e3      	adds	r3, r4, r3
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	464b      	mov	r3, r9
 8001d60:	eb45 0303 	adc.w	r3, r5, r3
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d72:	4629      	mov	r1, r5
 8001d74:	028b      	lsls	r3, r1, #10
 8001d76:	4621      	mov	r1, r4
 8001d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	028a      	lsls	r2, r1, #10
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d86:	2200      	movs	r2, #0
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	61fa      	str	r2, [r7, #28]
 8001d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d90:	f7fe fa2e 	bl	80001f0 <__aeabi_uldivmod>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4613      	mov	r3, r2
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	3301      	adds	r3, #1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3750      	adds	r7, #80	; 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_GetHCLKFreq+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	080064d4 	.word	0x080064d4

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffdc 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0b5b      	lsrs	r3, r3, #13
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	080064d4 	.word	0x080064d4

08001e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e03f      	b.n	8001ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fdc0 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fd19 	bl	80028bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d130      	bne.n	8001f56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_UART_Transmit_IT+0x26>
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e029      	b.n	8001f58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Transmit_IT+0x38>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e022      	b.n	8001f58 <HAL_UART_Transmit_IT+0x7e>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2221      	movs	r2, #33	; 0x21
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d11d      	bne.n	8001fba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_UART_Receive_IT+0x26>
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e016      	b.n	8001fbc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_UART_Receive_IT+0x38>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e00f      	b.n	8001fbc <HAL_UART_Receive_IT+0x58>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	461a      	mov	r2, r3
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 faab 	bl	800250c <UART_Start_Receive_IT>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	e000      	b.n	8001fbc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001fba:	2302      	movs	r3, #2
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0ba      	sub	sp, #232	; 0xe8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800200a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_UART_IRQHandler+0x66>
 8002016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fb8f 	bl	8002746 <UART_Receive_IT>
      return;
 8002028:	e256      	b.n	80024d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800202a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80de 	beq.w	80021f0 <HAL_UART_IRQHandler+0x22c>
 8002034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002044:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80d1 	beq.w	80021f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800204e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_UART_IRQHandler+0xae>
 800205a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_UART_IRQHandler+0xd2>
 800207e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_UART_IRQHandler+0xf6>
 80020a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f043 0204 	orr.w	r2, r3, #4
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d011      	beq.n	80020ea <HAL_UART_IRQHandler+0x126>
 80020c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f043 0208 	orr.w	r2, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 81ed 	beq.w	80024ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_UART_IRQHandler+0x14e>
 8002100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fb1a 	bl	8002746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211c:	2b40      	cmp	r3, #64	; 0x40
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_UART_IRQHandler+0x17a>
 8002136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d04f      	beq.n	80021de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa22 	bl	8002588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d141      	bne.n	80021d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3314      	adds	r3, #20
 8002158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002160:	e853 3f00 	ldrex	r3, [r3]
 8002164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800216c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3314      	adds	r3, #20
 800217a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800217e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800218a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800218e:	e841 2300 	strex	r3, r2, [r1]
 8002192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1d9      	bne.n	8002152 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d013      	beq.n	80021ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	4a7d      	ldr	r2, [pc, #500]	; (80023a0 <HAL_UART_IRQHandler+0x3dc>)
 80021ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff73 	bl	800109e <HAL_DMA_Abort_IT>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021c8:	4610      	mov	r0, r2
 80021ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021cc:	e00e      	b.n	80021ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f986 	bl	80024e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d4:	e00a      	b.n	80021ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f982 	bl	80024e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021dc:	e006      	b.n	80021ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f97e 	bl	80024e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80021ea:	e170      	b.n	80024ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ec:	bf00      	nop
    return;
 80021ee:	e16e      	b.n	80024ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	f040 814a 	bne.w	800248e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8143 	beq.w	800248e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 813c 	beq.w	800248e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	f040 80b4 	bne.w	80023a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8140 	beq.w	80024d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800225a:	429a      	cmp	r2, r3
 800225c:	f080 8139 	bcs.w	80024d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002266:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	f000 8088 	beq.w	8002386 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002284:	e853 3f00 	ldrex	r3, [r3]
 8002288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800228c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022b2:	e841 2300 	strex	r3, r2, [r1]
 80022b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1d9      	bne.n	8002276 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3314      	adds	r3, #20
 80022c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80022d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3314      	adds	r3, #20
 80022e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80022ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80022ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022f2:	e841 2300 	strex	r3, r2, [r1]
 80022f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80022f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e1      	bne.n	80022c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3314      	adds	r3, #20
 8002304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002308:	e853 3f00 	ldrex	r3, [r3]
 800230c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3314      	adds	r3, #20
 800231e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800232a:	e841 2300 	strex	r3, r2, [r1]
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e3      	bne.n	80022fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	330c      	adds	r3, #12
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234e:	e853 3f00 	ldrex	r3, [r3]
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002356:	f023 0310 	bic.w	r3, r3, #16
 800235a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	330c      	adds	r3, #12
 8002364:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002368:	65ba      	str	r2, [r7, #88]	; 0x58
 800236a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800236e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002370:	e841 2300 	strex	r3, r2, [r1]
 8002374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e3      	bne.n	8002344 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fe1c 	bl	8000fbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800238e:	b29b      	uxth	r3, r3
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	b29b      	uxth	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8ac 	bl	80024f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800239c:	e099      	b.n	80024d2 <HAL_UART_IRQHandler+0x50e>
 800239e:	bf00      	nop
 80023a0:	0800264f 	.word	0x0800264f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 808b 	beq.w	80024d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80023c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8086 	beq.w	80024d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80023ee:	647a      	str	r2, [r7, #68]	; 0x44
 80023f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80023f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e3      	bne.n	80023ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	623b      	str	r3, [r7, #32]
   return(result);
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3314      	adds	r3, #20
 8002422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002426:	633a      	str	r2, [r7, #48]	; 0x30
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800242c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e3      	bne.n	8002402 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	60fb      	str	r3, [r7, #12]
   return(result);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0310 	bic.w	r3, r3, #16
 800245e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	617b      	str	r3, [r7, #20]
   return(result);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e3      	bne.n	8002448 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f834 	bl	80024f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800248c:	e023      	b.n	80024d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800248e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_UART_IRQHandler+0x4ea>
 800249a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8e5 	bl	8002676 <UART_Transmit_IT>
    return;
 80024ac:	e014      	b.n	80024d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00e      	beq.n	80024d8 <HAL_UART_IRQHandler+0x514>
 80024ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f925 	bl	8002716 <UART_EndTransmit_IT>
    return;
 80024cc:	e004      	b.n	80024d8 <HAL_UART_IRQHandler+0x514>
    return;
 80024ce:	bf00      	nop
 80024d0:	e002      	b.n	80024d8 <HAL_UART_IRQHandler+0x514>
      return;
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <HAL_UART_IRQHandler+0x514>
      return;
 80024d6:	bf00      	nop
  }
}
 80024d8:	37e8      	adds	r7, #232	; 0xe8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop

080024e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	88fa      	ldrh	r2, [r7, #6]
 8002524:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	88fa      	ldrh	r2, [r7, #6]
 800252a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2222      	movs	r2, #34	; 0x22
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002558:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002588:	b480      	push	{r7}
 800258a:	b095      	sub	sp, #84	; 0x54
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	e853 3f00 	ldrex	r3, [r3]
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	330c      	adds	r3, #12
 80025ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b0:	643a      	str	r2, [r7, #64]	; 0x40
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025b8:	e841 2300 	strex	r3, r2, [r1]
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e5      	bne.n	8002590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3314      	adds	r3, #20
 80025ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	e853 3f00 	ldrex	r3, [r3]
 80025d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3314      	adds	r3, #20
 80025e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ec:	e841 2300 	strex	r3, r2, [r1]
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e5      	bne.n	80025c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d119      	bne.n	8002634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002620:	61ba      	str	r2, [r7, #24]
 8002622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002624:	6979      	ldr	r1, [r7, #20]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	e841 2300 	strex	r3, r2, [r1]
 800262c:	613b      	str	r3, [r7, #16]
   return(result);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e5      	bne.n	8002600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002642:	bf00      	nop
 8002644:	3754      	adds	r7, #84	; 0x54
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff ff39 	bl	80024e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b21      	cmp	r3, #33	; 0x21
 8002688:	d13e      	bne.n	8002708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d114      	bne.n	80026be <UART_Transmit_IT+0x48>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d110      	bne.n	80026be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	621a      	str	r2, [r3, #32]
 80026bc:	e008      	b.n	80026d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6211      	str	r1, [r2, #32]
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29b      	uxth	r3, r3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4619      	mov	r1, r3
 80026de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10f      	bne.n	8002704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800272c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f003 f8a0 	bl	800587c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b08c      	sub	sp, #48	; 0x30
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b22      	cmp	r3, #34	; 0x22
 8002758:	f040 80ab 	bne.w	80028b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002764:	d117      	bne.n	8002796 <UART_Receive_IT+0x50>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800276e:	2300      	movs	r3, #0
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002784:	b29a      	uxth	r2, r3
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	1c9a      	adds	r2, r3, #2
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
 8002794:	e026      	b.n	80027e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a8:	d007      	beq.n	80027ba <UART_Receive_IT+0x74>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <UART_Receive_IT+0x82>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e008      	b.n	80027da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4619      	mov	r1, r3
 80027f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d15a      	bne.n	80028ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0220 	bic.w	r2, r2, #32
 8002806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	2b01      	cmp	r3, #1
 8002836:	d135      	bne.n	80028a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	613b      	str	r3, [r7, #16]
   return(result);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f023 0310 	bic.w	r3, r3, #16
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	623a      	str	r2, [r7, #32]
 8002860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	69f9      	ldr	r1, [r7, #28]
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	61bb      	str	r3, [r7, #24]
   return(result);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e5      	bne.n	800283e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b10      	cmp	r3, #16
 800287e:	d10a      	bne.n	8002896 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff fe29 	bl	80024f4 <HAL_UARTEx_RxEventCallback>
 80028a2:	e002      	b.n	80028aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7fe f84f 	bl	8000948 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e002      	b.n	80028b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3730      	adds	r7, #48	; 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b0c0      	sub	sp, #256	; 0x100
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	ea40 0301 	orr.w	r3, r0, r1
 80028e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002914:	f021 010c 	bic.w	r1, r1, #12
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002922:	430b      	orrs	r3, r1
 8002924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	6999      	ldr	r1, [r3, #24]
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	ea40 0301 	orr.w	r3, r0, r1
 8002942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b8f      	ldr	r3, [pc, #572]	; (8002b88 <UART_SetConfig+0x2cc>)
 800294c:	429a      	cmp	r2, r3
 800294e:	d005      	beq.n	800295c <UART_SetConfig+0xa0>
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b8d      	ldr	r3, [pc, #564]	; (8002b8c <UART_SetConfig+0x2d0>)
 8002958:	429a      	cmp	r2, r3
 800295a:	d104      	bne.n	8002966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800295c:	f7ff fa5c 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8002960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002964:	e003      	b.n	800296e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002966:	f7ff fa43 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 800296a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002978:	f040 810c 	bne.w	8002b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800297c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002980:	2200      	movs	r2, #0
 8002982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800298a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800298e:	4622      	mov	r2, r4
 8002990:	462b      	mov	r3, r5
 8002992:	1891      	adds	r1, r2, r2
 8002994:	65b9      	str	r1, [r7, #88]	; 0x58
 8002996:	415b      	adcs	r3, r3
 8002998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800299a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800299e:	4621      	mov	r1, r4
 80029a0:	eb12 0801 	adds.w	r8, r2, r1
 80029a4:	4629      	mov	r1, r5
 80029a6:	eb43 0901 	adc.w	r9, r3, r1
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029be:	4690      	mov	r8, r2
 80029c0:	4699      	mov	r9, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	eb18 0303 	adds.w	r3, r8, r3
 80029c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029cc:	462b      	mov	r3, r5
 80029ce:	eb49 0303 	adc.w	r3, r9, r3
 80029d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029ea:	460b      	mov	r3, r1
 80029ec:	18db      	adds	r3, r3, r3
 80029ee:	653b      	str	r3, [r7, #80]	; 0x50
 80029f0:	4613      	mov	r3, r2
 80029f2:	eb42 0303 	adc.w	r3, r2, r3
 80029f6:	657b      	str	r3, [r7, #84]	; 0x54
 80029f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a00:	f7fd fbf6 	bl	80001f0 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4b61      	ldr	r3, [pc, #388]	; (8002b90 <UART_SetConfig+0x2d4>)
 8002a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	011c      	lsls	r4, r3, #4
 8002a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a24:	4642      	mov	r2, r8
 8002a26:	464b      	mov	r3, r9
 8002a28:	1891      	adds	r1, r2, r2
 8002a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a2c:	415b      	adcs	r3, r3
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a34:	4641      	mov	r1, r8
 8002a36:	eb12 0a01 	adds.w	sl, r2, r1
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a54:	4692      	mov	sl, r2
 8002a56:	469b      	mov	fp, r3
 8002a58:	4643      	mov	r3, r8
 8002a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a62:	464b      	mov	r3, r9
 8002a64:	eb4b 0303 	adc.w	r3, fp, r3
 8002a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a80:	460b      	mov	r3, r1
 8002a82:	18db      	adds	r3, r3, r3
 8002a84:	643b      	str	r3, [r7, #64]	; 0x40
 8002a86:	4613      	mov	r3, r2
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a96:	f7fd fbab 	bl	80001f0 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <UART_SetConfig+0x2d4>)
 8002aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2264      	movs	r2, #100	; 0x64
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	1acb      	subs	r3, r1, r3
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <UART_SetConfig+0x2d4>)
 8002ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ac4:	441c      	add	r4, r3
 8002ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	1891      	adds	r1, r2, r2
 8002ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ae0:	415b      	adcs	r3, r3
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ae8:	4641      	mov	r1, r8
 8002aea:	1851      	adds	r1, r2, r1
 8002aec:	6339      	str	r1, [r7, #48]	; 0x30
 8002aee:	4649      	mov	r1, r9
 8002af0:	414b      	adcs	r3, r1
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b00:	4659      	mov	r1, fp
 8002b02:	00cb      	lsls	r3, r1, #3
 8002b04:	4651      	mov	r1, sl
 8002b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	00ca      	lsls	r2, r1, #3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	4642      	mov	r2, r8
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	460a      	mov	r2, r1
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	18db      	adds	r3, r3, r3
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b42:	4613      	mov	r3, r2
 8002b44:	eb42 0303 	adc.w	r3, r2, r3
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b52:	f7fd fb4d 	bl	80001f0 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <UART_SetConfig+0x2d4>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	; 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	3332      	adds	r3, #50	; 0x32
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <UART_SetConfig+0x2d4>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	f003 0207 	and.w	r2, r3, #7
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4422      	add	r2, r4
 8002b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b84:	e105      	b.n	8002d92 <UART_SetConfig+0x4d6>
 8002b86:	bf00      	nop
 8002b88:	40011000 	.word	0x40011000
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	464b      	mov	r3, r9
 8002baa:	1891      	adds	r1, r2, r2
 8002bac:	6239      	str	r1, [r7, #32]
 8002bae:	415b      	adcs	r3, r3
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	1854      	adds	r4, r2, r1
 8002bba:	4649      	mov	r1, r9
 8002bbc:	eb43 0501 	adc.w	r5, r3, r1
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	00eb      	lsls	r3, r5, #3
 8002bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bce:	00e2      	lsls	r2, r4, #3
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	18e3      	adds	r3, r4, r3
 8002bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bdc:	464b      	mov	r3, r9
 8002bde:	eb45 0303 	adc.w	r3, r5, r3
 8002be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c02:	4629      	mov	r1, r5
 8002c04:	008b      	lsls	r3, r1, #2
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	008a      	lsls	r2, r1, #2
 8002c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c14:	f7fd faec 	bl	80001f0 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4b60      	ldr	r3, [pc, #384]	; (8002da0 <UART_SetConfig+0x4e4>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011c      	lsls	r4, r3, #4
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	61b9      	str	r1, [r7, #24]
 8002c40:	415b      	adcs	r3, r3
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c48:	4641      	mov	r1, r8
 8002c4a:	1851      	adds	r1, r2, r1
 8002c4c:	6139      	str	r1, [r7, #16]
 8002c4e:	4649      	mov	r1, r9
 8002c50:	414b      	adcs	r3, r1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c60:	4659      	mov	r1, fp
 8002c62:	00cb      	lsls	r3, r1, #3
 8002c64:	4651      	mov	r1, sl
 8002c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	00ca      	lsls	r2, r1, #3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	4642      	mov	r2, r8
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	460a      	mov	r2, r1
 8002c80:	eb42 0303 	adc.w	r3, r2, r3
 8002c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	008b      	lsls	r3, r1, #2
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002caa:	4641      	mov	r1, r8
 8002cac:	008a      	lsls	r2, r1, #2
 8002cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cb2:	f7fd fa9d 	bl	80001f0 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <UART_SetConfig+0x4e4>)
 8002cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	2164      	movs	r1, #100	; 0x64
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	3332      	adds	r3, #50	; 0x32
 8002cce:	4a34      	ldr	r2, [pc, #208]	; (8002da0 <UART_SetConfig+0x4e4>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cda:	441c      	add	r4, r3
 8002cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ce4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ce6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cea:	4642      	mov	r2, r8
 8002cec:	464b      	mov	r3, r9
 8002cee:	1891      	adds	r1, r2, r2
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	415b      	adcs	r3, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cfa:	4641      	mov	r1, r8
 8002cfc:	1851      	adds	r1, r2, r1
 8002cfe:	6039      	str	r1, [r7, #0]
 8002d00:	4649      	mov	r1, r9
 8002d02:	414b      	adcs	r3, r1
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d12:	4659      	mov	r1, fp
 8002d14:	00cb      	lsls	r3, r1, #3
 8002d16:	4651      	mov	r1, sl
 8002d18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	00ca      	lsls	r2, r1, #3
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	4603      	mov	r3, r0
 8002d26:	4642      	mov	r2, r8
 8002d28:	189b      	adds	r3, r3, r2
 8002d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	460a      	mov	r2, r1
 8002d30:	eb42 0303 	adc.w	r3, r2, r3
 8002d34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d40:	667a      	str	r2, [r7, #100]	; 0x64
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d4e:	4649      	mov	r1, r9
 8002d50:	008b      	lsls	r3, r1, #2
 8002d52:	4641      	mov	r1, r8
 8002d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d58:	4641      	mov	r1, r8
 8002d5a:	008a      	lsls	r2, r1, #2
 8002d5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d60:	f7fd fa46 	bl	80001f0 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <UART_SetConfig+0x4e4>)
 8002d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2164      	movs	r1, #100	; 0x64
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	3332      	adds	r3, #50	; 0x32
 8002d7c:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <UART_SetConfig+0x4e4>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4422      	add	r2, r4
 8002d90:	609a      	str	r2, [r3, #8]
}
 8002d92:	bf00      	nop
 8002d94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9e:	bf00      	nop
 8002da0:	51eb851f 	.word	0x51eb851f

08002da4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002da8:	f000 ff6e 	bl	8003c88 <vTaskStartScheduler>
  
  return osOK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f103 0208 	add.w	r2, r3, #8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0208 	add.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f103 0208 	add.w	r2, r3, #8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6a:	d103      	bne.n	8002e74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e00c      	b.n	8002e8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3308      	adds	r3, #8
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e002      	b.n	8002e82 <vListInsert+0x2e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d2f6      	bcs.n	8002e7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6852      	ldr	r2, [r2, #4]
 8002ee6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d103      	bne.n	8002efa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f42:	bf00      	nop
 8002f44:	e7fe      	b.n	8002f44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f46:	f002 f8d5 	bl	80050f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	68f9      	ldr	r1, [r7, #12]
 8002f54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	441a      	add	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	3b01      	subs	r3, #1
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	441a      	add	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d114      	bne.n	8002fc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01a      	beq.n	8002fda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3310      	adds	r3, #16
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f903 	bl	80041b4 <xTaskRemoveFromEventList>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <xQueueGenericReset+0xcc>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	e009      	b.n	8002fda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3310      	adds	r3, #16
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fef1 	bl	8002db2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3324      	adds	r3, #36	; 0x24
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff feec 	bl	8002db2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fda:	f002 f8bb 	bl	8005154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fde:	2301      	movs	r3, #1
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08e      	sub	sp, #56	; 0x38
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <xQueueGenericCreateStatic+0x52>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <xQueueGenericCreateStatic+0x56>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <xQueueGenericCreateStatic+0x58>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	623b      	str	r3, [r7, #32]
}
 800305a:	bf00      	nop
 800305c:	e7fe      	b.n	800305c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <xQueueGenericCreateStatic+0x7e>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <xQueueGenericCreateStatic+0x82>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <xQueueGenericCreateStatic+0x84>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	61fb      	str	r3, [r7, #28]
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800308a:	2348      	movs	r3, #72	; 0x48
 800308c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b48      	cmp	r3, #72	; 0x48
 8003092:	d00a      	beq.n	80030aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61bb      	str	r3, [r7, #24]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f83f 	bl	8003150 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3730      	adds	r7, #48	; 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <xQueueGenericCreate+0x2a>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	613b      	str	r3, [r7, #16]
}
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3348      	adds	r3, #72	; 0x48
 8003114:	4618      	mov	r0, r3
 8003116:	f002 f90f 	bl	8005338 <pvPortMalloc>
 800311a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d011      	beq.n	8003146 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3348      	adds	r3, #72	; 0x48
 800312a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003134:	79fa      	ldrb	r2, [r7, #7]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f805 	bl	8003150 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003146:	69bb      	ldr	r3, [r7, #24]
	}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e002      	b.n	8003172 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800317e:	2101      	movs	r1, #1
 8003180:	69b8      	ldr	r0, [r7, #24]
 8003182:	f7ff fecb 	bl	8002f1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	; 0x38
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xQueueGenericSend+0x32>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <xQueueGenericSend+0x40>
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <xQueueGenericSend+0x44>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <xQueueGenericSend+0x46>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <xQueueGenericSend+0x60>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d103      	bne.n	80031fe <xQueueGenericSend+0x6e>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <xQueueGenericSend+0x72>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueGenericSend+0x74>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueGenericSend+0x8e>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	623b      	str	r3, [r7, #32]
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800321e:	f001 f985 	bl	800452c <xTaskGetSchedulerState>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <xQueueGenericSend+0x9e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <xQueueGenericSend+0xa2>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <xQueueGenericSend+0xa4>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <xQueueGenericSend+0xbe>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	61fb      	str	r3, [r7, #28]
}
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800324e:	f001 ff51 	bl	80050f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <xQueueGenericSend+0xd4>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d129      	bne.n	80032b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800326a:	f000 fa0b 	bl	8003684 <prvCopyDataToQueue>
 800326e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	3324      	adds	r3, #36	; 0x24
 800327c:	4618      	mov	r0, r3
 800327e:	f000 ff99 	bl	80041b4 <xTaskRemoveFromEventList>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <xQueueGenericSend+0x1f8>)
 800328a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	e00a      	b.n	80032b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032a0:	4b39      	ldr	r3, [pc, #228]	; (8003388 <xQueueGenericSend+0x1f8>)
 80032a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032b0:	f001 ff50 	bl	8005154 <vPortExitCritical>
				return pdPASS;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e063      	b.n	8003380 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032be:	f001 ff49 	bl	8005154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e05c      	b.n	8003380 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 ffd1 	bl	8004278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032da:	f001 ff3b 	bl	8005154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032de:	f000 fd39 	bl	8003d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032e2:	f001 ff07 	bl	80050f4 <vPortEnterCritical>
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f2:	d103      	bne.n	80032fc <xQueueGenericSend+0x16c>
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003308:	d103      	bne.n	8003312 <xQueueGenericSend+0x182>
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003312:	f001 ff1f 	bl	8005154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003316:	1d3a      	adds	r2, r7, #4
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 ffc0 	bl	80042a4 <xTaskCheckForTimeOut>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d124      	bne.n	8003374 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800332a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800332c:	f000 faa2 	bl	8003874 <prvIsQueueFull>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d018      	beq.n	8003368 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	3310      	adds	r3, #16
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fee8 	bl	8004114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003346:	f000 fa2d 	bl	80037a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800334a:	f000 fd11 	bl	8003d70 <xTaskResumeAll>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f af7c 	bne.w	800324e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <xQueueGenericSend+0x1f8>)
 8003358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	e772      	b.n	800324e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336a:	f000 fa1b 	bl	80037a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800336e:	f000 fcff 	bl	8003d70 <xTaskResumeAll>
 8003372:	e76c      	b.n	800324e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003376:	f000 fa15 	bl	80037a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337a:	f000 fcf9 	bl	8003d70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800337e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003380:	4618      	mov	r0, r3
 8003382:	3738      	adds	r7, #56	; 0x38
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b090      	sub	sp, #64	; 0x40
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <xQueueGenericSendFromISR+0x3c>
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <xQueueGenericSendFromISR+0x40>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <xQueueGenericSendFromISR+0x42>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d103      	bne.n	80033f6 <xQueueGenericSendFromISR+0x6a>
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <xQueueGenericSendFromISR+0x6e>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <xQueueGenericSendFromISR+0x70>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	623b      	str	r3, [r7, #32]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003416:	f001 ff4f 	bl	80052b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800341a:	f3ef 8211 	mrs	r2, BASEPRI
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	61fa      	str	r2, [r7, #28]
 8003430:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003432:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <xQueueGenericSendFromISR+0xbc>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d12f      	bne.n	80034a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800345e:	f000 f911 	bl	8003684 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003462:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346a:	d112      	bne.n	8003492 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	3324      	adds	r3, #36	; 0x24
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fe9b 	bl	80041b4 <xTaskRemoveFromEventList>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e007      	b.n	80034a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003492:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003496:	3301      	adds	r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	b25a      	sxtb	r2, r3
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034a2:	2301      	movs	r3, #1
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80034a6:	e001      	b.n	80034ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3740      	adds	r7, #64	; 0x40
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <xQueueReceive+0x30>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	623b      	str	r3, [r7, #32]
}
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <xQueueReceive+0x3e>
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <xQueueReceive+0x42>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <xQueueReceive+0x44>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <xQueueReceive+0x5e>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	61fb      	str	r3, [r7, #28]
}
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003522:	f001 f803 	bl	800452c <xTaskGetSchedulerState>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <xQueueReceive+0x6e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <xQueueReceive+0x72>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <xQueueReceive+0x74>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xQueueReceive+0x8e>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	61bb      	str	r3, [r7, #24]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003552:	f001 fdcf 	bl	80050f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01f      	beq.n	80035a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003566:	f000 f8f7 	bl	8003758 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1e5a      	subs	r2, r3, #1
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00f      	beq.n	800359a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	3310      	adds	r3, #16
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fe18 	bl	80041b4 <xTaskRemoveFromEventList>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <xQueueReceive+0x1bc>)
 800358c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800359a:	f001 fddb 	bl	8005154 <vPortExitCritical>
				return pdPASS;
 800359e:	2301      	movs	r3, #1
 80035a0:	e069      	b.n	8003676 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035a8:	f001 fdd4 	bl	8005154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e062      	b.n	8003676 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035b6:	f107 0310 	add.w	r3, r7, #16
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fe5c 	bl	8004278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035c4:	f001 fdc6 	bl	8005154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c8:	f000 fbc4 	bl	8003d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035cc:	f001 fd92 	bl	80050f4 <vPortEnterCritical>
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035dc:	d103      	bne.n	80035e6 <xQueueReceive+0x122>
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f2:	d103      	bne.n	80035fc <xQueueReceive+0x138>
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fc:	f001 fdaa 	bl	8005154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003600:	1d3a      	adds	r2, r7, #4
 8003602:	f107 0310 	add.w	r3, r7, #16
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fe4b 	bl	80042a4 <xTaskCheckForTimeOut>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d123      	bne.n	800365c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003616:	f000 f917 	bl	8003848 <prvIsQueueEmpty>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d017      	beq.n	8003650 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	3324      	adds	r3, #36	; 0x24
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fd73 	bl	8004114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 f8b8 	bl	80037a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003634:	f000 fb9c 	bl	8003d70 <xTaskResumeAll>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d189      	bne.n	8003552 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <xQueueReceive+0x1bc>)
 8003640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	e780      	b.n	8003552 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003652:	f000 f8a7 	bl	80037a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003656:	f000 fb8b 	bl	8003d70 <xTaskResumeAll>
 800365a:	e77a      	b.n	8003552 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800365c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365e:	f000 f8a1 	bl	80037a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003662:	f000 fb85 	bl	8003d70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003668:	f000 f8ee 	bl	8003848 <prvIsQueueEmpty>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f43f af6f 	beq.w	8003552 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003674:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003676:	4618      	mov	r0, r3
 8003678:	3730      	adds	r7, #48	; 0x30
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d14d      	bne.n	8003746 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 ff5a 	bl	8004568 <xTaskPriorityDisinherit>
 80036b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	e043      	b.n	8003746 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d119      	bne.n	80036f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6858      	ldr	r0, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	461a      	mov	r2, r3
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	f002 fda4 	bl	800621c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	441a      	add	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d32b      	bcc.n	8003746 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	e026      	b.n	8003746 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68d8      	ldr	r0, [r3, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	461a      	mov	r2, r3
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	f002 fd8a 	bl	800621c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	425b      	negs	r3, r3
 8003712:	441a      	add	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d207      	bcs.n	8003734 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	425b      	negs	r3, r3
 800372e:	441a      	add	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d105      	bne.n	8003746 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3b01      	subs	r3, #1
 8003744:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800374e:	697b      	ldr	r3, [r7, #20]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	441a      	add	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d303      	bcc.n	800378c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68d9      	ldr	r1, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	461a      	mov	r2, r3
 8003796:	6838      	ldr	r0, [r7, #0]
 8003798:	f002 fd40 	bl	800621c <memcpy>
	}
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037ac:	f001 fca2 	bl	80050f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037b8:	e011      	b.n	80037de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3324      	adds	r3, #36	; 0x24
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fcf4 	bl	80041b4 <xTaskRemoveFromEventList>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037d2:	f000 fdc9 	bl	8004368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	3b01      	subs	r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dce9      	bgt.n	80037ba <prvUnlockQueue+0x16>
 80037e6:	e000      	b.n	80037ea <prvUnlockQueue+0x46>
					break;
 80037e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	22ff      	movs	r2, #255	; 0xff
 80037ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037f2:	f001 fcaf 	bl	8005154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037f6:	f001 fc7d 	bl	80050f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003800:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003802:	e011      	b.n	8003828 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3310      	adds	r3, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fccf 	bl	80041b4 <xTaskRemoveFromEventList>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800381c:	f000 fda4 	bl	8004368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003820:	7bbb      	ldrb	r3, [r7, #14]
 8003822:	3b01      	subs	r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800382c:	2b00      	cmp	r3, #0
 800382e:	dce9      	bgt.n	8003804 <prvUnlockQueue+0x60>
 8003830:	e000      	b.n	8003834 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003832:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800383c:	f001 fc8a 	bl	8005154 <vPortExitCritical>
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003850:	f001 fc50 	bl	80050f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e001      	b.n	8003866 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003866:	f001 fc75 	bl	8005154 <vPortExitCritical>

	return xReturn;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800387c:	f001 fc3a 	bl	80050f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	429a      	cmp	r2, r3
 800388a:	d102      	bne.n	8003892 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e001      	b.n	8003896 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003896:	f001 fc5d 	bl	8005154 <vPortExitCritical>

	return xReturn;
 800389a:	68fb      	ldr	r3, [r7, #12]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e014      	b.n	80038de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <vQueueAddToRegistry+0x50>)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038c0:	490c      	ldr	r1, [pc, #48]	; (80038f4 <vQueueAddToRegistry+0x50>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <vQueueAddToRegistry+0x50>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038d6:	e006      	b.n	80038e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b07      	cmp	r3, #7
 80038e2:	d9e7      	bls.n	80038b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	200007e0 	.word	0x200007e0

080038f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003908:	f001 fbf4 	bl	80050f4 <vPortEnterCritical>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003912:	b25b      	sxtb	r3, r3
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003918:	d103      	bne.n	8003922 <vQueueWaitForMessageRestricted+0x2a>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003928:	b25b      	sxtb	r3, r3
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392e:	d103      	bne.n	8003938 <vQueueWaitForMessageRestricted+0x40>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003938:	f001 fc0c 	bl	8005154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3324      	adds	r3, #36	; 0x24
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fc05 	bl	800415c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff26 	bl	80037a4 <prvUnlockQueue>
	}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	; 0x38
 8003964:	af04      	add	r7, sp, #16
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	623b      	str	r3, [r7, #32]
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	61fb      	str	r3, [r7, #28]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039a6:	2354      	movs	r3, #84	; 0x54
 80039a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b54      	cmp	r3, #84	; 0x54
 80039ae:	d00a      	beq.n	80039c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	61bb      	str	r3, [r7, #24]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01e      	beq.n	8003a0c <xTaskCreateStatic+0xac>
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039e6:	2300      	movs	r3, #0
 80039e8:	9303      	str	r3, [sp, #12]
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	9302      	str	r3, [sp, #8]
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f850 	bl	8003aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a06:	f000 f8d5 	bl	8003bb4 <prvAddNewTaskToReadyList>
 8003a0a:	e001      	b.n	8003a10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a10:	697b      	ldr	r3, [r7, #20]
	}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08c      	sub	sp, #48	; 0x30
 8003a1e:	af04      	add	r7, sp, #16
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fc82 	bl	8005338 <pvPortMalloc>
 8003a34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00e      	beq.n	8003a5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a3c:	2054      	movs	r0, #84	; 0x54
 8003a3e:	f001 fc7b 	bl	8005338 <pvPortMalloc>
 8003a42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a50:	e005      	b.n	8003a5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a52:	6978      	ldr	r0, [r7, #20]
 8003a54:	f001 fd3c 	bl	80054d0 <vPortFree>
 8003a58:	e001      	b.n	8003a5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d017      	beq.n	8003a94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a6c:	88fa      	ldrh	r2, [r7, #6]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	9302      	str	r3, [sp, #8]
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f80e 	bl	8003aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a88:	69f8      	ldr	r0, [r7, #28]
 8003a8a:	f000 f893 	bl	8003bb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e002      	b.n	8003a9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003abc:	3b01      	subs	r3, #1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f023 0307 	bic.w	r3, r3, #7
 8003aca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <prvInitialiseNewTask+0x48>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	617b      	str	r3, [r7, #20]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01f      	beq.n	8003b32 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e012      	b.n	8003b1e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	7819      	ldrb	r1, [r3, #0]
 8003b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	3334      	adds	r3, #52	; 0x34
 8003b08:	460a      	mov	r2, r1
 8003b0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b0f      	cmp	r3, #15
 8003b22:	d9e9      	bls.n	8003af8 <prvInitialiseNewTask+0x54>
 8003b24:	e000      	b.n	8003b28 <prvInitialiseNewTask+0x84>
			{
				break;
 8003b26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b30:	e003      	b.n	8003b3a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d901      	bls.n	8003b44 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b40:	2306      	movs	r3, #6
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	2200      	movs	r2, #0
 8003b54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff f949 	bl	8002df2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	3318      	adds	r3, #24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f944 	bl	8002df2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	f1c3 0207 	rsb	r2, r3, #7
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	2200      	movs	r2, #0
 8003b84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	69b8      	ldr	r0, [r7, #24]
 8003b94:	f001 f982 	bl	8004e9c <pxPortInitialiseStack>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003baa:	bf00      	nop
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bbc:	f001 fa9a 	bl	80050f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <prvAddNewTaskToReadyList+0xb8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <prvAddNewTaskToReadyList+0xb8>)
 8003bc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <prvAddNewTaskToReadyList+0xbc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bd2:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <prvAddNewTaskToReadyList+0xbc>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <prvAddNewTaskToReadyList+0xb8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d110      	bne.n	8003c02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003be0:	f000 fbe6 	bl	80043b0 <prvInitialiseTaskLists>
 8003be4:	e00d      	b.n	8003c02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <prvAddNewTaskToReadyList+0xc0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <prvAddNewTaskToReadyList+0xbc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d802      	bhi.n	8003c02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <prvAddNewTaskToReadyList+0xbc>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <prvAddNewTaskToReadyList+0xc4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <prvAddNewTaskToReadyList+0xc4>)
 8003c0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	2201      	movs	r2, #1
 8003c12:	409a      	lsls	r2, r3
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <prvAddNewTaskToReadyList+0xc8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <prvAddNewTaskToReadyList+0xc8>)
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <prvAddNewTaskToReadyList+0xcc>)
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f7ff f8e9 	bl	8002e0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c3a:	f001 fa8b 	bl	8005154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <prvAddNewTaskToReadyList+0xc0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <prvAddNewTaskToReadyList+0xbc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d207      	bcs.n	8003c64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <prvAddNewTaskToReadyList+0xd0>)
 8003c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000920 	.word	0x20000920
 8003c70:	20000820 	.word	0x20000820
 8003c74:	2000092c 	.word	0x2000092c
 8003c78:	2000093c 	.word	0x2000093c
 8003c7c:	20000928 	.word	0x20000928
 8003c80:	20000824 	.word	0x20000824
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c96:	463a      	mov	r2, r7
 8003c98:	1d39      	adds	r1, r7, #4
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc28 	bl	80004f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	9202      	str	r2, [sp, #8]
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	4921      	ldr	r1, [pc, #132]	; (8003d3c <vTaskStartScheduler+0xb4>)
 8003cb8:	4821      	ldr	r0, [pc, #132]	; (8003d40 <vTaskStartScheduler+0xb8>)
 8003cba:	f7ff fe51 	bl	8003960 <xTaskCreateStatic>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <vTaskStartScheduler+0xbc>)
 8003cc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <vTaskStartScheduler+0xbc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e001      	b.n	8003cd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cdc:	f000 fd30 	bl	8004740 <xTimerCreateTimerTask>
 8003ce0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d116      	bne.n	8003d16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	613b      	str	r3, [r7, #16]
}
 8003cfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <vTaskStartScheduler+0xc0>)
 8003cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <vTaskStartScheduler+0xc4>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <vTaskStartScheduler+0xc8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d10:	f001 f94e 	bl	8004fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d14:	e00e      	b.n	8003d34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1c:	d10a      	bne.n	8003d34 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60fb      	str	r3, [r7, #12]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <vTaskStartScheduler+0xaa>
}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	08006490 	.word	0x08006490
 8003d40:	08004381 	.word	0x08004381
 8003d44:	20000944 	.word	0x20000944
 8003d48:	20000940 	.word	0x20000940
 8003d4c:	2000092c 	.word	0x2000092c
 8003d50:	20000924 	.word	0x20000924

08003d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <vTaskSuspendAll+0x18>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	4a03      	ldr	r2, [pc, #12]	; (8003d6c <vTaskSuspendAll+0x18>)
 8003d60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	20000948 	.word	0x20000948

08003d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <xTaskResumeAll+0x114>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <xTaskResumeAll+0x2c>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	603b      	str	r3, [r7, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d9c:	f001 f9aa 	bl	80050f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003da0:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <xTaskResumeAll+0x114>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a37      	ldr	r2, [pc, #220]	; (8003e84 <xTaskResumeAll+0x114>)
 8003da8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003daa:	4b36      	ldr	r3, [pc, #216]	; (8003e84 <xTaskResumeAll+0x114>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d161      	bne.n	8003e76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003db2:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <xTaskResumeAll+0x118>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d05d      	beq.n	8003e76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dba:	e02e      	b.n	8003e1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dbc:	4b33      	ldr	r3, [pc, #204]	; (8003e8c <xTaskResumeAll+0x11c>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff f87c 	bl	8002ec6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f877 	bl	8002ec6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <xTaskResumeAll+0x120>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <xTaskResumeAll+0x120>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <xTaskResumeAll+0x124>)
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7ff f803 	bl	8002e0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <xTaskResumeAll+0x128>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <xTaskResumeAll+0x12c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <xTaskResumeAll+0x11c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1cc      	bne.n	8003dbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e28:	f000 fb60 	bl	80044ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <xTaskResumeAll+0x130>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d010      	beq.n	8003e5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e38:	f000 f858 	bl	8003eec <xTaskIncrementTick>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e42:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <xTaskResumeAll+0x12c>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f1      	bne.n	8003e38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <xTaskResumeAll+0x130>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <xTaskResumeAll+0x12c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e62:	2301      	movs	r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <xTaskResumeAll+0x134>)
 8003e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e76:	f001 f96d 	bl	8005154 <vPortExitCritical>

	return xAlreadyYielded;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000948 	.word	0x20000948
 8003e88:	20000920 	.word	0x20000920
 8003e8c:	200008e0 	.word	0x200008e0
 8003e90:	20000928 	.word	0x20000928
 8003e94:	20000824 	.word	0x20000824
 8003e98:	20000820 	.word	0x20000820
 8003e9c:	20000934 	.word	0x20000934
 8003ea0:	20000930 	.word	0x20000930
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <xTaskGetTickCount+0x1c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003eb4:	687b      	ldr	r3, [r7, #4]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000924 	.word	0x20000924

08003ec8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ece:	f001 f9f3 	bl	80052b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003ed6:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <xTaskGetTickCountFromISR+0x20>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003edc:	683b      	ldr	r3, [r7, #0]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000924 	.word	0x20000924

08003eec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef6:	4b4e      	ldr	r3, [pc, #312]	; (8004030 <xTaskIncrementTick+0x144>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 808e 	bne.w	800401c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f00:	4b4c      	ldr	r3, [pc, #304]	; (8004034 <xTaskIncrementTick+0x148>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f08:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <xTaskIncrementTick+0x148>)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d120      	bne.n	8003f56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f14:	4b48      	ldr	r3, [pc, #288]	; (8004038 <xTaskIncrementTick+0x14c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	603b      	str	r3, [r7, #0]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <xTaskIncrementTick+0x46>
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <xTaskIncrementTick+0x14c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b40      	ldr	r3, [pc, #256]	; (800403c <xTaskIncrementTick+0x150>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a3e      	ldr	r2, [pc, #248]	; (8004038 <xTaskIncrementTick+0x14c>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4a3e      	ldr	r2, [pc, #248]	; (800403c <xTaskIncrementTick+0x150>)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <xTaskIncrementTick+0x154>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <xTaskIncrementTick+0x154>)
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	f000 facb 	bl	80044ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f56:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <xTaskIncrementTick+0x158>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d348      	bcc.n	8003ff2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f60:	4b35      	ldr	r3, [pc, #212]	; (8004038 <xTaskIncrementTick+0x14c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d104      	bne.n	8003f74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6a:	4b36      	ldr	r3, [pc, #216]	; (8004044 <xTaskIncrementTick+0x158>)
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f70:	601a      	str	r2, [r3, #0]
					break;
 8003f72:	e03e      	b.n	8003ff2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f74:	4b30      	ldr	r3, [pc, #192]	; (8004038 <xTaskIncrementTick+0x14c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d203      	bcs.n	8003f94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	; (8004044 <xTaskIncrementTick+0x158>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f92:	e02e      	b.n	8003ff2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe ff94 	bl	8002ec6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3318      	adds	r3, #24
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe ff8b 	bl	8002ec6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	4b23      	ldr	r3, [pc, #140]	; (8004048 <xTaskIncrementTick+0x15c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <xTaskIncrementTick+0x15c>)
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <xTaskIncrementTick+0x160>)
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fe ff17 	bl	8002e0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <xTaskIncrementTick+0x164>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d3b9      	bcc.n	8003f60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ff0:	e7b6      	b.n	8003f60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <xTaskIncrementTick+0x164>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4914      	ldr	r1, [pc, #80]	; (800404c <xTaskIncrementTick+0x160>)
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d901      	bls.n	800400e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800400a:	2301      	movs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <xTaskIncrementTick+0x168>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e004      	b.n	8004026 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <xTaskIncrementTick+0x16c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <xTaskIncrementTick+0x16c>)
 8004024:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000948 	.word	0x20000948
 8004034:	20000924 	.word	0x20000924
 8004038:	200008d8 	.word	0x200008d8
 800403c:	200008dc 	.word	0x200008dc
 8004040:	20000938 	.word	0x20000938
 8004044:	20000940 	.word	0x20000940
 8004048:	20000928 	.word	0x20000928
 800404c:	20000824 	.word	0x20000824
 8004050:	20000820 	.word	0x20000820
 8004054:	20000934 	.word	0x20000934
 8004058:	20000930 	.word	0x20000930

0800405c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <vTaskSwitchContext+0xa4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <vTaskSwitchContext+0xa8>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004070:	e03f      	b.n	80040f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <vTaskSwitchContext+0xa8>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004078:	4b23      	ldr	r3, [pc, #140]	; (8004108 <vTaskSwitchContext+0xac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004086:	7afb      	ldrb	r3, [r7, #11]
 8004088:	f1c3 031f 	rsb	r3, r3, #31
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	491f      	ldr	r1, [pc, #124]	; (800410c <vTaskSwitchContext+0xb0>)
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	607b      	str	r3, [r7, #4]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vTaskSwitchContext+0x5a>
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <vTaskSwitchContext+0xb0>)
 80040c4:	4413      	add	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3308      	adds	r3, #8
 80040da:	429a      	cmp	r2, r3
 80040dc:	d104      	bne.n	80040e8 <vTaskSwitchContext+0x8c>
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4a08      	ldr	r2, [pc, #32]	; (8004110 <vTaskSwitchContext+0xb4>)
 80040f0:	6013      	str	r3, [r2, #0]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000948 	.word	0x20000948
 8004104:	20000934 	.word	0x20000934
 8004108:	20000928 	.word	0x20000928
 800410c:	20000824 	.word	0x20000824
 8004110:	20000820 	.word	0x20000820

08004114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <vTaskPlaceOnEventList+0x44>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3318      	adds	r3, #24
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe fe86 	bl	8002e54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004148:	2101      	movs	r1, #1
 800414a:	6838      	ldr	r0, [r7, #0]
 800414c:	f000 fa92 	bl	8004674 <prvAddCurrentTaskToDelayedList>
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000820 	.word	0x20000820

0800415c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	617b      	str	r3, [r7, #20]
}
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3318      	adds	r3, #24
 800418a:	4619      	mov	r1, r3
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7fe fe3d 	bl	8002e0c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800419c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	68b8      	ldr	r0, [r7, #8]
 80041a2:	f000 fa67 	bl	8004674 <prvAddCurrentTaskToDelayedList>
	}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000820 	.word	0x20000820

080041b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	60fb      	str	r3, [r7, #12]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3318      	adds	r3, #24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fe6e 	bl	8002ec6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <xTaskRemoveFromEventList+0xac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11c      	bne.n	800422c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fe65 	bl	8002ec6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <xTaskRemoveFromEventList+0xb0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	4a16      	ldr	r2, [pc, #88]	; (8004264 <xTaskRemoveFromEventList+0xb0>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <xTaskRemoveFromEventList+0xb4>)
 800421c:	441a      	add	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe fdf1 	bl	8002e0c <vListInsertEnd>
 800422a:	e005      	b.n	8004238 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3318      	adds	r3, #24
 8004230:	4619      	mov	r1, r3
 8004232:	480e      	ldr	r0, [pc, #56]	; (800426c <xTaskRemoveFromEventList+0xb8>)
 8004234:	f7fe fdea 	bl	8002e0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <xTaskRemoveFromEventList+0xbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d905      	bls.n	8004252 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <xTaskRemoveFromEventList+0xc0>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e001      	b.n	8004256 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004256:	697b      	ldr	r3, [r7, #20]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000948 	.word	0x20000948
 8004264:	20000928 	.word	0x20000928
 8004268:	20000824 	.word	0x20000824
 800426c:	200008e0 	.word	0x200008e0
 8004270:	20000820 	.word	0x20000820
 8004274:	20000934 	.word	0x20000934

08004278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <vTaskInternalSetTimeOutState+0x24>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <vTaskInternalSetTimeOutState+0x28>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	605a      	str	r2, [r3, #4]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	20000938 	.word	0x20000938
 80042a0:	20000924 	.word	0x20000924

080042a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	613b      	str	r3, [r7, #16]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042e6:	f000 ff05 	bl	80050f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <xTaskCheckForTimeOut+0xbc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004302:	d102      	bne.n	800430a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e023      	b.n	8004352 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <xTaskCheckForTimeOut+0xc0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d007      	beq.n	8004326 <xTaskCheckForTimeOut+0x82>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	e015      	b.n	8004352 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	d20b      	bcs.n	8004348 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff9b 	bl	8004278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e004      	b.n	8004352 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800434e:	2301      	movs	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004352:	f000 feff 	bl	8005154 <vPortExitCritical>

	return xReturn;
 8004356:	69fb      	ldr	r3, [r7, #28]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000924 	.word	0x20000924
 8004364:	20000938 	.word	0x20000938

08004368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <vTaskMissedYield+0x14>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20000934 	.word	0x20000934

08004380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004388:	f000 f852 	bl	8004430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <prvIdleTask+0x28>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d9f9      	bls.n	8004388 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <prvIdleTask+0x2c>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043a4:	e7f0      	b.n	8004388 <prvIdleTask+0x8>
 80043a6:	bf00      	nop
 80043a8:	20000824 	.word	0x20000824
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e00c      	b.n	80043d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <prvInitialiseTaskLists+0x60>)
 80043c8:	4413      	add	r3, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fcf1 	bl	8002db2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3301      	adds	r3, #1
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d9ef      	bls.n	80043bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043dc:	480d      	ldr	r0, [pc, #52]	; (8004414 <prvInitialiseTaskLists+0x64>)
 80043de:	f7fe fce8 	bl	8002db2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043e2:	480d      	ldr	r0, [pc, #52]	; (8004418 <prvInitialiseTaskLists+0x68>)
 80043e4:	f7fe fce5 	bl	8002db2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043e8:	480c      	ldr	r0, [pc, #48]	; (800441c <prvInitialiseTaskLists+0x6c>)
 80043ea:	f7fe fce2 	bl	8002db2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043ee:	480c      	ldr	r0, [pc, #48]	; (8004420 <prvInitialiseTaskLists+0x70>)
 80043f0:	f7fe fcdf 	bl	8002db2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043f4:	480b      	ldr	r0, [pc, #44]	; (8004424 <prvInitialiseTaskLists+0x74>)
 80043f6:	f7fe fcdc 	bl	8002db2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <prvInitialiseTaskLists+0x78>)
 80043fc:	4a05      	ldr	r2, [pc, #20]	; (8004414 <prvInitialiseTaskLists+0x64>)
 80043fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <prvInitialiseTaskLists+0x7c>)
 8004402:	4a05      	ldr	r2, [pc, #20]	; (8004418 <prvInitialiseTaskLists+0x68>)
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000824 	.word	0x20000824
 8004414:	200008b0 	.word	0x200008b0
 8004418:	200008c4 	.word	0x200008c4
 800441c:	200008e0 	.word	0x200008e0
 8004420:	200008f4 	.word	0x200008f4
 8004424:	2000090c 	.word	0x2000090c
 8004428:	200008d8 	.word	0x200008d8
 800442c:	200008dc 	.word	0x200008dc

08004430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004436:	e019      	b.n	800446c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004438:	f000 fe5c 	bl	80050f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443c:	4b10      	ldr	r3, [pc, #64]	; (8004480 <prvCheckTasksWaitingTermination+0x50>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fd3c 	bl	8002ec6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <prvCheckTasksWaitingTermination+0x54>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3b01      	subs	r3, #1
 8004454:	4a0b      	ldr	r2, [pc, #44]	; (8004484 <prvCheckTasksWaitingTermination+0x54>)
 8004456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <prvCheckTasksWaitingTermination+0x58>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <prvCheckTasksWaitingTermination+0x58>)
 8004460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004462:	f000 fe77 	bl	8005154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f810 	bl	800448c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <prvCheckTasksWaitingTermination+0x58>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e1      	bne.n	8004438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200008f4 	.word	0x200008f4
 8004484:	20000920 	.word	0x20000920
 8004488:	20000908 	.word	0x20000908

0800448c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800449a:	2b00      	cmp	r3, #0
 800449c:	d108      	bne.n	80044b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 f814 	bl	80054d0 <vPortFree>
				vPortFree( pxTCB );
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f001 f811 	bl	80054d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044ae:	e018      	b.n	80044e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d103      	bne.n	80044c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f001 f808 	bl	80054d0 <vPortFree>
	}
 80044c0:	e00f      	b.n	80044e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d00a      	beq.n	80044e2 <prvDeleteTCB+0x56>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	60fb      	str	r3, [r7, #12]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <prvDeleteTCB+0x54>
	}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <prvResetNextTaskUnblockTime+0x38>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <prvResetNextTaskUnblockTime+0x3c>)
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004502:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004504:	e008      	b.n	8004518 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <prvResetNextTaskUnblockTime+0x38>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <prvResetNextTaskUnblockTime+0x3c>)
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	200008d8 	.word	0x200008d8
 8004528:	20000940 	.word	0x20000940

0800452c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <xTaskGetSchedulerState+0x34>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800453a:	2301      	movs	r3, #1
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	e008      	b.n	8004552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <xTaskGetSchedulerState+0x38>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004548:	2302      	movs	r3, #2
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	e001      	b.n	8004552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004552:	687b      	ldr	r3, [r7, #4]
	}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000092c 	.word	0x2000092c
 8004564:	20000948 	.word	0x20000948

08004568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d06e      	beq.n	800465c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <xTaskPriorityDisinherit+0x100>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d00a      	beq.n	800459e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	60fb      	str	r3, [r7, #12]
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60bb      	str	r3, [r7, #8]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d044      	beq.n	800465c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d140      	bne.n	800465c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fc71 	bl	8002ec6 <uxListRemove>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	491f      	ldr	r1, [pc, #124]	; (800466c <xTaskPriorityDisinherit+0x104>)
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xTaskPriorityDisinherit+0xae>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <xTaskPriorityDisinherit+0x108>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4013      	ands	r3, r2
 8004612:	4a17      	ldr	r2, [pc, #92]	; (8004670 <xTaskPriorityDisinherit+0x108>)
 8004614:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f1c3 0207 	rsb	r2, r3, #7
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	2201      	movs	r2, #1
 8004630:	409a      	lsls	r2, r3
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <xTaskPriorityDisinherit+0x108>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4313      	orrs	r3, r2
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <xTaskPriorityDisinherit+0x108>)
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4a08      	ldr	r2, [pc, #32]	; (800466c <xTaskPriorityDisinherit+0x104>)
 800464a:	441a      	add	r2, r3
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7fe fbda 	bl	8002e0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800465c:	697b      	ldr	r3, [r7, #20]
	}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000820 	.word	0x20000820
 800466c:	20000824 	.word	0x20000824
 8004670:	20000928 	.word	0x20000928

08004674 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004684:	4b28      	ldr	r3, [pc, #160]	; (8004728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fc1b 	bl	8002ec6 <uxListRemove>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	2201      	movs	r2, #1
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4013      	ands	r3, r2
 80046aa:	4a20      	ldr	r2, [pc, #128]	; (800472c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b4:	d10a      	bne.n	80046cc <prvAddCurrentTaskToDelayedList+0x58>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	481a      	ldr	r0, [pc, #104]	; (8004730 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046c6:	f7fe fba1 	bl	8002e0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046ca:	e026      	b.n	800471a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046d4:	4b14      	ldr	r3, [pc, #80]	; (8004728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d209      	bcs.n	80046f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fe fbaf 	bl	8002e54 <vListInsert>
}
 80046f6:	e010      	b.n	800471a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <prvAddCurrentTaskToDelayedList+0xc4>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fe fba5 	bl	8002e54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <prvAddCurrentTaskToDelayedList+0xc8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	429a      	cmp	r2, r3
 8004712:	d202      	bcs.n	800471a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004714:	4a09      	ldr	r2, [pc, #36]	; (800473c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6013      	str	r3, [r2, #0]
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000924 	.word	0x20000924
 8004728:	20000820 	.word	0x20000820
 800472c:	20000928 	.word	0x20000928
 8004730:	2000090c 	.word	0x2000090c
 8004734:	200008dc 	.word	0x200008dc
 8004738:	200008d8 	.word	0x200008d8
 800473c:	20000940 	.word	0x20000940

08004740 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800474a:	f000 fb47 	bl	8004ddc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <xTimerCreateTimerTask+0x80>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d021      	beq.n	800479a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800475e:	1d3a      	adds	r2, r7, #4
 8004760:	f107 0108 	add.w	r1, r7, #8
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	4618      	mov	r0, r3
 800476a:	f7fb fedd 	bl	8000528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	9202      	str	r2, [sp, #8]
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	2302      	movs	r3, #2
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	460a      	mov	r2, r1
 8004780:	4910      	ldr	r1, [pc, #64]	; (80047c4 <xTimerCreateTimerTask+0x84>)
 8004782:	4811      	ldr	r0, [pc, #68]	; (80047c8 <xTimerCreateTimerTask+0x88>)
 8004784:	f7ff f8ec 	bl	8003960 <xTaskCreateStatic>
 8004788:	4603      	mov	r3, r0
 800478a:	4a10      	ldr	r2, [pc, #64]	; (80047cc <xTimerCreateTimerTask+0x8c>)
 800478c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <xTimerCreateTimerTask+0x8c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	613b      	str	r3, [r7, #16]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047b6:	697b      	ldr	r3, [r7, #20]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	2000097c 	.word	0x2000097c
 80047c4:	08006498 	.word	0x08006498
 80047c8:	080049bd 	.word	0x080049bd
 80047cc:	20000980 	.word	0x20000980

080047d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80047de:	2028      	movs	r0, #40	; 0x28
 80047e0:	f000 fdaa 	bl	8005338 <pvPortMalloc>
 80047e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00d      	beq.n	8004808 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f805 	bl	8004812 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004808:	697b      	ldr	r3, [r7, #20]
	}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	617b      	str	r3, [r7, #20]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01e      	beq.n	8004880 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004842:	f000 facb 	bl	8004ddc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	3304      	adds	r3, #4
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fac5 	bl	8002df2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	b2da      	uxtb	r2, r3
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004880:	bf00      	nop
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	623b      	str	r3, [r7, #32]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <xTimerGenericCommand+0x98>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02a      	beq.n	8004914 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	dc18      	bgt.n	8004902 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048d0:	f7ff fe2c 	bl	800452c <xTaskGetSchedulerState>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d109      	bne.n	80048ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <xTimerGenericCommand+0x98>)
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f107 0114 	add.w	r1, r7, #20
 80048e2:	2300      	movs	r3, #0
 80048e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e6:	f7fe fc53 	bl	8003190 <xQueueGenericSend>
 80048ea:	6278      	str	r0, [r7, #36]	; 0x24
 80048ec:	e012      	b.n	8004914 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <xTimerGenericCommand+0x98>)
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	f107 0114 	add.w	r1, r7, #20
 80048f6:	2300      	movs	r3, #0
 80048f8:	2200      	movs	r2, #0
 80048fa:	f7fe fc49 	bl	8003190 <xQueueGenericSend>
 80048fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004900:	e008      	b.n	8004914 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004902:	4b07      	ldr	r3, [pc, #28]	; (8004920 <xTimerGenericCommand+0x98>)
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	f107 0114 	add.w	r1, r7, #20
 800490a:	2300      	movs	r3, #0
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	f7fe fd3d 	bl	800338c <xQueueGenericSendFromISR>
 8004912:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004916:	4618      	mov	r0, r3
 8004918:	3728      	adds	r7, #40	; 0x28
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	2000097c 	.word	0x2000097c

08004924 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800492e:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <prvProcessExpiredTimer+0x94>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe fac2 	bl	8002ec6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d022      	beq.n	8004996 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	18d1      	adds	r1, r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	6978      	ldr	r0, [r7, #20]
 800495e:	f000 f8d1 	bl	8004b04 <prvInsertTimerInActiveList>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01f      	beq.n	80049a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004968:	2300      	movs	r3, #0
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	2300      	movs	r3, #0
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	2100      	movs	r1, #0
 8004972:	6978      	ldr	r0, [r7, #20]
 8004974:	f7ff ff88 	bl	8004888 <xTimerGenericCommand>
 8004978:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d113      	bne.n	80049a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	6978      	ldr	r0, [r7, #20]
 80049ae:	4798      	blx	r3
}
 80049b0:	bf00      	nop
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000974 	.word	0x20000974

080049bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f857 	bl	8004a7c <prvGetNextExpireTime>
 80049ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4619      	mov	r1, r3
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f803 	bl	80049e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049da:	f000 f8d5 	bl	8004b88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049de:	e7f1      	b.n	80049c4 <prvTimerTask+0x8>

080049e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049ea:	f7ff f9b3 	bl	8003d54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f866 	bl	8004ac4 <prvSampleTimeNow>
 80049f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d130      	bne.n	8004a62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <prvProcessTimerOrBlockTask+0x3c>
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d806      	bhi.n	8004a1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a0e:	f7ff f9af 	bl	8003d70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff85 	bl	8004924 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a1a:	e024      	b.n	8004a66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <prvProcessTimerOrBlockTask+0x90>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <prvProcessTimerOrBlockTask+0x50>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <prvProcessTimerOrBlockTask+0x52>
 8004a30:	2300      	movs	r3, #0
 8004a32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <prvProcessTimerOrBlockTask+0x94>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f7fe ff59 	bl	80038f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a46:	f7ff f993 	bl	8003d70 <xTaskResumeAll>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <prvProcessTimerOrBlockTask+0x98>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
}
 8004a60:	e001      	b.n	8004a66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a62:	f7ff f985 	bl	8003d70 <xTaskResumeAll>
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000978 	.word	0x20000978
 8004a74:	2000097c 	.word	0x2000097c
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <prvGetNextExpireTime+0x44>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <prvGetNextExpireTime+0x16>
 8004a8e:	2201      	movs	r2, #1
 8004a90:	e000      	b.n	8004a94 <prvGetNextExpireTime+0x18>
 8004a92:	2200      	movs	r2, #0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <prvGetNextExpireTime+0x44>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e001      	b.n	8004ab0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000974 	.word	0x20000974

08004ac4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004acc:	f7ff f9ec 	bl	8003ea8 <xTaskGetTickCount>
 8004ad0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <prvSampleTimeNow+0x3c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d205      	bcs.n	8004ae8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004adc:	f000 f91a 	bl	8004d14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e002      	b.n	8004aee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <prvSampleTimeNow+0x3c>)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004af4:	68fb      	ldr	r3, [r7, #12]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000984 	.word	0x20000984

08004b04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d812      	bhi.n	8004b50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e01b      	b.n	8004b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <prvInsertTimerInActiveList+0x7c>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7fe f983 	bl	8002e54 <vListInsert>
 8004b4e:	e012      	b.n	8004b76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d206      	bcs.n	8004b66 <prvInsertTimerInActiveList+0x62>
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	e007      	b.n	8004b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <prvInsertTimerInActiveList+0x80>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7fe f96f 	bl	8002e54 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b76:	697b      	ldr	r3, [r7, #20]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000978 	.word	0x20000978
 8004b84:	20000974 	.word	0x20000974

08004b88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08c      	sub	sp, #48	; 0x30
 8004b8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b8e:	e0ae      	b.n	8004cee <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f2c0 80aa 	blt.w	8004cec <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe f98c 	bl	8002ec6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff ff87 	bl	8004ac4 <prvSampleTimeNow>
 8004bb6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b09      	cmp	r3, #9
 8004bbc:	f200 8097 	bhi.w	8004cee <prvProcessReceivedCommands+0x166>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <prvProcessReceivedCommands+0x40>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004c65 	.word	0x08004c65
 8004bd8:	08004c79 	.word	0x08004c79
 8004bdc:	08004cc3 	.word	0x08004cc3
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004bf1 	.word	0x08004bf1
 8004be8:	08004c65 	.word	0x08004c65
 8004bec:	08004c79 	.word	0x08004c79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	18d1      	adds	r1, r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c10:	f7ff ff78 	bl	8004b04 <prvInsertTimerInActiveList>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d069      	beq.n	8004cee <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05e      	beq.n	8004cee <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	441a      	add	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c42:	f7ff fe21 	bl	8004888 <xTimerGenericCommand>
 8004c46:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d14f      	bne.n	8004cee <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61bb      	str	r3, [r7, #24]
}
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004c76:	e03a      	b.n	8004cee <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	617b      	str	r3, [r7, #20]
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	18d1      	adds	r1, r2, r3
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cbc:	f7ff ff22 	bl	8004b04 <prvInsertTimerInActiveList>
					break;
 8004cc0:	e015      	b.n	8004cee <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cd2:	f000 fbfd 	bl	80054d0 <vPortFree>
 8004cd6:	e00a      	b.n	8004cee <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cea:	e000      	b.n	8004cee <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004cec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cee:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <prvProcessReceivedCommands+0x188>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f107 0108 	add.w	r1, r7, #8
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fbe3 	bl	80034c4 <xQueueReceive>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f47f af45 	bne.w	8004b90 <prvProcessReceivedCommands+0x8>
	}
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	3728      	adds	r7, #40	; 0x28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	2000097c 	.word	0x2000097c

08004d14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d1a:	e048      	b.n	8004dae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d1c:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <prvSwitchTimerLists+0xc0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d26:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <prvSwitchTimerLists+0xc0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe f8c6 	bl	8002ec6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d02e      	beq.n	8004dae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d90e      	bls.n	8004d80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <prvSwitchTimerLists+0xc0>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7fe f86b 	bl	8002e54 <vListInsert>
 8004d7e:	e016      	b.n	8004dae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d80:	2300      	movs	r3, #0
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	2300      	movs	r3, #0
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	2100      	movs	r1, #0
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff fd7c 	bl	8004888 <xTimerGenericCommand>
 8004d90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	603b      	str	r3, [r7, #0]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <prvSwitchTimerLists+0xc0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1b1      	bne.n	8004d1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <prvSwitchTimerLists+0xc0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <prvSwitchTimerLists+0xc4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <prvSwitchTimerLists+0xc0>)
 8004dc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dc6:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <prvSwitchTimerLists+0xc4>)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6013      	str	r3, [r2, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000974 	.word	0x20000974
 8004dd8:	20000978 	.word	0x20000978

08004ddc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004de2:	f000 f987 	bl	80050f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004de6:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <prvCheckForValidListAndQueue+0x60>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d120      	bne.n	8004e30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dee:	4814      	ldr	r0, [pc, #80]	; (8004e40 <prvCheckForValidListAndQueue+0x64>)
 8004df0:	f7fd ffdf 	bl	8002db2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004df4:	4813      	ldr	r0, [pc, #76]	; (8004e44 <prvCheckForValidListAndQueue+0x68>)
 8004df6:	f7fd ffdc 	bl	8002db2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <prvCheckForValidListAndQueue+0x6c>)
 8004dfc:	4a10      	ldr	r2, [pc, #64]	; (8004e40 <prvCheckForValidListAndQueue+0x64>)
 8004dfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <prvCheckForValidListAndQueue+0x70>)
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <prvCheckForValidListAndQueue+0x68>)
 8004e04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e06:	2300      	movs	r3, #0
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <prvCheckForValidListAndQueue+0x74>)
 8004e0c:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <prvCheckForValidListAndQueue+0x78>)
 8004e0e:	210c      	movs	r1, #12
 8004e10:	200a      	movs	r0, #10
 8004e12:	f7fe f8eb 	bl	8002fec <xQueueGenericCreateStatic>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <prvCheckForValidListAndQueue+0x60>)
 8004e1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <prvCheckForValidListAndQueue+0x60>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <prvCheckForValidListAndQueue+0x60>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	490b      	ldr	r1, [pc, #44]	; (8004e58 <prvCheckForValidListAndQueue+0x7c>)
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fd3a 	bl	80038a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e30:	f000 f990 	bl	8005154 <vPortExitCritical>
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	2000097c 	.word	0x2000097c
 8004e40:	2000094c 	.word	0x2000094c
 8004e44:	20000960 	.word	0x20000960
 8004e48:	20000974 	.word	0x20000974
 8004e4c:	20000978 	.word	0x20000978
 8004e50:	20000a00 	.word	0x20000a00
 8004e54:	20000988 	.word	0x20000988
 8004e58:	080064a0 	.word	0x080064a0

08004e5c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <pvTimerGetTimerID+0x28>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60fb      	str	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8004e84:	f000 f936 	bl	80050f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004e8e:	f000 f961 	bl	8005154 <vPortExitCritical>

	return pvReturn;
 8004e92:	693b      	ldr	r3, [r7, #16]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b04      	subs	r3, #4
 8004eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3b04      	subs	r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ecc:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <pxPortInitialiseStack+0x64>)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b14      	subs	r3, #20
 8004ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b04      	subs	r3, #4
 8004ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f06f 0202 	mvn.w	r2, #2
 8004eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3b20      	subs	r3, #32
 8004ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	08004f05 	.word	0x08004f05

08004f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <prvTaskExitError+0x54>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f16:	d00a      	beq.n	8004f2e <prvTaskExitError+0x2a>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60fb      	str	r3, [r7, #12]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <prvTaskExitError+0x28>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60bb      	str	r3, [r7, #8]
}
 8004f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f42:	bf00      	nop
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0fc      	beq.n	8004f44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	2000000c 	.word	0x2000000c
 8004f5c:	00000000 	.word	0x00000000

08004f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <pxCurrentTCBConst2>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	6808      	ldr	r0, [r1, #0]
 8004f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6a:	f380 8809 	msr	PSP, r0
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8811 	msr	BASEPRI, r0
 8004f7a:	4770      	bx	lr
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst2>:
 8004f80:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f88:	4808      	ldr	r0, [pc, #32]	; (8004fac <prvPortStartFirstTask+0x24>)
 8004f8a:	6800      	ldr	r0, [r0, #0]
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f380 8808 	msr	MSP, r0
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8814 	msr	CONTROL, r0
 8004f9a:	b662      	cpsie	i
 8004f9c:	b661      	cpsie	f
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	df00      	svc	0
 8004fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004faa:	bf00      	nop
 8004fac:	e000ed08 	.word	0xe000ed08

08004fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fb6:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <xPortStartScheduler+0x120>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a46      	ldr	r2, [pc, #280]	; (80050d4 <xPortStartScheduler+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10a      	bne.n	8004fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	613b      	str	r3, [r7, #16]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fd6:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <xPortStartScheduler+0x120>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3f      	ldr	r2, [pc, #252]	; (80050d8 <xPortStartScheduler+0x128>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10a      	bne.n	8004ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60fb      	str	r3, [r7, #12]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ff6:	4b39      	ldr	r3, [pc, #228]	; (80050dc <xPortStartScheduler+0x12c>)
 8004ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	22ff      	movs	r2, #255	; 0xff
 8005006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005018:	b2da      	uxtb	r2, r3
 800501a:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <xPortStartScheduler+0x130>)
 800501c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <xPortStartScheduler+0x134>)
 8005020:	2207      	movs	r2, #7
 8005022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005024:	e009      	b.n	800503a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005026:	4b2f      	ldr	r3, [pc, #188]	; (80050e4 <xPortStartScheduler+0x134>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	4a2d      	ldr	r2, [pc, #180]	; (80050e4 <xPortStartScheduler+0x134>)
 800502e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d0ef      	beq.n	8005026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005046:	4b27      	ldr	r3, [pc, #156]	; (80050e4 <xPortStartScheduler+0x134>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1c3 0307 	rsb	r3, r3, #7
 800504e:	2b04      	cmp	r3, #4
 8005050:	d00a      	beq.n	8005068 <xPortStartScheduler+0xb8>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60bb      	str	r3, [r7, #8]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005068:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <xPortStartScheduler+0x134>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <xPortStartScheduler+0x134>)
 8005070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <xPortStartScheduler+0x134>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800507a:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <xPortStartScheduler+0x134>)
 800507c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <xPortStartScheduler+0x138>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <xPortStartScheduler+0x138>)
 800508c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005092:	4b15      	ldr	r3, [pc, #84]	; (80050e8 <xPortStartScheduler+0x138>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <xPortStartScheduler+0x138>)
 8005098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800509c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800509e:	f000 f8dd 	bl	800525c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <xPortStartScheduler+0x13c>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050a8:	f000 f8fc 	bl	80052a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <xPortStartScheduler+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0f      	ldr	r2, [pc, #60]	; (80050f0 <xPortStartScheduler+0x140>)
 80050b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050b8:	f7ff ff66 	bl	8004f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050bc:	f7fe ffce 	bl	800405c <vTaskSwitchContext>
	prvTaskExitError();
 80050c0:	f7ff ff20 	bl	8004f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	e000ed00 	.word	0xe000ed00
 80050d4:	410fc271 	.word	0x410fc271
 80050d8:	410fc270 	.word	0x410fc270
 80050dc:	e000e400 	.word	0xe000e400
 80050e0:	20000a48 	.word	0x20000a48
 80050e4:	20000a4c 	.word	0x20000a4c
 80050e8:	e000ed20 	.word	0xe000ed20
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	e000ef34 	.word	0xe000ef34

080050f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	607b      	str	r3, [r7, #4]
}
 800510c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <vPortEnterCritical+0x58>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3301      	adds	r3, #1
 8005114:	4a0d      	ldr	r2, [pc, #52]	; (800514c <vPortEnterCritical+0x58>)
 8005116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <vPortEnterCritical+0x58>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d10f      	bne.n	8005140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <vPortEnterCritical+0x5c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <vPortEnterCritical+0x4c>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	603b      	str	r3, [r7, #0]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <vPortEnterCritical+0x4a>
	}
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	2000000c 	.word	0x2000000c
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <vPortExitCritical+0x50>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <vPortExitCritical+0x24>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	607b      	str	r3, [r7, #4]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <vPortExitCritical+0x50>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3b01      	subs	r3, #1
 800517e:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <vPortExitCritical+0x50>)
 8005180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <vPortExitCritical+0x50>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d105      	bne.n	8005196 <vPortExitCritical+0x42>
 800518a:	2300      	movs	r3, #0
 800518c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f383 8811 	msr	BASEPRI, r3
}
 8005194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	2000000c 	.word	0x2000000c
	...

080051b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051b0:	f3ef 8009 	mrs	r0, PSP
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <pxCurrentTCBConst>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	f01e 0f10 	tst.w	lr, #16
 80051c0:	bf08      	it	eq
 80051c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ca:	6010      	str	r0, [r2, #0]
 80051cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051d4:	f380 8811 	msr	BASEPRI, r0
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f7fe ff3c 	bl	800405c <vTaskSwitchContext>
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f380 8811 	msr	BASEPRI, r0
 80051ec:	bc09      	pop	{r0, r3}
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	6808      	ldr	r0, [r1, #0]
 80051f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f6:	f01e 0f10 	tst.w	lr, #16
 80051fa:	bf08      	it	eq
 80051fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005200:	f380 8809 	msr	PSP, r0
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w

08005210 <pxCurrentTCBConst>:
 8005210:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005232:	f7fe fe5b 	bl	8003eec <xTaskIncrementTick>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <xPortSysTickHandler+0x40>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f383 8811 	msr	BASEPRI, r3
}
 800524e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <vPortSetupTimerInterrupt+0x34>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <vPortSetupTimerInterrupt+0x38>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <vPortSetupTimerInterrupt+0x3c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0a      	ldr	r2, [pc, #40]	; (800529c <vPortSetupTimerInterrupt+0x40>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <vPortSetupTimerInterrupt+0x44>)
 800527a:	3b01      	subs	r3, #1
 800527c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800527e:	4b04      	ldr	r3, [pc, #16]	; (8005290 <vPortSetupTimerInterrupt+0x34>)
 8005280:	2207      	movs	r2, #7
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	e000e010 	.word	0xe000e010
 8005294:	e000e018 	.word	0xe000e018
 8005298:	20000000 	.word	0x20000000
 800529c:	10624dd3 	.word	0x10624dd3
 80052a0:	e000e014 	.word	0xe000e014

080052a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052b4 <vPortEnableVFP+0x10>
 80052a8:	6801      	ldr	r1, [r0, #0]
 80052aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ae:	6001      	str	r1, [r0, #0]
 80052b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052b2:	bf00      	nop
 80052b4:	e000ed88 	.word	0xe000ed88

080052b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052be:	f3ef 8305 	mrs	r3, IPSR
 80052c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b0f      	cmp	r3, #15
 80052c8:	d914      	bls.n	80052f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052ca:	4a17      	ldr	r2, [pc, #92]	; (8005328 <vPortValidateInterruptPriority+0x70>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052d4:	4b15      	ldr	r3, [pc, #84]	; (800532c <vPortValidateInterruptPriority+0x74>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	7afa      	ldrb	r2, [r7, #11]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d20a      	bcs.n	80052f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <vPortValidateInterruptPriority+0x78>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <vPortValidateInterruptPriority+0x7c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d90a      	bls.n	800531a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	603b      	str	r3, [r7, #0]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <vPortValidateInterruptPriority+0x60>
	}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000e3f0 	.word	0xe000e3f0
 800532c:	20000a48 	.word	0x20000a48
 8005330:	e000ed0c 	.word	0xe000ed0c
 8005334:	20000a4c 	.word	0x20000a4c

08005338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005344:	f7fe fd06 	bl	8003d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005348:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <pvPortMalloc+0x180>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005350:	f000 f920 	bl	8005594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005354:	4b59      	ldr	r3, [pc, #356]	; (80054bc <pvPortMalloc+0x184>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 8093 	bne.w	8005488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01d      	beq.n	80053a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005368:	2208      	movs	r2, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d014      	beq.n	80053a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f023 0307 	bic.w	r3, r3, #7
 8005380:	3308      	adds	r3, #8
 8005382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <pvPortMalloc+0x6c>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	617b      	str	r3, [r7, #20]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d06e      	beq.n	8005488 <pvPortMalloc+0x150>
 80053aa:	4b45      	ldr	r3, [pc, #276]	; (80054c0 <pvPortMalloc+0x188>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d869      	bhi.n	8005488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053b4:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <pvPortMalloc+0x18c>)
 80053b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053b8:	4b42      	ldr	r3, [pc, #264]	; (80054c4 <pvPortMalloc+0x18c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053be:	e004      	b.n	80053ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d903      	bls.n	80053dc <pvPortMalloc+0xa4>
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f1      	bne.n	80053c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053dc:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <pvPortMalloc+0x180>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d050      	beq.n	8005488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2208      	movs	r2, #8
 80053ec:	4413      	add	r3, r2
 80053ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	2308      	movs	r3, #8
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	429a      	cmp	r2, r3
 8005406:	d91f      	bls.n	8005448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <pvPortMalloc+0xf8>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	613b      	str	r3, [r7, #16]
}
 800542c:	bf00      	nop
 800542e:	e7fe      	b.n	800542e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005442:	69b8      	ldr	r0, [r7, #24]
 8005444:	f000 f908 	bl	8005658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <pvPortMalloc+0x188>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <pvPortMalloc+0x188>)
 8005454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005456:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <pvPortMalloc+0x188>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <pvPortMalloc+0x190>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d203      	bcs.n	800546a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005462:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <pvPortMalloc+0x188>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <pvPortMalloc+0x190>)
 8005468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <pvPortMalloc+0x184>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	431a      	orrs	r2, r3
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <pvPortMalloc+0x194>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	4a11      	ldr	r2, [pc, #68]	; (80054cc <pvPortMalloc+0x194>)
 8005486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005488:	f7fe fc72 	bl	8003d70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <pvPortMalloc+0x174>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	60fb      	str	r3, [r7, #12]
}
 80054a8:	bf00      	nop
 80054aa:	e7fe      	b.n	80054aa <pvPortMalloc+0x172>
	return pvReturn;
 80054ac:	69fb      	ldr	r3, [r7, #28]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3728      	adds	r7, #40	; 0x28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20004658 	.word	0x20004658
 80054bc:	2000466c 	.word	0x2000466c
 80054c0:	2000465c 	.word	0x2000465c
 80054c4:	20004650 	.word	0x20004650
 80054c8:	20004660 	.word	0x20004660
 80054cc:	20004664 	.word	0x20004664

080054d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d04d      	beq.n	800557e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054e2:	2308      	movs	r3, #8
 80054e4:	425b      	negs	r3, r3
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	4b24      	ldr	r3, [pc, #144]	; (8005588 <vPortFree+0xb8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <vPortFree+0x44>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60fb      	str	r3, [r7, #12]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <vPortFree+0x62>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60bb      	str	r3, [r7, #8]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <vPortFree+0xb8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01e      	beq.n	800557e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11a      	bne.n	800557e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <vPortFree+0xb8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	43db      	mvns	r3, r3
 8005552:	401a      	ands	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005558:	f7fe fbfc 	bl	8003d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <vPortFree+0xbc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4413      	add	r3, r2
 8005566:	4a09      	ldr	r2, [pc, #36]	; (800558c <vPortFree+0xbc>)
 8005568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800556a:	6938      	ldr	r0, [r7, #16]
 800556c:	f000 f874 	bl	8005658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <vPortFree+0xc0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3301      	adds	r3, #1
 8005576:	4a06      	ldr	r2, [pc, #24]	; (8005590 <vPortFree+0xc0>)
 8005578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800557a:	f7fe fbf9 	bl	8003d70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800557e:	bf00      	nop
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	2000466c 	.word	0x2000466c
 800558c:	2000465c 	.word	0x2000465c
 8005590:	20004668 	.word	0x20004668

08005594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800559a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800559e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055a0:	4b27      	ldr	r3, [pc, #156]	; (8005640 <prvHeapInit+0xac>)
 80055a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3307      	adds	r3, #7
 80055b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0307 	bic.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <prvHeapInit+0xac>)
 80055c4:	4413      	add	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055cc:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <prvHeapInit+0xb0>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055d2:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <prvHeapInit+0xb0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4413      	add	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055e0:	2208      	movs	r2, #8
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a15      	ldr	r2, [pc, #84]	; (8005648 <prvHeapInit+0xb4>)
 80055f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <prvHeapInit+0xb4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055fe:	4b12      	ldr	r3, [pc, #72]	; (8005648 <prvHeapInit+0xb4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <prvHeapInit+0xb4>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a0a      	ldr	r2, [pc, #40]	; (800564c <prvHeapInit+0xb8>)
 8005622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a09      	ldr	r2, [pc, #36]	; (8005650 <prvHeapInit+0xbc>)
 800562a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <prvHeapInit+0xc0>)
 800562e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000a50 	.word	0x20000a50
 8005644:	20004650 	.word	0x20004650
 8005648:	20004658 	.word	0x20004658
 800564c:	20004660 	.word	0x20004660
 8005650:	2000465c 	.word	0x2000465c
 8005654:	2000466c 	.word	0x2000466c

08005658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005660:	4b28      	ldr	r3, [pc, #160]	; (8005704 <prvInsertBlockIntoFreeList+0xac>)
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e002      	b.n	800566c <prvInsertBlockIntoFreeList+0x14>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d8f7      	bhi.n	8005666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	4413      	add	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d108      	bne.n	800569a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	441a      	add	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	441a      	add	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d118      	bne.n	80056e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <prvInsertBlockIntoFreeList+0xb0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d00d      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	441a      	add	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	e008      	b.n	80056e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <prvInsertBlockIntoFreeList+0xb0>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e003      	b.n	80056e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d002      	beq.n	80056f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20004650 	.word	0x20004650
 8005708:	20004658 	.word	0x20004658

0800570c <task_c2_out>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

static void task_c2_out(void *p_parameter)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  while (true)
  {
	  void *message;
	  xQueueReceive(frame.c2_queue_out, &message, portMAX_DELAY);
 8005714:	4b18      	ldr	r3, [pc, #96]	; (8005778 <task_c2_out+0x6c>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f107 0108 	add.w	r1, r7, #8
 800571c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005720:	4618      	mov	r0, r3
 8005722:	f7fd fecf 	bl	80034c4 <xQueueReceive>

	 package = (ts_package *)message;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <task_c2_out+0x70>)
 800572a:	6013      	str	r3, [r2, #0]
	  uint8_t data = calculate_crc(package->buffer, package->count_buffer);
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <task_c2_out+0x70>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <task_c2_out+0x70>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	791b      	ldrb	r3, [r3, #4]
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 f9e2 	bl	8005b04 <calculate_crc>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]
      convert_uint_to_ascii(package->buffer+package->count_buffer-3, data);
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <task_c2_out+0x70>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <task_c2_out+0x70>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	791b      	ldrb	r3, [r3, #4]
 8005750:	3b03      	subs	r3, #3
 8005752:	4413      	add	r3, r2
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fa25 	bl	8005ba8 <convert_uint_to_ascii>

      HAL_UART_Transmit_IT(&huart3, package->buffer, package->count_buffer);
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <task_c2_out+0x70>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <task_c2_out+0x70>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	791b      	ldrb	r3, [r3, #4]
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	4804      	ldr	r0, [pc, #16]	; (8005780 <task_c2_out+0x74>)
 8005770:	f7fc fbb3 	bl	8001eda <HAL_UART_Transmit_IT>
  {
 8005774:	e7ce      	b.n	8005714 <task_c2_out+0x8>
 8005776:	bf00      	nop
 8005778:	20004670 	.word	0x20004670
 800577c:	20004698 	.word	0x20004698
 8005780:	2000078c 	.word	0x2000078c

08005784 <task_c3>:
  }
}

static void task_c3(void *p_parameter)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  while (true)
  {
	  void *message;
	  xQueueReceive(frame.c2_queue, &message, portMAX_DELAY);
 800578c:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <task_c3+0x64>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f107 010c 	add.w	r1, r7, #12
 8005794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005798:	4618      	mov	r0, r3
 800579a:	f7fd fe93 	bl	80034c4 <xQueueReceive>

	  ts_package *package = (ts_package *)message;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	60bb      	str	r3, [r7, #8]
	  switch ( validate_data(package)) {
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 faf3 	bl	8005d90 <validate_data>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <task_c3+0x32>
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d006      	beq.n	80057c2 <task_c3+0x3e>
			break;
		case ERROR_INVALID_OPCODE:
			trama_error(package,ERROR_INVALID_OPCODE);
			break;
		default:
			break;
 80057b4:	e00b      	b.n	80057ce <task_c3+0x4a>
			trama_error(package,ERROR_INVALID_DATA);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fc90 	bl	80060e0 <trama_error>
			break;
 80057c0:	e005      	b.n	80057ce <task_c3+0x4a>
			trama_error(package,ERROR_INVALID_OPCODE);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2101      	movs	r1, #1
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fc8a 	bl	80060e0 <trama_error>
			break;
 80057cc:	bf00      	nop
	}
	  process_package(package);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fc60 	bl	8006096 <process_package>
	  xQueueSend(frame.c2_queue_out, &package, 0);
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <task_c3+0x64>)
 80057d8:	68d8      	ldr	r0, [r3, #12]
 80057da:	f107 0108 	add.w	r1, r7, #8
 80057de:	2300      	movs	r3, #0
 80057e0:	2200      	movs	r2, #0
 80057e2:	f7fd fcd5 	bl	8003190 <xQueueGenericSend>
  {
 80057e6:	e7d1      	b.n	800578c <task_c3+0x8>
 80057e8:	20004670 	.word	0x20004670

080057ec <application>:
  }
}

int application(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af02      	add	r7, sp, #8
  BaseType_t res;

  res = xTaskCreate(task_c3, (const char*)"task_c3", configMINIMAL_STACK_SIZE * 2, NULL,tskIDLE_PRIORITY + 1, NULL);
 80057f2:	2300      	movs	r3, #0
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	2301      	movs	r3, #1
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	2300      	movs	r3, #0
 80057fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005800:	4919      	ldr	r1, [pc, #100]	; (8005868 <application+0x7c>)
 8005802:	481a      	ldr	r0, [pc, #104]	; (800586c <application+0x80>)
 8005804:	f7fe f909 	bl	8003a1a <xTaskCreate>
 8005808:	60f8      	str	r0, [r7, #12]
  configASSERT(res == pdPASS);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d00a      	beq.n	8005826 <application+0x3a>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60bb      	str	r3, [r7, #8]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <application+0x38>

  res = xTaskCreate(task_c2_out, (const char*)"task_c2_out", configMINIMAL_STACK_SIZE * 2, NULL,tskIDLE_PRIORITY + 1, NULL);
 8005826:	2300      	movs	r3, #0
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	2301      	movs	r3, #1
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2300      	movs	r3, #0
 8005830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005834:	490e      	ldr	r1, [pc, #56]	; (8005870 <application+0x84>)
 8005836:	480f      	ldr	r0, [pc, #60]	; (8005874 <application+0x88>)
 8005838:	f7fe f8ef 	bl	8003a1a <xTaskCreate>
 800583c:	60f8      	str	r0, [r7, #12]
  configASSERT(res == pdPASS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d00a      	beq.n	800585a <application+0x6e>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	607b      	str	r3, [r7, #4]
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <application+0x6c>

  frame_init(&frame);
 800585a:	4807      	ldr	r0, [pc, #28]	; (8005878 <application+0x8c>)
 800585c:	f000 f834 	bl	80058c8 <frame_init>
  osKernelStart();
 8005860:	f7fd faa0 	bl	8002da4 <osKernelStart>

  while (1)
 8005864:	e7fe      	b.n	8005864 <application+0x78>
 8005866:	bf00      	nop
 8005868:	080064a8 	.word	0x080064a8
 800586c:	08005785 	.word	0x08005785
 8005870:	080064b0 	.word	0x080064b0
 8005874:	0800570d 	.word	0x0800570d
 8005878:	20004670 	.word	0x20004670

0800587c <HAL_UART_TxCpltCallback>:
  }
  return 1;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	if (huart==&huart3)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a06      	ldr	r2, [pc, #24]	; (80058a0 <HAL_UART_TxCpltCallback+0x24>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d105      	bne.n	8005898 <HAL_UART_TxCpltCallback+0x1c>
	{
	      free(package->buffer);
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_UART_TxCpltCallback+0x28>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fcba 	bl	800620c <free>
	}
	if (huart==&huart2)
	{

	}
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	2000078c 	.word	0x2000078c
 80058a4:	20004698 	.word	0x20004698

080058a8 <timer_call_back>:
#include "c2_frame.h"
#include "c2_parser.h"
#include "package.h"

void timer_call_back(TimerHandle_t timer)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	ts_frame *frame=(ts_frame*) pvTimerGetTimerID(timer);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fad3 	bl	8004e5c <pvTimerGetTimerID>
 80058b6:	60f8      	str	r0, [r7, #12]
	frame->count_buffer=0;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	71da      	strb	r2, [r3, #7]
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <frame_init>:

void frame_init(ts_frame *self)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
    frame_reset(self);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f823 	bl	800591c <frame_reset>
    self->c2_queue = xQueueCreate((unsigned portBASE_TYPE) 1, sizeof(void*));
 80058d6:	2200      	movs	r2, #0
 80058d8:	2104      	movs	r1, #4
 80058da:	2001      	movs	r0, #1
 80058dc:	f7fd fbfe 	bl	80030dc <xQueueGenericCreate>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	609a      	str	r2, [r3, #8]
    self->c2_queue_out = xQueueCreate((unsigned portBASE_TYPE) 1, sizeof(void*));
 80058e6:	2200      	movs	r2, #0
 80058e8:	2104      	movs	r1, #4
 80058ea:	2001      	movs	r0, #1
 80058ec:	f7fd fbf6 	bl	80030dc <xQueueGenericCreate>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60da      	str	r2, [r3, #12]
    self->timer = xTimerCreate("Timerx", 4,  pdFALSE, (void*)self, timer_call_back);
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <frame_init+0x4c>)
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2104      	movs	r1, #4
 8005900:	4805      	ldr	r0, [pc, #20]	; (8005918 <frame_init+0x50>)
 8005902:	f7fe ff65 	bl	80047d0 <xTimerCreate>
 8005906:	4602      	mov	r2, r0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	611a      	str	r2, [r3, #16]
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	080058a9 	.word	0x080058a9
 8005918:	080064bc 	.word	0x080064bc

0800591c <frame_reset>:

void frame_reset(ts_frame *self)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    self->buffer =malloc(sizeof(uint8_t)*BUFFER_MAX_SIZE);
 8005924:	20c8      	movs	r0, #200	; 0xc8
 8005926:	f000 fc69 	bl	80061fc <malloc>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	601a      	str	r2, [r3, #0]
    self->state_frame = SOM;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	719a      	strb	r2, [r3, #6]
    self->count_buffer = 0;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	71da      	strb	r2, [r3, #7]
}
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <frame_process>:

void frame_process(ts_frame *self, uint8_t byte)
{
 8005946:	b590      	push	{r4, r7, lr}
 8005948:	b08d      	sub	sp, #52	; 0x34
 800594a:	af02      	add	r7, sp, #8
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	460b      	mov	r3, r1
 8005950:	70fb      	strb	r3, [r7, #3]
    switch (self->state_frame)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	799b      	ldrb	r3, [r3, #6]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <frame_process+0x1a>
 800595a:	2b01      	cmp	r3, #1
 800595c:	d021      	beq.n	80059a2 <frame_process+0x5c>
            }
            xTimerStartFromISR(self->timer,0);
        }
        break;
    default:
        break;
 800595e:	e0cd      	b.n	8005afc <frame_process+0x1b6>
        if (byte == '(')
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b28      	cmp	r3, #40	; 0x28
 8005964:	f040 80c9 	bne.w	8005afa <frame_process+0x1b4>
            self->buffer[self->count_buffer] = byte;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	79d2      	ldrb	r2, [r2, #7]
 8005970:	4413      	add	r3, r2
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	701a      	strb	r2, [r3, #0]
            self->count_buffer++;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	79db      	ldrb	r3, [r3, #7]
 800597a:	3301      	adds	r3, #1
 800597c:	b2da      	uxtb	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	71da      	strb	r2, [r3, #7]
            self->state_frame = EOM;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	719a      	strb	r2, [r3, #6]
            xTimerStartFromISR(self->timer,0);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691c      	ldr	r4, [r3, #16]
 800598c:	f7fe fa9c 	bl	8003ec8 <xTaskGetTickCountFromISR>
 8005990:	4602      	mov	r2, r0
 8005992:	2300      	movs	r3, #0
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	2300      	movs	r3, #0
 8005998:	2106      	movs	r1, #6
 800599a:	4620      	mov	r0, r4
 800599c:	f7fe ff74 	bl	8004888 <xTimerGenericCommand>
        break;
 80059a0:	e0ab      	b.n	8005afa <frame_process+0x1b4>
        if (byte == ')')
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	2b29      	cmp	r3, #41	; 0x29
 80059a6:	d179      	bne.n	8005a9c <frame_process+0x156>
        	xTimerStopFromISR(self->timer,0);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6918      	ldr	r0, [r3, #16]
 80059ac:	2300      	movs	r3, #0
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	2200      	movs	r2, #0
 80059b4:	2108      	movs	r1, #8
 80059b6:	f7fe ff67 	bl	8004888 <xTimerGenericCommand>
        	self->buffer[self->count_buffer] = byte;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	79d2      	ldrb	r2, [r2, #7]
 80059c2:	4413      	add	r3, r2
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	701a      	strb	r2, [r3, #0]
            self->count_buffer++;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	79db      	ldrb	r3, [r3, #7]
 80059cc:	3301      	adds	r3, #1
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	71da      	strb	r2, [r3, #7]
            self->state_frame = SOM;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	719a      	strb	r2, [r3, #6]
            c2_parser_init(&c2_parser, self->buffer, self->count_buffer);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6819      	ldr	r1, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	79da      	ldrb	r2, [r3, #7]
 80059e2:	f107 0314 	add.w	r3, r7, #20
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f911 	bl	8005c0e <c2_parser_init>
            if (validate_id_hex(&c2_parser) == 1 && validate_crc_hex(&c2_parser) == 1)
 80059ec:	f107 0314 	add.w	r3, r7, #20
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 f92b 	bl	8005c4c <validate_id_hex>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d044      	beq.n	8005a86 <frame_process+0x140>
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f955 	bl	8005cb0 <validate_crc_hex>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d03c      	beq.n	8005a86 <frame_process+0x140>
				uint8_t crc = calculate_crc(self->buffer, self->count_buffer);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	79db      	ldrb	r3, [r3, #7]
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 f874 	bl	8005b04 <calculate_crc>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				uint8_t crc2 = convert_ascii_to_uint(self->buffer+(self->count_buffer-3));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	79db      	ldrb	r3, [r3, #7]
 8005a2a:	3b03      	subs	r3, #3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f87d 	bl	8005b2e <convert_ascii_to_uint>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (crc == crc2)
 8005a3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d114      	bne.n	8005a70 <frame_process+0x12a>
							self->buffer,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
					ts_package package = {
 8005a4a:	60fb      	str	r3, [r7, #12]
							self->count_buffer
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	79db      	ldrb	r3, [r3, #7]
					ts_package package = {
 8005a50:	743b      	strb	r3, [r7, #16]
					ts_package *p_package = &package;
 8005a52:	f107 030c 	add.w	r3, r7, #12
 8005a56:	60bb      	str	r3, [r7, #8]
					frame_reset(self);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ff5f 	bl	800591c <frame_reset>
					xQueueSendToFrontFromISR(self->c2_queue, (void *)&p_package, 0);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6898      	ldr	r0, [r3, #8]
 8005a62:	f107 0108 	add.w	r1, r7, #8
 8005a66:	2301      	movs	r3, #1
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f7fd fc8f 	bl	800338c <xQueueGenericSendFromISR>
            {
 8005a6e:	e043      	b.n	8005af8 <frame_process+0x1b2>
					memset(self->buffer,'\0',200);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	22c8      	movs	r2, #200	; 0xc8
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fbf7 	bl	800626c <memset>
					self->count_buffer=0;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	71da      	strb	r2, [r3, #7]
            {
 8005a84:	e038      	b.n	8005af8 <frame_process+0x1b2>
            	memset(self->buffer,'\0',200);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	22c8      	movs	r2, #200	; 0xc8
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fbec 	bl	800626c <memset>
				self->count_buffer=0;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	71da      	strb	r2, [r3, #7]
        break;
 8005a9a:	e02f      	b.n	8005afc <frame_process+0x1b6>
            if (byte == '(')
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	2b28      	cmp	r3, #40	; 0x28
 8005aa0:	d110      	bne.n	8005ac4 <frame_process+0x17e>
                self->count_buffer = 0;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	71da      	strb	r2, [r3, #7]
                self->buffer[self->count_buffer] = byte;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	79d2      	ldrb	r2, [r2, #7]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	78fa      	ldrb	r2, [r7, #3]
 8005ab4:	701a      	strb	r2, [r3, #0]
                self->count_buffer++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	79db      	ldrb	r3, [r3, #7]
 8005aba:	3301      	adds	r3, #1
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	71da      	strb	r2, [r3, #7]
 8005ac2:	e00c      	b.n	8005ade <frame_process+0x198>
                self->buffer[self->count_buffer] = byte;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	79d2      	ldrb	r2, [r2, #7]
 8005acc:	4413      	add	r3, r2
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	701a      	strb	r2, [r3, #0]
                self->count_buffer++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	79db      	ldrb	r3, [r3, #7]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	71da      	strb	r2, [r3, #7]
            xTimerStartFromISR(self->timer,0);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691c      	ldr	r4, [r3, #16]
 8005ae2:	f7fe f9f1 	bl	8003ec8 <xTaskGetTickCountFromISR>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	2106      	movs	r1, #6
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7fe fec9 	bl	8004888 <xTimerGenericCommand>
        break;
 8005af6:	e001      	b.n	8005afc <frame_process+0x1b6>
 8005af8:	e000      	b.n	8005afc <frame_process+0x1b6>
        break;
 8005afa:	bf00      	nop
    }
}
 8005afc:	bf00      	nop
 8005afe:	372c      	adds	r7, #44	; 0x2c
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd90      	pop	{r4, r7, pc}

08005b04 <calculate_crc>:

uint8_t calculate_crc(uint8_t *buffer, uint8_t count_buffer)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
    uint8_t data_crc = crc8_calc(0, buffer+1, count_buffer-4);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	3b04      	subs	r3, #4
 8005b18:	461a      	mov	r2, r3
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f000 f8fa 	bl	8005d14 <crc8_calc>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]
    return data_crc;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <convert_ascii_to_uint>:

uint8_t convert_ascii_to_uint(uint8_t *data)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
	if (data[0] >= 'A' && data[0] <= 'F')
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d90a      	bls.n	8005b58 <convert_ascii_to_uint+0x2a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b46      	cmp	r3, #70	; 0x46
 8005b48:	d806      	bhi.n	8005b58 <convert_ascii_to_uint+0x2a>
		result = (10 + data[0] - 'A') * 16;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	3b37      	subs	r3, #55	; 0x37
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	73fb      	strb	r3, [r7, #15]
 8005b56:	e005      	b.n	8005b64 <convert_ascii_to_uint+0x36>
	else
		result = (data[0] - '0') * 16;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	3b30      	subs	r3, #48	; 0x30
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	73fb      	strb	r3, [r7, #15]

	if (data[1] >= 'A' && data[1] <= 'F')
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3301      	adds	r3, #1
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d90d      	bls.n	8005b8a <convert_ascii_to_uint+0x5c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3301      	adds	r3, #1
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b46      	cmp	r3, #70	; 0x46
 8005b76:	d808      	bhi.n	8005b8a <convert_ascii_to_uint+0x5c>
		result += 10 + data[1] - 'A';
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	4413      	add	r3, r2
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	3b37      	subs	r3, #55	; 0x37
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	e007      	b.n	8005b9a <convert_ascii_to_uint+0x6c>
	else
		result += data[1] - '0';
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	4413      	add	r3, r2
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	3b30      	subs	r3, #48	; 0x30
 8005b98:	73fb      	strb	r3, [r7, #15]

	return result;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <convert_uint_to_ascii>:

void convert_uint_to_ascii(uint8_t *data, uint8_t crc)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
    uint8_t msn, lsn;
    msn = crc / 16;
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	73fb      	strb	r3, [r7, #15]
    lsn = crc - msn * 16;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	73bb      	strb	r3, [r7, #14]

    if (msn < 10)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b09      	cmp	r3, #9
 8005bca:	d805      	bhi.n	8005bd8 <convert_uint_to_ascii+0x30>
        data[0] = msn + '0';
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	3330      	adds	r3, #48	; 0x30
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	e004      	b.n	8005be2 <convert_uint_to_ascii+0x3a>
    else
        data[0] = msn - 10 + 'A';
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	3337      	adds	r3, #55	; 0x37
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	701a      	strb	r2, [r3, #0]

    if (lsn < 10)
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	2b09      	cmp	r3, #9
 8005be6:	d806      	bhi.n	8005bf6 <convert_uint_to_ascii+0x4e>
        data[1] = lsn + '0';
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3301      	adds	r3, #1
 8005bec:	7bba      	ldrb	r2, [r7, #14]
 8005bee:	3230      	adds	r2, #48	; 0x30
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
    else
        data[1] = lsn - 10 + 'A';
}
 8005bf4:	e005      	b.n	8005c02 <convert_uint_to_ascii+0x5a>
        data[1] = lsn - 10 + 'A';
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	7bba      	ldrb	r2, [r7, #14]
 8005bfc:	3237      	adds	r2, #55	; 0x37
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <c2_parser_init>:
#include "c2_parser.h"

void c2_parser_init(ts_c2_parser *self, uint8_t *buffer, uint8_t size)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71fb      	strb	r3, [r7, #7]
    self->buffer = buffer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	601a      	str	r2, [r3, #0]
    self->size_buffer = size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	79fa      	ldrb	r2, [r7, #7]
 8005c26:	731a      	strb	r2, [r3, #12]
    self->id = (self->buffer) + 1;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
    self->crc = (self->buffer + size - 3);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	3b03      	subs	r3, #3
 8005c3a:	441a      	add	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <validate_id_hex>:

bool validate_id_hex(ts_c2_parser *self)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8005c54:	2300      	movs	r3, #0
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e020      	b.n	8005c9c <validate_id_hex+0x50>
    {
        if (!((self->id[i] <= 70 && self->id[i] >= 65) || (self->id[i] <= 57 && self->id[i] >= 48)))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	4413      	add	r3, r2
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b46      	cmp	r3, #70	; 0x46
 8005c66:	d806      	bhi.n	8005c76 <validate_id_hex+0x2a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	4413      	add	r3, r2
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	d80f      	bhi.n	8005c96 <validate_id_hex+0x4a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b39      	cmp	r3, #57	; 0x39
 8005c82:	d806      	bhi.n	8005c92 <validate_id_hex+0x46>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8005c90:	d801      	bhi.n	8005c96 <validate_id_hex+0x4a>
        {
            return false;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e006      	b.n	8005ca4 <validate_id_hex+0x58>
    for (uint8_t i = 0; i < 4; i++)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d9db      	bls.n	8005c5a <validate_id_hex+0xe>
        }
    }
    return true;
 8005ca2:	2301      	movs	r3, #1
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <validate_crc_hex>:

bool validate_crc_hex(ts_c2_parser *self)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 2; i++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
 8005cbc:	e020      	b.n	8005d00 <validate_crc_hex+0x50>
    {
        if (!((self->crc[i] <= 70 && self->crc[i]  >= 65) || (self->crc[i]  <= 57 && self->crc[i]  >= 48)))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b46      	cmp	r3, #70	; 0x46
 8005cca:	d806      	bhi.n	8005cda <validate_crc_hex+0x2a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d80f      	bhi.n	8005cfa <validate_crc_hex+0x4a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b39      	cmp	r3, #57	; 0x39
 8005ce6:	d806      	bhi.n	8005cf6 <validate_crc_hex+0x46>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	4413      	add	r3, r2
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b2f      	cmp	r3, #47	; 0x2f
 8005cf4:	d801      	bhi.n	8005cfa <validate_crc_hex+0x4a>
        {
            return false;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e006      	b.n	8005d08 <validate_crc_hex+0x58>
    for (uint8_t i = 0; i < 2; i++)
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d9db      	bls.n	8005cbe <validate_crc_hex+0xe>
        }
    }
    return true;
 8005d06:	2301      	movs	r3, #1
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <crc8_calc>:
{
    return 0xff;
}

uint8_t crc8_calc(uint8_t val, void *buf, int cnt)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	73fb      	strb	r3, [r7, #15]
	int i;
	uint8_t *p = buf;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	613b      	str	r3, [r7, #16]

	for (i = 0; i < cnt; i++) {
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e023      	b.n	8005d74 <crc8_calc+0x60>
		val ^= p[i];
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4413      	add	r3, r2
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	4053      	eors	r3, r2
 8005d38:	73fb      	strb	r3, [r7, #15]
		val = (val << 4) ^ crc8_small_table[val >> 4];
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	b25a      	sxtb	r2, r3
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	091b      	lsrs	r3, r3, #4
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	4619      	mov	r1, r3
 8005d48:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <crc8_calc+0x78>)
 8005d4a:	5c5b      	ldrb	r3, [r3, r1]
 8005d4c:	b25b      	sxtb	r3, r3
 8005d4e:	4053      	eors	r3, r2
 8005d50:	b25b      	sxtb	r3, r3
 8005d52:	73fb      	strb	r3, [r7, #15]
		val = (val << 4) ^ crc8_small_table[val >> 4];
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	b25a      	sxtb	r2, r3
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	091b      	lsrs	r3, r3, #4
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	4619      	mov	r1, r3
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <crc8_calc+0x78>)
 8005d64:	5c5b      	ldrb	r3, [r3, r1]
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	4053      	eors	r3, r2
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < cnt; i++) {
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	3301      	adds	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	dbd7      	blt.n	8005d2c <crc8_calc+0x18>
	}
	return val;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000010 	.word	0x20000010

08005d90 <validate_data>:

#include "package.h"
#include <string.h>

ts_erroy_type validate_data(ts_package *self)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
    //valida si el primer byte de datos no es '_'
    if ((self->buffer[6]=='_') || (self->buffer[6]==' '))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3306      	adds	r3, #6
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b5f      	cmp	r3, #95	; 0x5f
 8005da2:	d005      	beq.n	8005db0 <validate_data+0x20>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3306      	adds	r3, #6
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d101      	bne.n	8005db4 <validate_data+0x24>
    {
        return ERROR_INVALID_DATA;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e028      	b.n	8005e06 <validate_data+0x76>
    }
    //valida si el byte de comando es correcto
    if (self->buffer[5] !='S' && self->buffer[5] !='C' && self->buffer[5]!='P')
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3305      	adds	r3, #5
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b53      	cmp	r3, #83	; 0x53
 8005dbe:	d00d      	beq.n	8005ddc <validate_data+0x4c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3305      	adds	r3, #5
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b43      	cmp	r3, #67	; 0x43
 8005dca:	d007      	beq.n	8005ddc <validate_data+0x4c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3305      	adds	r3, #5
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b50      	cmp	r3, #80	; 0x50
 8005dd6:	d001      	beq.n	8005ddc <validate_data+0x4c>
    {
        return ERROR_INVALID_OPCODE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e014      	b.n	8005e06 <validate_data+0x76>
    }
    //valida si el ultimo byte no es '_'
    if ((self->buffer[self->count_buffer-3]=='_') || (self->buffer[self->count_buffer-3]==' '))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	791b      	ldrb	r3, [r3, #4]
 8005de4:	3b03      	subs	r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b5f      	cmp	r3, #95	; 0x5f
 8005dec:	d008      	beq.n	8005e00 <validate_data+0x70>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	791b      	ldrb	r3, [r3, #4]
 8005df6:	3b03      	subs	r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d101      	bne.n	8005e04 <validate_data+0x74>
    {
        return ERROR_INVALID_DATA;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <validate_data+0x76>
    }
    return NO_ERROR;
 8005e04:	2303      	movs	r3, #3
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <convert_snake_case>:

void convert_snake_case(ts_package *self)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 6; i < self->count_buffer-4; i++)
 8005e1a:	2306      	movs	r3, #6
 8005e1c:	73fb      	strb	r3, [r7, #15]
 8005e1e:	e04a      	b.n	8005eb6 <convert_snake_case+0xa4>
    {
        if (self->buffer[i] >= 'A' && self->buffer[i] <= 'Z')
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	4413      	add	r3, r2
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d933      	bls.n	8005e96 <convert_snake_case+0x84>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b5a      	cmp	r3, #90	; 0x5a
 8005e3a:	d82c      	bhi.n	8005e96 <convert_snake_case+0x84>
        {
            self->buffer[i] = self->buffer[i]+32;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	4413      	add	r3, r2
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	440b      	add	r3, r1
 8005e4e:	3220      	adds	r2, #32
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
            if (i!=6)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d02a      	beq.n	8005eb0 <convert_snake_case+0x9e>
            {
                memmove(self->buffer+i+1,self->buffer+i,self->count_buffer-i);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	3301      	adds	r3, #1
 8005e62:	18d0      	adds	r0, r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	18d1      	adds	r1, r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	461a      	mov	r2, r3
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	f000 f9de 	bl	8006238 <memmove>
                self->buffer[i]='_';
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	4413      	add	r3, r2
 8005e84:	225f      	movs	r2, #95	; 0x5f
 8005e86:	701a      	strb	r2, [r3, #0]
                self->count_buffer++;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	711a      	strb	r2, [r3, #4]
            if (i!=6)
 8005e94:	e00c      	b.n	8005eb0 <convert_snake_case+0x9e>
            }
        }
        else if (self->buffer[i]==' ')
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d105      	bne.n	8005eb0 <convert_snake_case+0x9e>
        {
            self->buffer[i]='_';
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	4413      	add	r3, r2
 8005eac:	225f      	movs	r2, #95	; 0x5f
 8005eae:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 6; i < self->count_buffer-4; i++)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	73fb      	strb	r3, [r7, #15]
 8005eb6:	7bfa      	ldrb	r2, [r7, #15]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	791b      	ldrb	r3, [r3, #4]
 8005ebc:	3b04      	subs	r3, #4
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	dbae      	blt.n	8005e20 <convert_snake_case+0xe>
        }
    }
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <convert_camel_case>:

void convert_camel_case(ts_package *self)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 6; i < self->count_buffer-4; i++)
 8005ed4:	2306      	movs	r3, #6
 8005ed6:	73fb      	strb	r3, [r7, #15]
 8005ed8:	e063      	b.n	8005fa2 <convert_camel_case+0xd6>
    {
        if (self->buffer[i]=='_' || self->buffer[i]==' ')
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b5f      	cmp	r3, #95	; 0x5f
 8005ee6:	d006      	beq.n	8005ef6 <convert_camel_case+0x2a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	4413      	add	r3, r2
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d135      	bne.n	8005f62 <convert_camel_case+0x96>
        {
            if (self->buffer[i+1] >= 'a' && self->buffer[i+1] <= 'z')
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b60      	cmp	r3, #96	; 0x60
 8005f04:	d915      	bls.n	8005f32 <convert_camel_case+0x66>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	4413      	add	r3, r2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b7a      	cmp	r3, #122	; 0x7a
 8005f14:	d80d      	bhi.n	8005f32 <convert_camel_case+0x66>
            {
                self->buffer[i+1]=self->buffer[i+1]-32;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	781a      	ldrb	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3a20      	subs	r2, #32
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
            }           
            memmove((void*)self->buffer+i,(void*)self->buffer+i+1,self->count_buffer-i);   
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	18d0      	adds	r0, r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	3301      	adds	r3, #1
 8005f42:	18d1      	adds	r1, r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	791b      	ldrb	r3, [r3, #4]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 f972 	bl	8006238 <memmove>
            self->count_buffer--;  
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	791b      	ldrb	r3, [r3, #4]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	711a      	strb	r2, [r3, #4]
 8005f60:	e01c      	b.n	8005f9c <convert_camel_case+0xd0>
        }
        else if(self->buffer[i] >= 'A' && self->buffer[i] <= 'Z')
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d915      	bls.n	8005f9c <convert_camel_case+0xd0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b5a      	cmp	r3, #90	; 0x5a
 8005f7c:	d80e      	bhi.n	8005f9c <convert_camel_case+0xd0>
        {
            if (i==6)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b06      	cmp	r3, #6
 8005f82:	d10b      	bne.n	8005f9c <convert_camel_case+0xd0>
            {
                self->buffer[i]=self->buffer[i]+32;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6819      	ldr	r1, [r3, #0]
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	440b      	add	r3, r1
 8005f96:	3220      	adds	r2, #32
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 6; i < self->count_buffer-4; i++)
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	73fb      	strb	r3, [r7, #15]
 8005fa2:	7bfa      	ldrb	r2, [r7, #15]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	791b      	ldrb	r3, [r3, #4]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	429a      	cmp	r2, r3
 8005fac:	db95      	blt.n	8005eda <convert_camel_case+0xe>
            }
        }    
    }  
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <convert_pascal_case>:

void convert_pascal_case(ts_package *self)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 6; i < self->count_buffer-4 ; i++)
 8005fc0:	2306      	movs	r3, #6
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	e05c      	b.n	8006080 <convert_pascal_case+0xc8>
    {
        if (i==6)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d11a      	bne.n	8006002 <convert_pascal_case+0x4a>
        {
            if (self->buffer[i] >= 'a' && self->buffer[i] <= 'z')
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b60      	cmp	r3, #96	; 0x60
 8005fd8:	d94f      	bls.n	800607a <convert_pascal_case+0xc2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b7a      	cmp	r3, #122	; 0x7a
 8005fe6:	d848      	bhi.n	800607a <convert_pascal_case+0xc2>
            {
                self->buffer[i]=self->buffer[i]-32;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	4413      	add	r3, r2
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6819      	ldr	r1, [r3, #0]
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3a20      	subs	r2, #32
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e03b      	b.n	800607a <convert_pascal_case+0xc2>
            }
        }
        else if (self->buffer[i] == '_')
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	4413      	add	r3, r2
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b5f      	cmp	r3, #95	; 0x5f
 800600e:	d134      	bne.n	800607a <convert_pascal_case+0xc2>
        {
            if (self->buffer[i+1] >= 'a' && self->buffer[i+1] <= 'z')
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	3301      	adds	r3, #1
 8006018:	4413      	add	r3, r2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b60      	cmp	r3, #96	; 0x60
 800601e:	d915      	bls.n	800604c <convert_pascal_case+0x94>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	3301      	adds	r3, #1
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b7a      	cmp	r3, #122	; 0x7a
 800602e:	d80d      	bhi.n	800604c <convert_pascal_case+0x94>
            {
                self->buffer[i+1] = self->buffer[i+1]-32;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	3301      	adds	r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	3301      	adds	r3, #1
 8006044:	440b      	add	r3, r1
 8006046:	3a20      	subs	r2, #32
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
            }           
            memmove((void*)self->buffer+i,(void*)self->buffer+i+1,self->count_buffer-i);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	18d0      	adds	r0, r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	3301      	adds	r3, #1
 800605c:	18d1      	adds	r1, r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	791b      	ldrb	r3, [r3, #4]
 8006062:	461a      	mov	r2, r3
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	461a      	mov	r2, r3
 800606a:	f000 f8e5 	bl	8006238 <memmove>
            self->count_buffer--;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	791b      	ldrb	r3, [r3, #4]
 8006072:	3b01      	subs	r3, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 6; i < self->count_buffer-4 ; i++)
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	3301      	adds	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
 8006080:	7bfa      	ldrb	r2, [r7, #15]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	791b      	ldrb	r3, [r3, #4]
 8006086:	3b04      	subs	r3, #4
 8006088:	429a      	cmp	r2, r3
 800608a:	db9c      	blt.n	8005fc6 <convert_pascal_case+0xe>
        }
    
    }
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <process_package>:

void process_package(ts_package *self)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
    if (self->buffer[5]=='S')
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3305      	adds	r3, #5
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b53      	cmp	r3, #83	; 0x53
 80060a8:	d103      	bne.n	80060b2 <process_package+0x1c>
    {
        convert_snake_case(self);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff feb1 	bl	8005e12 <convert_snake_case>
    }
    else if (self->buffer[5]=='P')
    {
        convert_pascal_case(self);
    }
}
 80060b0:	e012      	b.n	80060d8 <process_package+0x42>
    else if (self->buffer[5]=='C')
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3305      	adds	r3, #5
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b43      	cmp	r3, #67	; 0x43
 80060bc:	d103      	bne.n	80060c6 <process_package+0x30>
        convert_camel_case(self);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ff04 	bl	8005ecc <convert_camel_case>
}
 80060c4:	e008      	b.n	80060d8 <process_package+0x42>
    else if (self->buffer[5]=='P')
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3305      	adds	r3, #5
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b50      	cmp	r3, #80	; 0x50
 80060d0:	d102      	bne.n	80060d8 <process_package+0x42>
        convert_pascal_case(self);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff ff70 	bl	8005fb8 <convert_pascal_case>
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <trama_error>:
void trama_error( ts_package *package,ts_erroy_type error)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
	if (error ==ERROR_INVALID_DATA ) {
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d129      	bne.n	8006146 <trama_error+0x66>
	memset(package->buffer+5,'\0',195);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3305      	adds	r3, #5
 80060f8:	22c3      	movs	r2, #195	; 0xc3
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 f8b5 	bl	800626c <memset>
	package->buffer[5]='E';
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3305      	adds	r3, #5
 8006108:	2245      	movs	r2, #69	; 0x45
 800610a:	701a      	strb	r2, [r3, #0]
	package->buffer[6]='0';
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3306      	adds	r3, #6
 8006112:	2230      	movs	r2, #48	; 0x30
 8006114:	701a      	strb	r2, [r3, #0]
	package->buffer[7]='0';
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3307      	adds	r3, #7
 800611c:	2230      	movs	r2, #48	; 0x30
 800611e:	701a      	strb	r2, [r3, #0]
	package->buffer[8]='0';
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	2230      	movs	r2, #48	; 0x30
 8006128:	701a      	strb	r2, [r3, #0]
	package->buffer[9]='0';
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3309      	adds	r3, #9
 8006130:	2230      	movs	r2, #48	; 0x30
 8006132:	701a      	strb	r2, [r3, #0]
	package->buffer[10]=')';
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330a      	adds	r3, #10
 800613a:	2229      	movs	r2, #41	; 0x29
 800613c:	701a      	strb	r2, [r3, #0]
	package->count_buffer=11;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	220b      	movs	r2, #11
 8006142:	711a      	strb	r2, [r3, #4]
	package->buffer[8]='0';
	package->buffer[9]='0';
	package->buffer[10]=')';
	package->count_buffer=11;
	}
}
 8006144:	e02b      	b.n	800619e <trama_error+0xbe>
	else if (error ==ERROR_INVALID_OPCODE) {
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d128      	bne.n	800619e <trama_error+0xbe>
	memset(package->buffer+5,'\0',195);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3305      	adds	r3, #5
 8006152:	22c3      	movs	r2, #195	; 0xc3
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f888 	bl	800626c <memset>
	package->buffer[5]='E';
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3305      	adds	r3, #5
 8006162:	2245      	movs	r2, #69	; 0x45
 8006164:	701a      	strb	r2, [r3, #0]
	package->buffer[6]='0';
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3306      	adds	r3, #6
 800616c:	2230      	movs	r2, #48	; 0x30
 800616e:	701a      	strb	r2, [r3, #0]
	package->buffer[7]='1';
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3307      	adds	r3, #7
 8006176:	2231      	movs	r2, #49	; 0x31
 8006178:	701a      	strb	r2, [r3, #0]
	package->buffer[8]='0';
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3308      	adds	r3, #8
 8006180:	2230      	movs	r2, #48	; 0x30
 8006182:	701a      	strb	r2, [r3, #0]
	package->buffer[9]='0';
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3309      	adds	r3, #9
 800618a:	2230      	movs	r2, #48	; 0x30
 800618c:	701a      	strb	r2, [r3, #0]
	package->buffer[10]=')';
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330a      	adds	r3, #10
 8006194:	2229      	movs	r2, #41	; 0x29
 8006196:	701a      	strb	r2, [r3, #0]
	package->count_buffer=11;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	220b      	movs	r2, #11
 800619c:	711a      	strb	r2, [r3, #4]
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <__errno>:
 80061a8:	4b01      	ldr	r3, [pc, #4]	; (80061b0 <__errno+0x8>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	20000020 	.word	0x20000020

080061b4 <__libc_init_array>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4d0d      	ldr	r5, [pc, #52]	; (80061ec <__libc_init_array+0x38>)
 80061b8:	4c0d      	ldr	r4, [pc, #52]	; (80061f0 <__libc_init_array+0x3c>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	2600      	movs	r6, #0
 80061c0:	42a6      	cmp	r6, r4
 80061c2:	d109      	bne.n	80061d8 <__libc_init_array+0x24>
 80061c4:	4d0b      	ldr	r5, [pc, #44]	; (80061f4 <__libc_init_array+0x40>)
 80061c6:	4c0c      	ldr	r4, [pc, #48]	; (80061f8 <__libc_init_array+0x44>)
 80061c8:	f000 f956 	bl	8006478 <_init>
 80061cc:	1b64      	subs	r4, r4, r5
 80061ce:	10a4      	asrs	r4, r4, #2
 80061d0:	2600      	movs	r6, #0
 80061d2:	42a6      	cmp	r6, r4
 80061d4:	d105      	bne.n	80061e2 <__libc_init_array+0x2e>
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061dc:	4798      	blx	r3
 80061de:	3601      	adds	r6, #1
 80061e0:	e7ee      	b.n	80061c0 <__libc_init_array+0xc>
 80061e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e6:	4798      	blx	r3
 80061e8:	3601      	adds	r6, #1
 80061ea:	e7f2      	b.n	80061d2 <__libc_init_array+0x1e>
 80061ec:	080064e4 	.word	0x080064e4
 80061f0:	080064e4 	.word	0x080064e4
 80061f4:	080064e4 	.word	0x080064e4
 80061f8:	080064e8 	.word	0x080064e8

080061fc <malloc>:
 80061fc:	4b02      	ldr	r3, [pc, #8]	; (8006208 <malloc+0xc>)
 80061fe:	4601      	mov	r1, r0
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f000 b8a7 	b.w	8006354 <_malloc_r>
 8006206:	bf00      	nop
 8006208:	20000020 	.word	0x20000020

0800620c <free>:
 800620c:	4b02      	ldr	r3, [pc, #8]	; (8006218 <free+0xc>)
 800620e:	4601      	mov	r1, r0
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	f000 b833 	b.w	800627c <_free_r>
 8006216:	bf00      	nop
 8006218:	20000020 	.word	0x20000020

0800621c <memcpy>:
 800621c:	440a      	add	r2, r1
 800621e:	4291      	cmp	r1, r2
 8006220:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006224:	d100      	bne.n	8006228 <memcpy+0xc>
 8006226:	4770      	bx	lr
 8006228:	b510      	push	{r4, lr}
 800622a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800622e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006232:	4291      	cmp	r1, r2
 8006234:	d1f9      	bne.n	800622a <memcpy+0xe>
 8006236:	bd10      	pop	{r4, pc}

08006238 <memmove>:
 8006238:	4288      	cmp	r0, r1
 800623a:	b510      	push	{r4, lr}
 800623c:	eb01 0402 	add.w	r4, r1, r2
 8006240:	d902      	bls.n	8006248 <memmove+0x10>
 8006242:	4284      	cmp	r4, r0
 8006244:	4623      	mov	r3, r4
 8006246:	d807      	bhi.n	8006258 <memmove+0x20>
 8006248:	1e43      	subs	r3, r0, #1
 800624a:	42a1      	cmp	r1, r4
 800624c:	d008      	beq.n	8006260 <memmove+0x28>
 800624e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006256:	e7f8      	b.n	800624a <memmove+0x12>
 8006258:	4402      	add	r2, r0
 800625a:	4601      	mov	r1, r0
 800625c:	428a      	cmp	r2, r1
 800625e:	d100      	bne.n	8006262 <memmove+0x2a>
 8006260:	bd10      	pop	{r4, pc}
 8006262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800626a:	e7f7      	b.n	800625c <memmove+0x24>

0800626c <memset>:
 800626c:	4402      	add	r2, r0
 800626e:	4603      	mov	r3, r0
 8006270:	4293      	cmp	r3, r2
 8006272:	d100      	bne.n	8006276 <memset+0xa>
 8006274:	4770      	bx	lr
 8006276:	f803 1b01 	strb.w	r1, [r3], #1
 800627a:	e7f9      	b.n	8006270 <memset+0x4>

0800627c <_free_r>:
 800627c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800627e:	2900      	cmp	r1, #0
 8006280:	d044      	beq.n	800630c <_free_r+0x90>
 8006282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006286:	9001      	str	r0, [sp, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f1a1 0404 	sub.w	r4, r1, #4
 800628e:	bfb8      	it	lt
 8006290:	18e4      	addlt	r4, r4, r3
 8006292:	f000 f8e3 	bl	800645c <__malloc_lock>
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <_free_r+0x94>)
 8006298:	9801      	ldr	r0, [sp, #4]
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	b933      	cbnz	r3, 80062ac <_free_r+0x30>
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	6014      	str	r4, [r2, #0]
 80062a2:	b003      	add	sp, #12
 80062a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062a8:	f000 b8de 	b.w	8006468 <__malloc_unlock>
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	d908      	bls.n	80062c2 <_free_r+0x46>
 80062b0:	6825      	ldr	r5, [r4, #0]
 80062b2:	1961      	adds	r1, r4, r5
 80062b4:	428b      	cmp	r3, r1
 80062b6:	bf01      	itttt	eq
 80062b8:	6819      	ldreq	r1, [r3, #0]
 80062ba:	685b      	ldreq	r3, [r3, #4]
 80062bc:	1949      	addeq	r1, r1, r5
 80062be:	6021      	streq	r1, [r4, #0]
 80062c0:	e7ed      	b.n	800629e <_free_r+0x22>
 80062c2:	461a      	mov	r2, r3
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	b10b      	cbz	r3, 80062cc <_free_r+0x50>
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d9fa      	bls.n	80062c2 <_free_r+0x46>
 80062cc:	6811      	ldr	r1, [r2, #0]
 80062ce:	1855      	adds	r5, r2, r1
 80062d0:	42a5      	cmp	r5, r4
 80062d2:	d10b      	bne.n	80062ec <_free_r+0x70>
 80062d4:	6824      	ldr	r4, [r4, #0]
 80062d6:	4421      	add	r1, r4
 80062d8:	1854      	adds	r4, r2, r1
 80062da:	42a3      	cmp	r3, r4
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	d1e0      	bne.n	80062a2 <_free_r+0x26>
 80062e0:	681c      	ldr	r4, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	6053      	str	r3, [r2, #4]
 80062e6:	4421      	add	r1, r4
 80062e8:	6011      	str	r1, [r2, #0]
 80062ea:	e7da      	b.n	80062a2 <_free_r+0x26>
 80062ec:	d902      	bls.n	80062f4 <_free_r+0x78>
 80062ee:	230c      	movs	r3, #12
 80062f0:	6003      	str	r3, [r0, #0]
 80062f2:	e7d6      	b.n	80062a2 <_free_r+0x26>
 80062f4:	6825      	ldr	r5, [r4, #0]
 80062f6:	1961      	adds	r1, r4, r5
 80062f8:	428b      	cmp	r3, r1
 80062fa:	bf04      	itt	eq
 80062fc:	6819      	ldreq	r1, [r3, #0]
 80062fe:	685b      	ldreq	r3, [r3, #4]
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	bf04      	itt	eq
 8006304:	1949      	addeq	r1, r1, r5
 8006306:	6021      	streq	r1, [r4, #0]
 8006308:	6054      	str	r4, [r2, #4]
 800630a:	e7ca      	b.n	80062a2 <_free_r+0x26>
 800630c:	b003      	add	sp, #12
 800630e:	bd30      	pop	{r4, r5, pc}
 8006310:	2000469c 	.word	0x2000469c

08006314 <sbrk_aligned>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	4e0e      	ldr	r6, [pc, #56]	; (8006350 <sbrk_aligned+0x3c>)
 8006318:	460c      	mov	r4, r1
 800631a:	6831      	ldr	r1, [r6, #0]
 800631c:	4605      	mov	r5, r0
 800631e:	b911      	cbnz	r1, 8006326 <sbrk_aligned+0x12>
 8006320:	f000 f88c 	bl	800643c <_sbrk_r>
 8006324:	6030      	str	r0, [r6, #0]
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f000 f887 	bl	800643c <_sbrk_r>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	d00a      	beq.n	8006348 <sbrk_aligned+0x34>
 8006332:	1cc4      	adds	r4, r0, #3
 8006334:	f024 0403 	bic.w	r4, r4, #3
 8006338:	42a0      	cmp	r0, r4
 800633a:	d007      	beq.n	800634c <sbrk_aligned+0x38>
 800633c:	1a21      	subs	r1, r4, r0
 800633e:	4628      	mov	r0, r5
 8006340:	f000 f87c 	bl	800643c <_sbrk_r>
 8006344:	3001      	adds	r0, #1
 8006346:	d101      	bne.n	800634c <sbrk_aligned+0x38>
 8006348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800634c:	4620      	mov	r0, r4
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	200046a0 	.word	0x200046a0

08006354 <_malloc_r>:
 8006354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006358:	1ccd      	adds	r5, r1, #3
 800635a:	f025 0503 	bic.w	r5, r5, #3
 800635e:	3508      	adds	r5, #8
 8006360:	2d0c      	cmp	r5, #12
 8006362:	bf38      	it	cc
 8006364:	250c      	movcc	r5, #12
 8006366:	2d00      	cmp	r5, #0
 8006368:	4607      	mov	r7, r0
 800636a:	db01      	blt.n	8006370 <_malloc_r+0x1c>
 800636c:	42a9      	cmp	r1, r5
 800636e:	d905      	bls.n	800637c <_malloc_r+0x28>
 8006370:	230c      	movs	r3, #12
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	2600      	movs	r6, #0
 8006376:	4630      	mov	r0, r6
 8006378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637c:	4e2e      	ldr	r6, [pc, #184]	; (8006438 <_malloc_r+0xe4>)
 800637e:	f000 f86d 	bl	800645c <__malloc_lock>
 8006382:	6833      	ldr	r3, [r6, #0]
 8006384:	461c      	mov	r4, r3
 8006386:	bb34      	cbnz	r4, 80063d6 <_malloc_r+0x82>
 8006388:	4629      	mov	r1, r5
 800638a:	4638      	mov	r0, r7
 800638c:	f7ff ffc2 	bl	8006314 <sbrk_aligned>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	4604      	mov	r4, r0
 8006394:	d14d      	bne.n	8006432 <_malloc_r+0xde>
 8006396:	6834      	ldr	r4, [r6, #0]
 8006398:	4626      	mov	r6, r4
 800639a:	2e00      	cmp	r6, #0
 800639c:	d140      	bne.n	8006420 <_malloc_r+0xcc>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	4631      	mov	r1, r6
 80063a2:	4638      	mov	r0, r7
 80063a4:	eb04 0803 	add.w	r8, r4, r3
 80063a8:	f000 f848 	bl	800643c <_sbrk_r>
 80063ac:	4580      	cmp	r8, r0
 80063ae:	d13a      	bne.n	8006426 <_malloc_r+0xd2>
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	3503      	adds	r5, #3
 80063b4:	1a6d      	subs	r5, r5, r1
 80063b6:	f025 0503 	bic.w	r5, r5, #3
 80063ba:	3508      	adds	r5, #8
 80063bc:	2d0c      	cmp	r5, #12
 80063be:	bf38      	it	cc
 80063c0:	250c      	movcc	r5, #12
 80063c2:	4629      	mov	r1, r5
 80063c4:	4638      	mov	r0, r7
 80063c6:	f7ff ffa5 	bl	8006314 <sbrk_aligned>
 80063ca:	3001      	adds	r0, #1
 80063cc:	d02b      	beq.n	8006426 <_malloc_r+0xd2>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	442b      	add	r3, r5
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	e00e      	b.n	80063f4 <_malloc_r+0xa0>
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	1b52      	subs	r2, r2, r5
 80063da:	d41e      	bmi.n	800641a <_malloc_r+0xc6>
 80063dc:	2a0b      	cmp	r2, #11
 80063de:	d916      	bls.n	800640e <_malloc_r+0xba>
 80063e0:	1961      	adds	r1, r4, r5
 80063e2:	42a3      	cmp	r3, r4
 80063e4:	6025      	str	r5, [r4, #0]
 80063e6:	bf18      	it	ne
 80063e8:	6059      	strne	r1, [r3, #4]
 80063ea:	6863      	ldr	r3, [r4, #4]
 80063ec:	bf08      	it	eq
 80063ee:	6031      	streq	r1, [r6, #0]
 80063f0:	5162      	str	r2, [r4, r5]
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	4638      	mov	r0, r7
 80063f6:	f104 060b 	add.w	r6, r4, #11
 80063fa:	f000 f835 	bl	8006468 <__malloc_unlock>
 80063fe:	f026 0607 	bic.w	r6, r6, #7
 8006402:	1d23      	adds	r3, r4, #4
 8006404:	1af2      	subs	r2, r6, r3
 8006406:	d0b6      	beq.n	8006376 <_malloc_r+0x22>
 8006408:	1b9b      	subs	r3, r3, r6
 800640a:	50a3      	str	r3, [r4, r2]
 800640c:	e7b3      	b.n	8006376 <_malloc_r+0x22>
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	42a3      	cmp	r3, r4
 8006412:	bf0c      	ite	eq
 8006414:	6032      	streq	r2, [r6, #0]
 8006416:	605a      	strne	r2, [r3, #4]
 8006418:	e7ec      	b.n	80063f4 <_malloc_r+0xa0>
 800641a:	4623      	mov	r3, r4
 800641c:	6864      	ldr	r4, [r4, #4]
 800641e:	e7b2      	b.n	8006386 <_malloc_r+0x32>
 8006420:	4634      	mov	r4, r6
 8006422:	6876      	ldr	r6, [r6, #4]
 8006424:	e7b9      	b.n	800639a <_malloc_r+0x46>
 8006426:	230c      	movs	r3, #12
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	4638      	mov	r0, r7
 800642c:	f000 f81c 	bl	8006468 <__malloc_unlock>
 8006430:	e7a1      	b.n	8006376 <_malloc_r+0x22>
 8006432:	6025      	str	r5, [r4, #0]
 8006434:	e7de      	b.n	80063f4 <_malloc_r+0xa0>
 8006436:	bf00      	nop
 8006438:	2000469c 	.word	0x2000469c

0800643c <_sbrk_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d06      	ldr	r5, [pc, #24]	; (8006458 <_sbrk_r+0x1c>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	f7fa fbc4 	bl	8000bd4 <_sbrk>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d102      	bne.n	8006456 <_sbrk_r+0x1a>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	b103      	cbz	r3, 8006456 <_sbrk_r+0x1a>
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	200046a4 	.word	0x200046a4

0800645c <__malloc_lock>:
 800645c:	4801      	ldr	r0, [pc, #4]	; (8006464 <__malloc_lock+0x8>)
 800645e:	f000 b809 	b.w	8006474 <__retarget_lock_acquire_recursive>
 8006462:	bf00      	nop
 8006464:	200046a8 	.word	0x200046a8

08006468 <__malloc_unlock>:
 8006468:	4801      	ldr	r0, [pc, #4]	; (8006470 <__malloc_unlock+0x8>)
 800646a:	f000 b804 	b.w	8006476 <__retarget_lock_release_recursive>
 800646e:	bf00      	nop
 8006470:	200046a8 	.word	0x200046a8

08006474 <__retarget_lock_acquire_recursive>:
 8006474:	4770      	bx	lr

08006476 <__retarget_lock_release_recursive>:
 8006476:	4770      	bx	lr

08006478 <_init>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr

08006484 <_fini>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr
